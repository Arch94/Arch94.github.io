{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/material/source/css/disqus-proxy.css","path":"css/disqus-proxy.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/disqus-proxy.min.css","path":"css/disqus-proxy.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/fontawesome.min.css","path":"css/fontawesome.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/lsloader.js","path":"js/lsloader.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/lsloader.min.js","path":"js/lsloader.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/queue.js","path":"js/queue.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/queue.min.js","path":"js/queue.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":1,"renderable":1},{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/material/source/js/mathjax.js","path":"js/mathjax.js","modified":1,"renderable":1},{"_id":"themes/material/source/img/browserstack_logo.png","path":"img/browserstack_logo.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/preview.png","path":"img/preview.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":1,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":1,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/user.jpeg","path":"img/user.jpeg","modified":1,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/tec/angular.svg","path":"img/tec/angular.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/tec/cordova.png","path":"img/tec/cordova.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/tec/css3.png","path":"img/tec/css3.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/tec/html5.png","path":"img/tec/html5.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/tec/ionic.png","path":"img/tec/ionic.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/tec/js.png","path":"img/tec/js.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/tec/vue.png","path":"img/tec/vue.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":1,"renderable":1}],"Cache":[{"_id":"themes/material/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1692345225261},{"_id":"themes/material/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1692345225261},{"_id":"themes/material/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1692345225262},{"_id":"themes/material/README.md","hash":"cc7b80f6bce7b910a7ba641abac1ade1311705f8","modified":1692345225262},{"_id":"themes/material/_config.template.yml","hash":"863d199b1f39a6878dd9507170eb3d497b59d235","modified":1692345225262},{"_id":"themes/material/_config.yml","hash":"e28c70050736f7c43d0806f89ce1414a0cfba53b","modified":1692345225263},{"_id":"themes/material/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1692345225263},{"_id":"themes/material/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1692345225299},{"_id":"themes/material/package.json","hash":"a1034f722e448cc34dc18e9bf315ec086d1a9e60","modified":1692345225299},{"_id":"source/_posts/angular4学习笔记整理（一）.md","hash":"b77c2de3deca7be29fcb397b1f61dc0e582cd6bb","modified":1692345225256},{"_id":"source/_posts/angular4学习笔记整理（三）angular4的服务.md","hash":"9c63bfd1f0954fed48e334bd64efba4bb5118bc7","modified":1692345225257},{"_id":"source/_posts/angular4学习笔记整理（二）angular4的路由使用.md","hash":"d7a524acc467bbe44b38d659f82f4f79cdce5bf5","modified":1692345225257},{"_id":"source/_posts/angular4学习笔记整理（四）组件间通讯、管道.md","hash":"1502b29726921db82dda6af1f21c7043387aab9b","modified":1692345225258},{"_id":"source/_posts/ionic-webview-in-native-android.md","hash":"8e1d4a5005dad010eee6cbaf8e5385740fd22e07","modified":1692345225259},{"_id":"source/_posts/ionic3-热更新android篇.md","hash":"022b2fcf3b7f2ac4fc41a828bd26195a85ba2822","modified":1692345225259},{"_id":"source/_posts/ionic篇学习笔记-部署项目编.md","hash":"6ad4ecfef4f0d6cf32be5c5857f0c9820baeafc7","modified":1692345225259},{"_id":"source/_posts/有用的css知识收集.md","hash":"0d95f1c3fe76e940af3f24eee20b870847f77fe0","modified":1692345225260},{"_id":"source/_posts/记一次hexo-博客上线-经验总结.md","hash":"99231e1046cad15d0b212db2c2e359847ddcc551","modified":1692345225260},{"_id":"themes/material/languages/ar.yml","hash":"b8ffe10584fe49ed0218e57b27140b134e3022f8","modified":1692345225264},{"_id":"themes/material/languages/de.yml","hash":"bce37d066ffa82f3e249d41d0ee883c913cc2c5f","modified":1692345225265},{"_id":"themes/material/languages/en.yml","hash":"2d538f5b71b2837b75bdcb686f1431a48dcb6eda","modified":1692345225265},{"_id":"themes/material/languages/es.yml","hash":"aaf23ea448489ec01f7c6228e3bf4833e062ec34","modified":1692345225265},{"_id":"themes/material/languages/fr.yml","hash":"66a966e8a9a60bfe00829b20c1f5e26cd6390f73","modified":1692345225266},{"_id":"themes/material/languages/ja.yml","hash":"af5466576ce9f6cac8529feb57ac8ba5401a318f","modified":1692345225266},{"_id":"themes/material/languages/ms.yml","hash":"237a39bbfcce33e7b918f6c5dc0f01bc79900262","modified":1692345225266},{"_id":"themes/material/languages/pt-BR.yml","hash":"a070c2c4d0d3d54f8ca70513cff73c3f7c306db1","modified":1692345225267},{"_id":"themes/material/languages/zh-CN.yml","hash":"563671897a5d4d04ddc2f4b8a45e8f2c366a77b9","modified":1692345225267},{"_id":"themes/material/languages/zh-TW.yml","hash":"516b74e942f849e716098d111c7c3a9f4847cb0a","modified":1692345225267},{"_id":"themes/material/layout/index.ejs","hash":"aca1abb741f891776913c8ea2e6ff626a0ea5736","modified":1692345225298},{"_id":"themes/material/layout/layout.ejs","hash":"94f66850b815a262c0f8ff112a32a0a6f43066e3","modified":1692345225299},{"_id":"themes/material/layout/post.ejs","hash":"17bf2e8e65b2d1bdfc85857a25755add8a875b16","modified":1692345225299},{"_id":"themes/material/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1692345225300},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1692345225268},{"_id":"themes/material/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1692345225300},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"e4780fe3bbb049db38d694fc18dee13d799bd51d","modified":1692345225293},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"211dc183b8e84f71b2c25b3ac6659d162d81662b","modified":1692345225294},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"843818bffeaebe5e3fa07c90d260bb912555cb3b","modified":1692345225295},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1692345225294},{"_id":"themes/material/layout/_widget/nprogress.ejs","hash":"52fcfe5b70c25378e48bb67daf85d952b32d34b2","modified":1692345225296},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"f03bc95a0c9b4905413b8fdfefc1af463b51e828","modified":1692345225296},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"ed636c70c24a9265f386102d8735dead797d94c2","modified":1692345225296},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"e71de74e4067cc4e6aef1e09ac429c92bcd178b3","modified":1692345225297},{"_id":"themes/material/layout/_widget/page-timeline.ejs","hash":"9fa0195e08d9fd40aa0333e9279c98bc65acf604","modified":1692345225297},{"_id":"themes/material/layout/_widget/qrcode.ejs","hash":"ab544bc337a48bdd30f9cb146db6a287bb36a10f","modified":1692345225297},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"146bfb6952f17c0afbd26ac16a15c4d0d73c83d9","modified":1692345225298},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"7ad1e843e620ccd9b3c041dccfdcee97921247a1","modified":1692345225298},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"45eb5dc723d36e32553038422061cba6828957a1","modified":1692345225268},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"9c6e728a736eaba7edbcaf6862e5dcef8edd2a9e","modified":1692345225269},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"e847e2c2b6787c4ed93cf95154ea5f4ff2ecd520","modified":1692345225269},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"ae949e16cbd20d895ba3c0b64f3992bf28d81e06","modified":1692345225269},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"36d3798224bf7dff7c0659876c5ad8a4785198e2","modified":1692345225270},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"2038b60d67666b56699444458e34843a1289fab5","modified":1692345225270},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"56f9dcacaa9fbfdec949a2498cc04d509467771c","modified":1692345225271},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1692345225273},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"9956cc20b84b67334dcc80a5d4396f9064d4a804","modified":1692345225273},{"_id":"themes/material/layout/_partial/config_font.ejs","hash":"f564ba4b36363882154870558091383887fffdf8","modified":1692345225273},{"_id":"themes/material/layout/_partial/config_footer.ejs","hash":"bd520f4e8a381494c78e3c00905c80a9cd807f97","modified":1692345225274},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"22f377c0ba70d930a66dfcc775f216a560746996","modified":1692345225278},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"c17e2da7d6cb0e4104fc64a541f4c81f4abed095","modified":1692345225279},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"be20394eaeaf2d20db28946b948962c839da6ea9","modified":1692345225279},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"75ecc32a258857424c48a2ebb0b5b9f3b30614a5","modified":1692345225279},{"_id":"themes/material/layout/_partial/head.ejs","hash":"16a4bc65e631f5d21e7fd204f457adc86ea2af26","modified":1692345225280},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"88c604ae4f70ccf24289bc967f18ada697013304","modified":1692345225280},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"9eaace4feb951c96c0033e7271497f3f300d2476","modified":1692345225279},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1692345225280},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"b8ec76716bfa2e6513b4df6814fe8676536a94c1","modified":1692345225281},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"02374b20989c81031e29257d872624d5195ddcbd","modified":1692345225281},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"e5c1271b94d66597812cdf88057c8690bfe72d55","modified":1692345225281},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"b6e5af993245a2e3caa6eb66009503ec52c82f5b","modified":1692345225282},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"7b291719414408a9ec0b9167a2c6c834f90905b3","modified":1692345225282},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1692345225282},{"_id":"themes/material/layout/_partial/sidebar-footer_image.ejs","hash":"44aba38692abc609f28b55bff81362a1c03ce36c","modified":1692345225283},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"d18344f05712f66e0385839e4d83d5a3a515c140","modified":1692345225283},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"ff44901fdfdd952174b0d22e86df7163d7fba9ba","modified":1692345225283},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1692345225284},{"_id":"themes/material/layout/_partial/structured-data.ejs","hash":"f3ed6673a774cd5a27c94dfe174e8f7344f4ebbe","modified":1692345225285},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"1c0773c3b2cf33aad0e0373540e11540e5137c75","modified":1692345225285},{"_id":"themes/material/scripts/lib/css_lsload.js","hash":"c52bbfe62863cd141925747b2575a6a6858444d1","modified":1692345225300},{"_id":"themes/material/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1692345225301},{"_id":"themes/material/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1692345225301},{"_id":"themes/material/scripts/lib/js_lsload.js","hash":"c604f337d219bccf3f315e984cf12a6658dbd7a2","modified":1692345225301},{"_id":"themes/material/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1692345225301},{"_id":"themes/material/source/css/disqus-proxy.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1692345225303},{"_id":"themes/material/source/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1692345225303},{"_id":"themes/material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1692345225303},{"_id":"themes/material/source/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1692345225304},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1692345225305},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1692345225304},{"_id":"themes/material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1692345225306},{"_id":"themes/material/source/css/style.css","hash":"52a827e62695ed758b5e5102e63f78a532c0311c","modified":1692345225313},{"_id":"themes/material/source/css/style.min.css","hash":"2e9f8420f0047e7639df4be5619bf279b4ecb94f","modified":1692345225314},{"_id":"themes/material/source/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1692345225314},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1692345225324},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1692345225325},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1692345225416},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1692345225417},{"_id":"themes/material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1692345225446},{"_id":"themes/material/source/js/lsloader.js","hash":"890f196c276aded83e40a60c516e4408d42a3c7d","modified":1692345225447},{"_id":"themes/material/source/js/lsloader.min.js","hash":"089ffda1dbc3ec5e5168331121ce6daaa241c132","modified":1692345225454},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1692345225458},{"_id":"themes/material/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1692345225459},{"_id":"themes/material/source/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1692345225459},{"_id":"themes/material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1692345225459},{"_id":"themes/material/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1692345225382},{"_id":"themes/material/source/js/mathjax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1692345225458},{"_id":"themes/material/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1692345225383},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1692345225383},{"_id":"themes/material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1692345225384},{"_id":"themes/material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1692345225387},{"_id":"themes/material/source/img/preview.png","hash":"b0441538670e2315cf9a721de2af33fc88db2d7a","modified":1692345225388},{"_id":"themes/material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1692345225410},{"_id":"themes/material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1692345225415},{"_id":"themes/material/source/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1692345225312},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1692345225323},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1692345225381},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1692345225382},{"_id":"themes/material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1692345225418},{"_id":"themes/material/source/js/js.min.js","hash":"2d0e6569a2bb608bfd37f395945ac449d3924d84","modified":1692345225446},{"_id":"themes/material/source/js/js.js","hash":"c6be581aa8f7efea5392a7140bb081687b1d6884","modified":1692345225419},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1692345225384},{"_id":"themes/material/source/img/user.jpeg","hash":"12e07998217d4f71924b82606bbed8b5c6b5b043","modified":1692345225415},{"_id":"themes/material/layout/_widget/analytics/baidu-analytics.ejs","hash":"c24af97754140f221d20323a3e5aac9dd02889d4","modified":1692345225286},{"_id":"themes/material/layout/_widget/analytics/cnzz-analytics.ejs","hash":"61a891acb13e71289f360c91cb27fb88f81848ec","modified":1692345225286},{"_id":"themes/material/layout/_widget/analytics/google-analytics.ejs","hash":"8bff3b1bd066eef693319b82400c353b2d6736e7","modified":1692345225286},{"_id":"themes/material/source/css/material.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1692345225307},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1692345225317},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1692345225319},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1692345225374},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1692345225381},{"_id":"themes/material/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1692345225416},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1692345225385},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1692345225385},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1692345225385},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1692345225385},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1692345225385},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1692345225386},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1692345225386},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1692345225386},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1692345225386},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1692345225386},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1692345225386},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1692345225387},{"_id":"themes/material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1692345225387},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1692345225387},{"_id":"themes/material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1692345225390},{"_id":"themes/material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1692345225391},{"_id":"themes/material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1692345225397},{"_id":"themes/material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1692345225398},{"_id":"themes/material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1692345225400},{"_id":"themes/material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1692345225402},{"_id":"themes/material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1692345225403},{"_id":"themes/material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1692345225408},{"_id":"themes/material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1692345225409},{"_id":"themes/material/source/img/tec/angular.svg","hash":"0b3394341548880427c38ed78beb990863a4e8cb","modified":1692345225411},{"_id":"themes/material/source/img/tec/cordova.png","hash":"7e8122a6765451ceffa5542a5ce5be3e864c040f","modified":1692345225411},{"_id":"themes/material/source/img/tec/css3.png","hash":"bd3bfbfc2bd3029ec5a991c060141829c375ae72","modified":1692345225412},{"_id":"themes/material/source/img/tec/html5.png","hash":"3e5750b5663132e33bb039a501993fcaddcf5f3f","modified":1692345225412},{"_id":"themes/material/source/img/tec/ionic.png","hash":"1c89bcf1964060679bada33b822d727549c9bdd9","modified":1692345225413},{"_id":"themes/material/source/img/tec/js.png","hash":"c724282fc9cf3b67472eb2f5f99895b58cd3702a","modified":1692345225413},{"_id":"themes/material/source/img/tec/vue.png","hash":"555257b8c5e7ecf34ce4f9b952eeaf006adfa339","modified":1692345225414},{"_id":"themes/material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1692345225389},{"_id":"themes/material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1692345225390},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1692345225392},{"_id":"themes/material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1692345225393},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1692345225394},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1692345225395},{"_id":"themes/material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1692345225397},{"_id":"themes/material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1692345225399},{"_id":"themes/material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1692345225403},{"_id":"themes/material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1692345225407},{"_id":"themes/material/layout/_widget/comment/changyan/common.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1692345225289},{"_id":"themes/material/layout/_widget/comment/changyan/enter.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1692345225289},{"_id":"themes/material/layout/_widget/comment/changyan/main.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1692345225289},{"_id":"themes/material/layout/_widget/comment/163gentie/common.ejs","hash":"ac56d01746ef2f72d54bff4b61e0ca0089c5c164","modified":1692345225287},{"_id":"themes/material/layout/_widget/comment/163gentie/enter.ejs","hash":"6e057829fa926cc02e3e2ebfdee7c244a9b31dd7","modified":1692345225287},{"_id":"themes/material/layout/_widget/comment/163gentie/main.ejs","hash":"e84afb44929f4dab8cf279b958d472955bc5f034","modified":1692345225288},{"_id":"themes/material/layout/_widget/comment/disqus/common.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1692345225290},{"_id":"themes/material/layout/_widget/comment/disqus/enter.ejs","hash":"39192034766349e47967da63184f9104fdded2ab","modified":1692345225291},{"_id":"themes/material/layout/_widget/comment/disqus/main.ejs","hash":"21e0eeff664191b818d7a0071ae7edcdfc270442","modified":1692345225291},{"_id":"themes/material/layout/_widget/comment/disqus_click/common.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1692345225292},{"_id":"themes/material/layout/_widget/comment/disqus_click/enter.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1692345225292},{"_id":"themes/material/layout/_widget/comment/disqus_click/main.ejs","hash":"fa89d225dafa4a6b0f6be6fe395ada0be172c4ae","modified":1692345225293},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1692345225378},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1692345225334},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1692345225343},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1692345225351},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1692345225358},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1692345225364},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1692345225371},{"_id":"public/search.xml","hash":"633e4b2c915f5f1fbaecde5bababe82d7e0691cd","modified":1692346178642},{"_id":"public/2018/11/25/ionic-webview-in-native-android/index.html","hash":"9244e022f4d32471909c461313881ec5f5d22e5f","modified":1692346179123},{"_id":"public/2018/12/03/记一次hexo-博客上线-经验总结/index.html","hash":"51d020d2b24f41014bd4b8263242afaaaa71966e","modified":1692346179123},{"_id":"public/2018/03/18/ionic篇学习笔记-部署项目编/index.html","hash":"27c5aef4367e75d30f0cbb58a4f10bd447e26f31","modified":1692346179124},{"_id":"public/2018/01/12/angular4学习笔记整理（三）angular4的服务/index.html","hash":"69b981674a6bcfbb418e4fe06f0867427fd0c15c","modified":1692346179124},{"_id":"public/2018/03/18/ionic3-热更新android篇/index.html","hash":"b85ecc6cb2257cbe75c5a6812dbe6caf0d2af7ec","modified":1692346179124},{"_id":"public/2018/01/12/angular4学习笔记整理（二）angular4的路由使用/index.html","hash":"2b7c4e4597d06912bd2db74aaea8468260de2493","modified":1692346179124},{"_id":"public/2018/01/12/angular4学习笔记整理（四）组件间通讯、管道/index.html","hash":"2b0e916c55fb37814330835e05abff06b6b85710","modified":1692346179124},{"_id":"public/2018/01/12/angular4学习笔记整理（一）/index.html","hash":"fc8c570758df91c08f7e49059614e6539f1e06a1","modified":1692346179124},{"_id":"public/2017/12/07/有用的css知识收集/index.html","hash":"18bcf4faa456af93615e3bd0a83f2d5ce66a864f","modified":1692346179124},{"_id":"public/archives/index.html","hash":"3daf1157ae150c466b145daff4c2a0c0cd78f09e","modified":1692346179124},{"_id":"public/archives/2017/12/index.html","hash":"25baf8cd35e7f428abf6ab5e8d1b572da938eb41","modified":1692346179124},{"_id":"public/archives/2017/index.html","hash":"99464f2c5723ee4cae610122a2fc7e80df502771","modified":1692346179124},{"_id":"public/archives/2018/index.html","hash":"8ae5daf98769245fd7565040b92e5b0d624a1eb2","modified":1692346179124},{"_id":"public/archives/2018/01/index.html","hash":"3302cb16ffc53da33bef15bdedf03007f4a36ab8","modified":1692346179124},{"_id":"public/archives/2018/03/index.html","hash":"858c60a49806c4712731357c5739b83b8d3845a3","modified":1692346179124},{"_id":"public/archives/2018/11/index.html","hash":"8e8855f0ca0bdf49e430b01d9b902d087ea7c196","modified":1692346179124},{"_id":"public/archives/2018/12/index.html","hash":"11fcfca66585b53b6eb87fda9210734a4ad7aa06","modified":1692346179124},{"_id":"public/categories/angular/index.html","hash":"3ac2bc709e9f80723c04402214af1116e4c19fa2","modified":1692346179124},{"_id":"public/categories/ionic/index.html","hash":"c881ef3e4883d3be6efb6c767afa39e4e4c295a7","modified":1692346179124},{"_id":"public/categories/css/index.html","hash":"2d7255c34a043d0415dff150896ee74a209bb0a3","modified":1692346179124},{"_id":"public/categories/hexo/index.html","hash":"19f8345d342f11f2f048aad517a29a939abc9568","modified":1692346179124},{"_id":"public/tags/service/index.html","hash":"9bffa78455e6fa68a3bba9422c900c4d58b99da1","modified":1692346179124},{"_id":"public/tags/router/index.html","hash":"985a6ca640ed1812e6ac6e8d8d8465f181b5f287","modified":1692346179124},{"_id":"public/tags/webview/index.html","hash":"48d88284bcf664a7c24ee6d7f35c142116dc3903","modified":1692346179124},{"_id":"public/index.html","hash":"f8ef3fa37d9138831030276577c7cfc3af75bf74","modified":1692346179124},{"_id":"public/tags/pipe/index.html","hash":"e13688ad8de77ff602168b5599aee1d036cae0c0","modified":1692346179125},{"_id":"public/tags/emit/index.html","hash":"1d2b21f9421104f28a78ced216ac16e646daeea9","modified":1692346179125},{"_id":"public/tags/hot-codePush/index.html","hash":"65ea4e4fea11d0d543ea80cb095ea5f0715dfc83","modified":1692346179125},{"_id":"public/tags/部署/index.html","hash":"98c07a4766a33ec844c8294b9d03843bf4efd1f3","modified":1692346179125},{"_id":"public/tags/pm2/index.html","hash":"81655795adc2f18c562a745ef73e912dcdafce27","modified":1692346179125},{"_id":"public/tags/nginx/index.html","hash":"61504672bf25b533d51e00c9d1beb1a65dbc209b","modified":1692346179125},{"_id":"public/tags/hexo/index.html","hash":"ef38dc0f1f2739a783081aee633c67551b38b197","modified":1692346179125},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1692346179136},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1692346179136},{"_id":"public/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1692346179136},{"_id":"public/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1692346179136},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1692346179136},{"_id":"public/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1692346179136},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1692346179136},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1692346179136},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1692346179136},{"_id":"public/img/preview.png","hash":"b0441538670e2315cf9a721de2af33fc88db2d7a","modified":1692346179136},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1692346179136},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1692346179136},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1692346179136},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1692346179136},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1692346179136},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1692346179136},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1692346179136},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1692346179136},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1692346179136},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1692346179136},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1692346179137},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1692346179137},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1692346179137},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1692346179137},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1692346179137},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1692346179137},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1692346179137},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1692346179137},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1692346179137},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1692346179137},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1692346179137},{"_id":"public/img/tec/angular.svg","hash":"0b3394341548880427c38ed78beb990863a4e8cb","modified":1692346179137},{"_id":"public/img/tec/cordova.png","hash":"7e8122a6765451ceffa5542a5ce5be3e864c040f","modified":1692346179137},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1692346179137},{"_id":"public/img/tec/css3.png","hash":"bd3bfbfc2bd3029ec5a991c060141829c375ae72","modified":1692346179137},{"_id":"public/img/tec/html5.png","hash":"3e5750b5663132e33bb039a501993fcaddcf5f3f","modified":1692346179137},{"_id":"public/img/tec/js.png","hash":"c724282fc9cf3b67472eb2f5f99895b58cd3702a","modified":1692346179137},{"_id":"public/img/tec/ionic.png","hash":"1c89bcf1964060679bada33b822d727549c9bdd9","modified":1692346179137},{"_id":"public/img/tec/vue.png","hash":"555257b8c5e7ecf34ce4f9b952eeaf006adfa339","modified":1692346179137},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1692346179137},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1692346179143},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1692346179145},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1692346179146},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1692346179146},{"_id":"public/img/user.jpeg","hash":"12e07998217d4f71924b82606bbed8b5c6b5b043","modified":1692346179146},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1692346179146},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1692346179146},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1692346179146},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1692346179146},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1692346179146},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1692346179147},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1692346179147},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1692346179147},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1692346179147},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1692346179147},{"_id":"public/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1692346179154},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1692346179154},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1692346179154},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1692346179154},{"_id":"public/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1692346179154},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1692346179154},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1692346179154},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1692346179154},{"_id":"public/js/lsloader.js","hash":"890f196c276aded83e40a60c516e4408d42a3c7d","modified":1692346179154},{"_id":"public/js/lsloader.min.js","hash":"089ffda1dbc3ec5e5168331121ce6daaa241c132","modified":1692346179154},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1692346179154},{"_id":"public/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1692346179154},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1692346179154},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1692346179154},{"_id":"public/css/disqus-proxy.css","hash":"d5086cda8aaae20b8d3f9dd50f0be5ccb717e42a","modified":1692346179154},{"_id":"public/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1692346179154},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1692346179154},{"_id":"public/css/style.css","hash":"52a827e62695ed758b5e5102e63f78a532c0311c","modified":1692346179154},{"_id":"public/css/style.min.css","hash":"2e9f8420f0047e7639df4be5619bf279b4ecb94f","modified":1692346179154},{"_id":"public/js/mathjax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1692346179155},{"_id":"public/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1692346179155},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1692346179155},{"_id":"public/js/js.min.js","hash":"2d0e6569a2bb608bfd37f395945ac449d3924d84","modified":1692346179155},{"_id":"public/js/js.js","hash":"c6be581aa8f7efea5392a7140bb081687b1d6884","modified":1692346179155},{"_id":"public/css/material.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1692346179155},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1692346179155},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1692346179155},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1692346179155},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1692346179155},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1692346179155},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1692346179167},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1692346179178},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1692346179178},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1692346179178},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1692346179178},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1692346179178},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1692346179178}],"Category":[{"name":"angular","_id":"cllgb7w4r00021twbl9v0bj4p"},{"name":"ionic","_id":"cllgb7w54000d1twb98kb4iyd"},{"name":"css","_id":"cllgb7w5c000o1twbrjgfkk0l"},{"name":"hexo","_id":"cllgb7w5g000v1twbau6d2n6s"}],"Data":[],"Page":[],"Post":[{"title":"angular4学习笔记整理（三）angular4的服务","date":"2018-01-12T13:35:00.000Z","_content":"## 依赖注入基本步骤\n1. 生成service\n```\nexport class ProductService {\nconstructor() { }\ngetProduct(): Product {\nreturn new Product(1, 'iphone', 5899, 'hahah');\n}\n}\n```\n2. app.module.ts或者 某组件的配置里加上 提供器\n```\n@NgModule({\ndeclarations: [\nAppComponent,\nProduct1Component,\nProduct2Component\n],\nimports: [\nBrowserModule\n],\nproviders: [ProductService],\nbootstrap: [AppComponent]\n})\n```\n在module里配置的providers会对所有组件生效\n但如果在组件的ts里面配置，则组件里配置的优先生效如：\n```\n@Component({\nselector: 'app-product2',\ntemplateUrl: './product2.component.html',\nstyleUrls: ['./product2.component.css'],\nproviders: [{provide: ProductService , useClass: AnotherProductService}]\n})\n```\n并且可以根据\n```\nproviders: [{provide: ProductService , useClass: AnotherProductService}]\n```\n来指定不同的服务，虽然不同class，但在组件生成的东西还是一样的\n\n3. 在组件里面注入服务如\n```\nconstructor(private productService: ProductService) { }\n```\n\n另外\n服务之间也能相互注入靠@Injectable()\n服务之间也可以注入，步骤一样，注册提供\n\n还有这个\n工厂和值申明提供器,高级玩法，我就学过没用过，提醒一下自己\n```\nproviders: [\n// ProductService,\n{\nprovide: ProductService ,\nuseFactory: (logger: LoggerService, isDev) => {   //依赖注入服务工厂方法，实例化不同的productService\n// let logger = new LoggerService();\nif (isDev) {\nreturn new ProductService(logger);\n}else{\nreturn new AnotherProductService(logger);\n}\n},\ndeps: [ LoggerService , \"IS_DEV_ENV\"]     //工厂方法也可以注入服务或者值，前一个是login服务 ，后一个是 变量注入（可以使对象）\n},\n{provide : \"IS_DEV_ENV\" , useValue : false },  //声明的值服务\nLoggerService\n],\n```\n","source":"_posts/angular4学习笔记整理（三）angular4的服务.md","raw":"---\ntitle: angular4学习笔记整理（三）angular4的服务\ndate: 2018-01-12 21:35:00\ncategories:\n- angular\ntags:\n- service\n---\n## 依赖注入基本步骤\n1. 生成service\n```\nexport class ProductService {\nconstructor() { }\ngetProduct(): Product {\nreturn new Product(1, 'iphone', 5899, 'hahah');\n}\n}\n```\n2. app.module.ts或者 某组件的配置里加上 提供器\n```\n@NgModule({\ndeclarations: [\nAppComponent,\nProduct1Component,\nProduct2Component\n],\nimports: [\nBrowserModule\n],\nproviders: [ProductService],\nbootstrap: [AppComponent]\n})\n```\n在module里配置的providers会对所有组件生效\n但如果在组件的ts里面配置，则组件里配置的优先生效如：\n```\n@Component({\nselector: 'app-product2',\ntemplateUrl: './product2.component.html',\nstyleUrls: ['./product2.component.css'],\nproviders: [{provide: ProductService , useClass: AnotherProductService}]\n})\n```\n并且可以根据\n```\nproviders: [{provide: ProductService , useClass: AnotherProductService}]\n```\n来指定不同的服务，虽然不同class，但在组件生成的东西还是一样的\n\n3. 在组件里面注入服务如\n```\nconstructor(private productService: ProductService) { }\n```\n\n另外\n服务之间也能相互注入靠@Injectable()\n服务之间也可以注入，步骤一样，注册提供\n\n还有这个\n工厂和值申明提供器,高级玩法，我就学过没用过，提醒一下自己\n```\nproviders: [\n// ProductService,\n{\nprovide: ProductService ,\nuseFactory: (logger: LoggerService, isDev) => {   //依赖注入服务工厂方法，实例化不同的productService\n// let logger = new LoggerService();\nif (isDev) {\nreturn new ProductService(logger);\n}else{\nreturn new AnotherProductService(logger);\n}\n},\ndeps: [ LoggerService , \"IS_DEV_ENV\"]     //工厂方法也可以注入服务或者值，前一个是login服务 ，后一个是 变量注入（可以使对象）\n},\n{provide : \"IS_DEV_ENV\" , useValue : false },  //声明的值服务\nLoggerService\n],\n```\n","slug":"angular4学习笔记整理（三）angular4的服务","published":1,"updated":"2023-08-18T07:53:45.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllgb7w4j00001twbbxk39hls","content":"<h2 id=\"依赖注入基本步骤\"><a href=\"#依赖注入基本步骤\" class=\"headerlink\" title=\"依赖注入基本步骤\"></a>依赖注入基本步骤</h2><ol>\n<li><p>生成service</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export class ProductService &#123;</span><br><span class=\"line\">constructor() &#123; &#125;</span><br><span class=\"line\">getProduct(): Product &#123;</span><br><span class=\"line\">return new Product(1, &apos;iphone&apos;, 5899, &apos;hahah&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>app.module.ts或者 某组件的配置里加上 提供器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">declarations: [</span><br><span class=\"line\">AppComponent,</span><br><span class=\"line\">Product1Component,</span><br><span class=\"line\">Product2Component</span><br><span class=\"line\">],</span><br><span class=\"line\">imports: [</span><br><span class=\"line\">BrowserModule</span><br><span class=\"line\">],</span><br><span class=\"line\">providers: [ProductService],</span><br><span class=\"line\">bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在module里配置的providers会对所有组件生效<br>但如果在组件的ts里面配置，则组件里配置的优先生效如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">selector: &apos;app-product2&apos;,</span><br><span class=\"line\">templateUrl: &apos;./product2.component.html&apos;,</span><br><span class=\"line\">styleUrls: [&apos;./product2.component.css&apos;],</span><br><span class=\"line\">providers: [&#123;provide: ProductService , useClass: AnotherProductService&#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>并且可以根据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">providers: [&#123;provide: ProductService , useClass: AnotherProductService&#125;]</span><br></pre></td></tr></table></figure></p>\n<p>来指定不同的服务，虽然不同class，但在组件生成的东西还是一样的</p>\n<ol>\n<li>在组件里面注入服务如<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor(private productService: ProductService) &#123; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>另外<br>服务之间也能相互注入靠@Injectable()<br>服务之间也可以注入，步骤一样，注册提供</p>\n<p>还有这个<br>工厂和值申明提供器,高级玩法，我就学过没用过，提醒一下自己<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">providers: [</span><br><span class=\"line\">// ProductService,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">provide: ProductService ,</span><br><span class=\"line\">useFactory: (logger: LoggerService, isDev) =&gt; &#123;   //依赖注入服务工厂方法，实例化不同的productService</span><br><span class=\"line\">// let logger = new LoggerService();</span><br><span class=\"line\">if (isDev) &#123;</span><br><span class=\"line\">return new ProductService(logger);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">return new AnotherProductService(logger);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">deps: [ LoggerService , &quot;IS_DEV_ENV&quot;]     //工厂方法也可以注入服务或者值，前一个是login服务 ，后一个是 变量注入（可以使对象）</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;provide : &quot;IS_DEV_ENV&quot; , useValue : false &#125;,  //声明的值服务</span><br><span class=\"line\">LoggerService</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"依赖注入基本步骤\"><a href=\"#依赖注入基本步骤\" class=\"headerlink\" title=\"依赖注入基本步骤\"></a>依赖注入基本步骤</h2><ol>\n<li><p>生成service</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export class ProductService &#123;</span><br><span class=\"line\">constructor() &#123; &#125;</span><br><span class=\"line\">getProduct(): Product &#123;</span><br><span class=\"line\">return new Product(1, &apos;iphone&apos;, 5899, &apos;hahah&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>app.module.ts或者 某组件的配置里加上 提供器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">declarations: [</span><br><span class=\"line\">AppComponent,</span><br><span class=\"line\">Product1Component,</span><br><span class=\"line\">Product2Component</span><br><span class=\"line\">],</span><br><span class=\"line\">imports: [</span><br><span class=\"line\">BrowserModule</span><br><span class=\"line\">],</span><br><span class=\"line\">providers: [ProductService],</span><br><span class=\"line\">bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在module里配置的providers会对所有组件生效<br>但如果在组件的ts里面配置，则组件里配置的优先生效如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">selector: &apos;app-product2&apos;,</span><br><span class=\"line\">templateUrl: &apos;./product2.component.html&apos;,</span><br><span class=\"line\">styleUrls: [&apos;./product2.component.css&apos;],</span><br><span class=\"line\">providers: [&#123;provide: ProductService , useClass: AnotherProductService&#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>并且可以根据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">providers: [&#123;provide: ProductService , useClass: AnotherProductService&#125;]</span><br></pre></td></tr></table></figure></p>\n<p>来指定不同的服务，虽然不同class，但在组件生成的东西还是一样的</p>\n<ol>\n<li>在组件里面注入服务如<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor(private productService: ProductService) &#123; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>另外<br>服务之间也能相互注入靠@Injectable()<br>服务之间也可以注入，步骤一样，注册提供</p>\n<p>还有这个<br>工厂和值申明提供器,高级玩法，我就学过没用过，提醒一下自己<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">providers: [</span><br><span class=\"line\">// ProductService,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">provide: ProductService ,</span><br><span class=\"line\">useFactory: (logger: LoggerService, isDev) =&gt; &#123;   //依赖注入服务工厂方法，实例化不同的productService</span><br><span class=\"line\">// let logger = new LoggerService();</span><br><span class=\"line\">if (isDev) &#123;</span><br><span class=\"line\">return new ProductService(logger);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">return new AnotherProductService(logger);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">deps: [ LoggerService , &quot;IS_DEV_ENV&quot;]     //工厂方法也可以注入服务或者值，前一个是login服务 ，后一个是 变量注入（可以使对象）</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;provide : &quot;IS_DEV_ENV&quot; , useValue : false &#125;,  //声明的值服务</span><br><span class=\"line\">LoggerService</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure></p>\n"},{"title":"angular4学习笔记整理（二）angular4的路由使用","date":"2018-01-12T13:35:00.000Z","_content":"这章说一下angular的路由，我也就紧急学了下，实际上在ionic里都没用到这方面的知识，ionic把路由都封好了\n先说angular路由怎么引入，一开始new出来的angular项目它路由帮你配好了，但看要看app.module.ts里面\n1. 首先最上面要引入路由模块\n```\nimport {RouterModule, Routes} from '@angular/router';\n```\n2. 然后在ngModule里面加点东西\n![Screenshot 2018-01-12_19-41-32.png](http://upload-images.jianshu.io/upload_images/6114493-aeb2f9d6fdf7cc80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n3. 这个routeConfig需要自己定义，类型Routes，里面就是angular路由配置\n\n```\nconst routeConfig: Routes = [\n{path: '' , component : HomeComponent},\n]\n```\n当然路由配置也是可以抽出来的\n\n#### 路由配置简单介绍\n1. 常用跳转\n\n```\nconst routeConfig: Routes = [\n{path: '' , component : HomeComponent}, //path为''首页即是\n{path: 'chat',component: ChatComponent,},//访问首页地址+/chat    即能访问到chat组件\n{path: 'au/:id',component: AuComponent},//路由param传参\n{path: '**',component: Code404Component} //不能匹配的路由由 ** 匹配\n]\n```\n\n其中第三个路由传参的接收方组件想要拿到参数就需要多加点\na. 首先引入 \n\n```\nimport {ActivatedRoute, Params} from '@angular/router';\n```\n\nb. 并在constructor里注入这个路由服务\n\n```\nconstructor(private routeInfo: ActivatedRoute) { }\n```\nc. 获取param参数\n其中有2种方式获取param \n第一种是snapshot 参数快照\n\n```\nngOnInit() {\n//constructor创建时会只创建一次ngOnInit，所以this.routeInfo.snapshot.params['id']的值会不变\nthis.productId = this.routeInfo.snapshot.params['id'];\n}\n```\n\n但有一个问题\n如果已经请求 localhost:4200/au/6  后，再请求 localhost:4200/au/8 ，相当于同路由跳转只是参数不同，那么第二次拿到的param数字还是第一次的6\n原因\n>constructor创建时会只创建一次ngOnInit，所以this.routeInfo.snapshot.params['id']的值会不变\n\n所以更多的获取参数更推荐第二种参数订阅的方式\n\n```\nngOnInit() {\nthis.routeInfo.params.subscribe((params: Params) => this.productId = params.id);\n}\n```\n怎么跳参数都是对的用第二种\n\n#### 子路由\n只是一层路由明显满足不了开发需求，可以再配置子路由\n```\n{\npath: 'product',\ncomponent: ProductComponent,\nchildren: [\n{\npath: 'childA', component: ChildAComponent\n},\n{\npath: 'childB', component: ChildBComponent\n}\n]\n}\n```\n\n但是子路由光这样还是不行·\n在父组件html里加跳到子路由的按钮时\n\n```\n<a [routerLink]=\"['./childA']\" >销售员A</a>\n<a [routerLink]=\"['./childB']\" >销售员B</a>\n```\n\n**注意这里不能加/ 因为斜杠指向根路径，  ./才指向相对路径**\n\n\n#### 重定向路由\n使用 redirectTo\n\n```\nconst routes: Routes = [{\npath: '',\nredirectTo: 'home/6',\npathMatch: 'full' \n}]\n```\n\n#### 辅助路由\n就是一个插座,辅助路由通过不同的outlet配置，让页面的router-outlet标签，显示不同内容\n路由配置\n\n```\nconst routes: Routes = [{//辅助路由指向ChatComponent组件，插座名称aux\npath: 'chat',\ncomponent: ChatComponent,\noutlet: 'aux'\n}]\n```\n\n引用插座的html代码\n\n```\n<a [routerLink]=\"[{outlets:{primary:'home/2',aux:'chat'}}]\" ></a>\n<a [routerLink]=\"[{outlets:{aux:null}}]\" ></a><!--不引用辅助路由-->\n<router-outlet></router-outlet> <!--插件内容显示的地方-->\n```\n\n应该会有人问第一行的primary干嘛的\n**辅助路由的改变只会改变插座的内容，不影响主路由**\n比如原本路径是 \nhttp://localhost:4200/home/0\n现在如果[routerLink]=\"[{outlets:{aux:'chat'}}]\"的a标签被点击，改变的只是辅助路由，路径会变为\nhttp://localhost:4200/home/0(aux:chat)\n只有加上primary:'home/2'，主路由才会一起变，变成http://localhost:4200/home/2(aux:chat)\n同主路由间跳来跳去想把辅助路由干掉，用第二行即可\n####路由守卫\n只有用户已经登陆或者拥有某些权限才可进入的路由\n**canActive**\n1. 写一个守卫类，继承 CanActivate 接口\n\n```\nimport {CanActivate} from '@angular/router';\nexport class LoginGuard implements CanActivate {\ncanActivate() {\nlet loginedIn: boolean = Math.random() < 0.5;\nif (!loginedIn) {\nconsole.log('用户未登陆');\n}\nreturn loginedIn;\n}\n}\n```\n\n这是CanDeactivate 与canActivate不同的是它要离开某个组件就需要保护那个组件，建立也要注入那个组件\n\n```\nexport class UnsaveGuard implements CanDeactivate<ProductComponent>{\ncanDeactivate (component: ProductComponent) {\nreturn window.confirm('是否离开');\n}\n```\n\n这两个返回都应该是boolean型\n2. 在路由配置里加配置\n**canActivate 在路由配置时可以配置一个数组，angular会一次调用数组中的项，一旦某个返回false，则会终止登陆操作**\n\n```\n{\npath: 'product',\ncomponent: ProductComponent,\ncanActivate: [loginGuard],\ncanDeactivate: [UnsaveGuard]\n}\n```\n\n服务里加上该服务\n\n```\n@NgModule({\nimports: [RouterModule.forRoot(routes)],\nproviders: [LoginGuard, UnsaveGuard],\nexports: [RouterModule]\n})\n```\n路由守卫 非常重要 。再给个我网上找的参考文章\n[http://blog.csdn.net/qq451354/article/details/54017466](http://blog.csdn.net/qq451354/article/details/54017466)\n","source":"_posts/angular4学习笔记整理（二）angular4的路由使用.md","raw":"---\ntitle: angular4学习笔记整理（二）angular4的路由使用\ndate: 2018-01-12 21:35:00\ncategories:\n- angular\ntags:\n- router\n---\n这章说一下angular的路由，我也就紧急学了下，实际上在ionic里都没用到这方面的知识，ionic把路由都封好了\n先说angular路由怎么引入，一开始new出来的angular项目它路由帮你配好了，但看要看app.module.ts里面\n1. 首先最上面要引入路由模块\n```\nimport {RouterModule, Routes} from '@angular/router';\n```\n2. 然后在ngModule里面加点东西\n![Screenshot 2018-01-12_19-41-32.png](http://upload-images.jianshu.io/upload_images/6114493-aeb2f9d6fdf7cc80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n3. 这个routeConfig需要自己定义，类型Routes，里面就是angular路由配置\n\n```\nconst routeConfig: Routes = [\n{path: '' , component : HomeComponent},\n]\n```\n当然路由配置也是可以抽出来的\n\n#### 路由配置简单介绍\n1. 常用跳转\n\n```\nconst routeConfig: Routes = [\n{path: '' , component : HomeComponent}, //path为''首页即是\n{path: 'chat',component: ChatComponent,},//访问首页地址+/chat    即能访问到chat组件\n{path: 'au/:id',component: AuComponent},//路由param传参\n{path: '**',component: Code404Component} //不能匹配的路由由 ** 匹配\n]\n```\n\n其中第三个路由传参的接收方组件想要拿到参数就需要多加点\na. 首先引入 \n\n```\nimport {ActivatedRoute, Params} from '@angular/router';\n```\n\nb. 并在constructor里注入这个路由服务\n\n```\nconstructor(private routeInfo: ActivatedRoute) { }\n```\nc. 获取param参数\n其中有2种方式获取param \n第一种是snapshot 参数快照\n\n```\nngOnInit() {\n//constructor创建时会只创建一次ngOnInit，所以this.routeInfo.snapshot.params['id']的值会不变\nthis.productId = this.routeInfo.snapshot.params['id'];\n}\n```\n\n但有一个问题\n如果已经请求 localhost:4200/au/6  后，再请求 localhost:4200/au/8 ，相当于同路由跳转只是参数不同，那么第二次拿到的param数字还是第一次的6\n原因\n>constructor创建时会只创建一次ngOnInit，所以this.routeInfo.snapshot.params['id']的值会不变\n\n所以更多的获取参数更推荐第二种参数订阅的方式\n\n```\nngOnInit() {\nthis.routeInfo.params.subscribe((params: Params) => this.productId = params.id);\n}\n```\n怎么跳参数都是对的用第二种\n\n#### 子路由\n只是一层路由明显满足不了开发需求，可以再配置子路由\n```\n{\npath: 'product',\ncomponent: ProductComponent,\nchildren: [\n{\npath: 'childA', component: ChildAComponent\n},\n{\npath: 'childB', component: ChildBComponent\n}\n]\n}\n```\n\n但是子路由光这样还是不行·\n在父组件html里加跳到子路由的按钮时\n\n```\n<a [routerLink]=\"['./childA']\" >销售员A</a>\n<a [routerLink]=\"['./childB']\" >销售员B</a>\n```\n\n**注意这里不能加/ 因为斜杠指向根路径，  ./才指向相对路径**\n\n\n#### 重定向路由\n使用 redirectTo\n\n```\nconst routes: Routes = [{\npath: '',\nredirectTo: 'home/6',\npathMatch: 'full' \n}]\n```\n\n#### 辅助路由\n就是一个插座,辅助路由通过不同的outlet配置，让页面的router-outlet标签，显示不同内容\n路由配置\n\n```\nconst routes: Routes = [{//辅助路由指向ChatComponent组件，插座名称aux\npath: 'chat',\ncomponent: ChatComponent,\noutlet: 'aux'\n}]\n```\n\n引用插座的html代码\n\n```\n<a [routerLink]=\"[{outlets:{primary:'home/2',aux:'chat'}}]\" ></a>\n<a [routerLink]=\"[{outlets:{aux:null}}]\" ></a><!--不引用辅助路由-->\n<router-outlet></router-outlet> <!--插件内容显示的地方-->\n```\n\n应该会有人问第一行的primary干嘛的\n**辅助路由的改变只会改变插座的内容，不影响主路由**\n比如原本路径是 \nhttp://localhost:4200/home/0\n现在如果[routerLink]=\"[{outlets:{aux:'chat'}}]\"的a标签被点击，改变的只是辅助路由，路径会变为\nhttp://localhost:4200/home/0(aux:chat)\n只有加上primary:'home/2'，主路由才会一起变，变成http://localhost:4200/home/2(aux:chat)\n同主路由间跳来跳去想把辅助路由干掉，用第二行即可\n####路由守卫\n只有用户已经登陆或者拥有某些权限才可进入的路由\n**canActive**\n1. 写一个守卫类，继承 CanActivate 接口\n\n```\nimport {CanActivate} from '@angular/router';\nexport class LoginGuard implements CanActivate {\ncanActivate() {\nlet loginedIn: boolean = Math.random() < 0.5;\nif (!loginedIn) {\nconsole.log('用户未登陆');\n}\nreturn loginedIn;\n}\n}\n```\n\n这是CanDeactivate 与canActivate不同的是它要离开某个组件就需要保护那个组件，建立也要注入那个组件\n\n```\nexport class UnsaveGuard implements CanDeactivate<ProductComponent>{\ncanDeactivate (component: ProductComponent) {\nreturn window.confirm('是否离开');\n}\n```\n\n这两个返回都应该是boolean型\n2. 在路由配置里加配置\n**canActivate 在路由配置时可以配置一个数组，angular会一次调用数组中的项，一旦某个返回false，则会终止登陆操作**\n\n```\n{\npath: 'product',\ncomponent: ProductComponent,\ncanActivate: [loginGuard],\ncanDeactivate: [UnsaveGuard]\n}\n```\n\n服务里加上该服务\n\n```\n@NgModule({\nimports: [RouterModule.forRoot(routes)],\nproviders: [LoginGuard, UnsaveGuard],\nexports: [RouterModule]\n})\n```\n路由守卫 非常重要 。再给个我网上找的参考文章\n[http://blog.csdn.net/qq451354/article/details/54017466](http://blog.csdn.net/qq451354/article/details/54017466)\n","slug":"angular4学习笔记整理（二）angular4的路由使用","published":1,"updated":"2023-08-18T07:53:45.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllgb7w4o00011twbmdmzu0wy","content":"<p>这章说一下angular的路由，我也就紧急学了下，实际上在ionic里都没用到这方面的知识，ionic把路由都封好了<br>先说angular路由怎么引入，一开始new出来的angular项目它路由帮你配好了，但看要看app.module.ts里面</p>\n<ol>\n<li><p>首先最上面要引入路由模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;RouterModule, Routes&#125; from &apos;@angular/router&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后在ngModule里面加点东西<br><img src=\"http://upload-images.jianshu.io/upload_images/6114493-aeb2f9d6fdf7cc80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot 2018-01-12_19-41-32.png\"></p>\n</li>\n<li>这个routeConfig需要自己定义，类型Routes，里面就是angular路由配置</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const routeConfig: Routes = [</span><br><span class=\"line\">&#123;path: &apos;&apos; , component : HomeComponent&#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>当然路由配置也是可以抽出来的</p>\n<h4 id=\"路由配置简单介绍\"><a href=\"#路由配置简单介绍\" class=\"headerlink\" title=\"路由配置简单介绍\"></a>路由配置简单介绍</h4><ol>\n<li>常用跳转</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const routeConfig: Routes = [</span><br><span class=\"line\">&#123;path: &apos;&apos; , component : HomeComponent&#125;, //path为&apos;&apos;首页即是</span><br><span class=\"line\">&#123;path: &apos;chat&apos;,component: ChatComponent,&#125;,//访问首页地址+/chat    即能访问到chat组件</span><br><span class=\"line\">&#123;path: &apos;au/:id&apos;,component: AuComponent&#125;,//路由param传参</span><br><span class=\"line\">&#123;path: &apos;**&apos;,component: Code404Component&#125; //不能匹配的路由由 ** 匹配</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>其中第三个路由传参的接收方组件想要拿到参数就需要多加点<br>a. 首先引入 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;ActivatedRoute, Params&#125; from &apos;@angular/router&apos;;</span><br></pre></td></tr></table></figure>\n<p>b. 并在constructor里注入这个路由服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor(private routeInfo: ActivatedRoute) &#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>c. 获取param参数<br>其中有2种方式获取param<br>第一种是snapshot 参数快照</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngOnInit() &#123;</span><br><span class=\"line\">//constructor创建时会只创建一次ngOnInit，所以this.routeInfo.snapshot.params[&apos;id&apos;]的值会不变</span><br><span class=\"line\">this.productId = this.routeInfo.snapshot.params[&apos;id&apos;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但有一个问题<br>如果已经请求 localhost:4200/au/6  后，再请求 localhost:4200/au/8 ，相当于同路由跳转只是参数不同，那么第二次拿到的param数字还是第一次的6<br>原因</p>\n<blockquote>\n<p>constructor创建时会只创建一次ngOnInit，所以this.routeInfo.snapshot.params[‘id’]的值会不变</p>\n</blockquote>\n<p>所以更多的获取参数更推荐第二种参数订阅的方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngOnInit() &#123;</span><br><span class=\"line\">this.routeInfo.params.subscribe((params: Params) =&gt; this.productId = params.id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>怎么跳参数都是对的用第二种</p>\n<h4 id=\"子路由\"><a href=\"#子路由\" class=\"headerlink\" title=\"子路由\"></a>子路由</h4><p>只是一层路由明显满足不了开发需求，可以再配置子路由<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">path: &apos;product&apos;,</span><br><span class=\"line\">component: ProductComponent,</span><br><span class=\"line\">children: [</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">path: &apos;childA&apos;, component: ChildAComponent</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">path: &apos;childB&apos;, component: ChildBComponent</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是子路由光这样还是不行·<br>在父组件html里加跳到子路由的按钮时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a [routerLink]=&quot;[&apos;./childA&apos;]&quot; &gt;销售员A&lt;/a&gt;</span><br><span class=\"line\">&lt;a [routerLink]=&quot;[&apos;./childB&apos;]&quot; &gt;销售员B&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>注意这里不能加/ 因为斜杠指向根路径，  ./才指向相对路径</strong></p>\n<h4 id=\"重定向路由\"><a href=\"#重定向路由\" class=\"headerlink\" title=\"重定向路由\"></a>重定向路由</h4><p>使用 redirectTo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const routes: Routes = [&#123;</span><br><span class=\"line\">path: &apos;&apos;,</span><br><span class=\"line\">redirectTo: &apos;home/6&apos;,</span><br><span class=\"line\">pathMatch: &apos;full&apos; </span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"辅助路由\"><a href=\"#辅助路由\" class=\"headerlink\" title=\"辅助路由\"></a>辅助路由</h4><p>就是一个插座,辅助路由通过不同的outlet配置，让页面的router-outlet标签，显示不同内容<br>路由配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const routes: Routes = [&#123;//辅助路由指向ChatComponent组件，插座名称aux</span><br><span class=\"line\">path: &apos;chat&apos;,</span><br><span class=\"line\">component: ChatComponent,</span><br><span class=\"line\">outlet: &apos;aux&apos;</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p>引用插座的html代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a [routerLink]=&quot;[&#123;outlets:&#123;primary:&apos;home/2&apos;,aux:&apos;chat&apos;&#125;&#125;]&quot; &gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;a [routerLink]=&quot;[&#123;outlets:&#123;aux:null&#125;&#125;]&quot; &gt;&lt;/a&gt;&lt;!--不引用辅助路由--&gt;</span><br><span class=\"line\">&lt;router-outlet&gt;&lt;/router-outlet&gt; &lt;!--插件内容显示的地方--&gt;</span><br></pre></td></tr></table></figure>\n<p>应该会有人问第一行的primary干嘛的<br><strong>辅助路由的改变只会改变插座的内容，不影响主路由</strong><br>比如原本路径是<br><a href=\"http://localhost:4200/home/0\" target=\"_blank\" rel=\"noopener\">http://localhost:4200/home/0</a><br>现在如果[routerLink]=”[{outlets:{aux:’chat’}}]”的a标签被点击，改变的只是辅助路由，路径会变为<br><a href=\"http://localhost:4200/home/0(aux:chat\" target=\"_blank\" rel=\"noopener\">http://localhost:4200/home/0(aux:chat</a>)<br>只有加上primary:’home/2’，主路由才会一起变，变成<a href=\"http://localhost:4200/home/2(aux:chat\" target=\"_blank\" rel=\"noopener\">http://localhost:4200/home/2(aux:chat</a>)<br>同主路由间跳来跳去想把辅助路由干掉，用第二行即可</p>\n<p>####路由守卫<br>只有用户已经登陆或者拥有某些权限才可进入的路由<br><strong>canActive</strong></p>\n<ol>\n<li>写一个守卫类，继承 CanActivate 接口</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;CanActivate&#125; from &apos;@angular/router&apos;;</span><br><span class=\"line\">export class LoginGuard implements CanActivate &#123;</span><br><span class=\"line\">canActivate() &#123;</span><br><span class=\"line\">let loginedIn: boolean = Math.random() &lt; 0.5;</span><br><span class=\"line\">if (!loginedIn) &#123;</span><br><span class=\"line\">console.log(&apos;用户未登陆&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return loginedIn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是CanDeactivate 与canActivate不同的是它要离开某个组件就需要保护那个组件，建立也要注入那个组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export class UnsaveGuard implements CanDeactivate&lt;ProductComponent&gt;&#123;</span><br><span class=\"line\">canDeactivate (component: ProductComponent) &#123;</span><br><span class=\"line\">return window.confirm(&apos;是否离开&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这两个返回都应该是boolean型</p>\n<ol>\n<li>在路由配置里加配置<br><strong>canActivate 在路由配置时可以配置一个数组，angular会一次调用数组中的项，一旦某个返回false，则会终止登陆操作</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">path: &apos;product&apos;,</span><br><span class=\"line\">component: ProductComponent,</span><br><span class=\"line\">canActivate: [loginGuard],</span><br><span class=\"line\">canDeactivate: [UnsaveGuard]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>服务里加上该服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">imports: [RouterModule.forRoot(routes)],</span><br><span class=\"line\">providers: [LoginGuard, UnsaveGuard],</span><br><span class=\"line\">exports: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>路由守卫 非常重要 。再给个我网上找的参考文章<br><a href=\"http://blog.csdn.net/qq451354/article/details/54017466\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq451354/article/details/54017466</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这章说一下angular的路由，我也就紧急学了下，实际上在ionic里都没用到这方面的知识，ionic把路由都封好了<br>先说angular路由怎么引入，一开始new出来的angular项目它路由帮你配好了，但看要看app.module.ts里面</p>\n<ol>\n<li><p>首先最上面要引入路由模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;RouterModule, Routes&#125; from &apos;@angular/router&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后在ngModule里面加点东西<br><img src=\"http://upload-images.jianshu.io/upload_images/6114493-aeb2f9d6fdf7cc80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot 2018-01-12_19-41-32.png\"></p>\n</li>\n<li>这个routeConfig需要自己定义，类型Routes，里面就是angular路由配置</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const routeConfig: Routes = [</span><br><span class=\"line\">&#123;path: &apos;&apos; , component : HomeComponent&#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>当然路由配置也是可以抽出来的</p>\n<h4 id=\"路由配置简单介绍\"><a href=\"#路由配置简单介绍\" class=\"headerlink\" title=\"路由配置简单介绍\"></a>路由配置简单介绍</h4><ol>\n<li>常用跳转</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const routeConfig: Routes = [</span><br><span class=\"line\">&#123;path: &apos;&apos; , component : HomeComponent&#125;, //path为&apos;&apos;首页即是</span><br><span class=\"line\">&#123;path: &apos;chat&apos;,component: ChatComponent,&#125;,//访问首页地址+/chat    即能访问到chat组件</span><br><span class=\"line\">&#123;path: &apos;au/:id&apos;,component: AuComponent&#125;,//路由param传参</span><br><span class=\"line\">&#123;path: &apos;**&apos;,component: Code404Component&#125; //不能匹配的路由由 ** 匹配</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>其中第三个路由传参的接收方组件想要拿到参数就需要多加点<br>a. 首先引入 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;ActivatedRoute, Params&#125; from &apos;@angular/router&apos;;</span><br></pre></td></tr></table></figure>\n<p>b. 并在constructor里注入这个路由服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor(private routeInfo: ActivatedRoute) &#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>c. 获取param参数<br>其中有2种方式获取param<br>第一种是snapshot 参数快照</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngOnInit() &#123;</span><br><span class=\"line\">//constructor创建时会只创建一次ngOnInit，所以this.routeInfo.snapshot.params[&apos;id&apos;]的值会不变</span><br><span class=\"line\">this.productId = this.routeInfo.snapshot.params[&apos;id&apos;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但有一个问题<br>如果已经请求 localhost:4200/au/6  后，再请求 localhost:4200/au/8 ，相当于同路由跳转只是参数不同，那么第二次拿到的param数字还是第一次的6<br>原因</p>\n<blockquote>\n<p>constructor创建时会只创建一次ngOnInit，所以this.routeInfo.snapshot.params[‘id’]的值会不变</p>\n</blockquote>\n<p>所以更多的获取参数更推荐第二种参数订阅的方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngOnInit() &#123;</span><br><span class=\"line\">this.routeInfo.params.subscribe((params: Params) =&gt; this.productId = params.id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>怎么跳参数都是对的用第二种</p>\n<h4 id=\"子路由\"><a href=\"#子路由\" class=\"headerlink\" title=\"子路由\"></a>子路由</h4><p>只是一层路由明显满足不了开发需求，可以再配置子路由<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">path: &apos;product&apos;,</span><br><span class=\"line\">component: ProductComponent,</span><br><span class=\"line\">children: [</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">path: &apos;childA&apos;, component: ChildAComponent</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">path: &apos;childB&apos;, component: ChildBComponent</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是子路由光这样还是不行·<br>在父组件html里加跳到子路由的按钮时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a [routerLink]=&quot;[&apos;./childA&apos;]&quot; &gt;销售员A&lt;/a&gt;</span><br><span class=\"line\">&lt;a [routerLink]=&quot;[&apos;./childB&apos;]&quot; &gt;销售员B&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>注意这里不能加/ 因为斜杠指向根路径，  ./才指向相对路径</strong></p>\n<h4 id=\"重定向路由\"><a href=\"#重定向路由\" class=\"headerlink\" title=\"重定向路由\"></a>重定向路由</h4><p>使用 redirectTo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const routes: Routes = [&#123;</span><br><span class=\"line\">path: &apos;&apos;,</span><br><span class=\"line\">redirectTo: &apos;home/6&apos;,</span><br><span class=\"line\">pathMatch: &apos;full&apos; </span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"辅助路由\"><a href=\"#辅助路由\" class=\"headerlink\" title=\"辅助路由\"></a>辅助路由</h4><p>就是一个插座,辅助路由通过不同的outlet配置，让页面的router-outlet标签，显示不同内容<br>路由配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const routes: Routes = [&#123;//辅助路由指向ChatComponent组件，插座名称aux</span><br><span class=\"line\">path: &apos;chat&apos;,</span><br><span class=\"line\">component: ChatComponent,</span><br><span class=\"line\">outlet: &apos;aux&apos;</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p>引用插座的html代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a [routerLink]=&quot;[&#123;outlets:&#123;primary:&apos;home/2&apos;,aux:&apos;chat&apos;&#125;&#125;]&quot; &gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;a [routerLink]=&quot;[&#123;outlets:&#123;aux:null&#125;&#125;]&quot; &gt;&lt;/a&gt;&lt;!--不引用辅助路由--&gt;</span><br><span class=\"line\">&lt;router-outlet&gt;&lt;/router-outlet&gt; &lt;!--插件内容显示的地方--&gt;</span><br></pre></td></tr></table></figure>\n<p>应该会有人问第一行的primary干嘛的<br><strong>辅助路由的改变只会改变插座的内容，不影响主路由</strong><br>比如原本路径是<br><a href=\"http://localhost:4200/home/0\" target=\"_blank\" rel=\"noopener\">http://localhost:4200/home/0</a><br>现在如果[routerLink]=”[{outlets:{aux:’chat’}}]”的a标签被点击，改变的只是辅助路由，路径会变为<br><a href=\"http://localhost:4200/home/0(aux:chat\" target=\"_blank\" rel=\"noopener\">http://localhost:4200/home/0(aux:chat</a>)<br>只有加上primary:’home/2’，主路由才会一起变，变成<a href=\"http://localhost:4200/home/2(aux:chat\" target=\"_blank\" rel=\"noopener\">http://localhost:4200/home/2(aux:chat</a>)<br>同主路由间跳来跳去想把辅助路由干掉，用第二行即可</p>\n<p>####路由守卫<br>只有用户已经登陆或者拥有某些权限才可进入的路由<br><strong>canActive</strong></p>\n<ol>\n<li>写一个守卫类，继承 CanActivate 接口</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;CanActivate&#125; from &apos;@angular/router&apos;;</span><br><span class=\"line\">export class LoginGuard implements CanActivate &#123;</span><br><span class=\"line\">canActivate() &#123;</span><br><span class=\"line\">let loginedIn: boolean = Math.random() &lt; 0.5;</span><br><span class=\"line\">if (!loginedIn) &#123;</span><br><span class=\"line\">console.log(&apos;用户未登陆&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return loginedIn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是CanDeactivate 与canActivate不同的是它要离开某个组件就需要保护那个组件，建立也要注入那个组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export class UnsaveGuard implements CanDeactivate&lt;ProductComponent&gt;&#123;</span><br><span class=\"line\">canDeactivate (component: ProductComponent) &#123;</span><br><span class=\"line\">return window.confirm(&apos;是否离开&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这两个返回都应该是boolean型</p>\n<ol>\n<li>在路由配置里加配置<br><strong>canActivate 在路由配置时可以配置一个数组，angular会一次调用数组中的项，一旦某个返回false，则会终止登陆操作</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">path: &apos;product&apos;,</span><br><span class=\"line\">component: ProductComponent,</span><br><span class=\"line\">canActivate: [loginGuard],</span><br><span class=\"line\">canDeactivate: [UnsaveGuard]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>服务里加上该服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">imports: [RouterModule.forRoot(routes)],</span><br><span class=\"line\">providers: [LoginGuard, UnsaveGuard],</span><br><span class=\"line\">exports: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>路由守卫 非常重要 。再给个我网上找的参考文章<br><a href=\"http://blog.csdn.net/qq451354/article/details/54017466\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq451354/article/details/54017466</a></p>\n"},{"title":"ionic webview in native(android)","date":"2018-11-25T06:05:43.000Z","_content":"其实开发了这么久，webview的优点很多，热更新、跨平台开发、易维护。但是局限性也很大，一些原生的功能还是用原生插件最好。webview webview，功能只是web 用来 view 的。把网页当作native 里的一个模块或插件最好。好久没更新blog了，更新一波让自己记住。\n把ionic 部署到android原生应用里面\n```\nMainActivity\npublic class MainActivity extends AppCompatActivity {\n    private  View cv;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        cv = getWindow().getDecorView();\n        findViewById(R.id.ionic).setOnClickListener(cordovaViewClickListener);\n    }\n\n    private View.OnClickListener cordovaViewClickListener=new View.OnClickListener() {\n        @Override\n        public void onClick(View v){\n            startCordovaActivity(cv);\n        }\n    };\n\n    public void startCordovaActivity(View view) {\n        // 项目用的方式\n        //Intent intent = new Intent(this, TestCordovaActivity.class);\n        //ionic 现在应用的方式\n        Intent intent = new Intent(this, IonicActivity.class);\n        startActivity(intent);\n    }\n}\n```\n看看ionic 如何嵌套webview的，activity无需xml\n```\npublic class IonicActivity extends CordovaActivity {\n\n    @Override\n    public void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n\n        // enable Cordova apps to be started in the background\n        Bundle extras = getIntent().getExtras();\n        if (extras != null && extras.getBoolean(\"cdvStartInBackground\", false)) {\n            moveTaskToBack(true);\n        }\n\n        // Set by <content src=\"index.html\" /> in config.xml\n        loadUrl(\"file:///android_asset/ionic/index.html\");\n    }\n\n}\n```\n我们项目组嵌套native的方式，效果上和是一样的\n```\npublic class TestCordovaActivity extends Activity {\n\n    SystemWebView webView;\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.content_frame);\n        initCordovaWebView();\n    }\n\n    public CordovaInterfaceImpl cordovaInterface;\n    private CordovaWebView cordovaWebView;\n    public final ArrayBlockingQueue<String> onPageFinishedUrl = new ArrayBlockingQueue<String>(5);\n    public void initCordovaWebView() {\n        cordovaInterface = new CordovaInterfaceImpl(this) {\n            @Override\n            public Object onMessage(String id, Object data) {\n                if (\"onPageFinished\".equals(id)) {\n                    onPageFinishedUrl.add((String) data);\n                }\n                return super.onMessage(id, data);\n            }\n        };\n        ConfigXmlParser parser = new ConfigXmlParser();\n        parser.parse(this);\n        webView = (SystemWebView) findViewById(R.id.aiCordovaWebView);\n        SystemWebViewEngine systemWebViewEngine = new SystemWebViewEngine(webView);\n        //允许JavaScript执行\n        webView.getSettings().setJavaScriptEnabled(true);\n        this.cordovaWebView = new CordovaWebViewImpl(systemWebViewEngine);\n        this.cordovaWebView.init(this.cordovaInterface, parser.getPluginEntries(), parser.getPreferences());\n        this.cordovaWebView.loadUrl(\"file:///android_asset/ionic/index.html\");\n\n    }\n\n\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent intent) {\n        super.onActivityResult(requestCode, resultCode, intent);\n        this.cordovaInterface.onActivityResult(requestCode, resultCode, intent);\n    }\n\n}\n```\n对应的xml\n```\n<org.apache.cordova.engine.SystemWebView\n        android:id=\"@+id/aiCordovaWebView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n```\n上面就是主要代码，至于其他的步骤，网上其他blog 都有，现在有一个native的应用，还有一个ionic build 出来的android 项目\n1.  把www文件夹放在android assets 资源目录下，我改名叫ionic 文件夹了\n2.  src/main/res/xml 里面的config.xml 文件要从ionic build的android项目里挪过来，这个文件很重要，里面有各种cordova插件所用的java依赖配置,使用command或者ctrl 点击某一项看能不能跳到java文件，不然找不到项目是会报错的。 \n3.  AndroidManifest.xml 里面还要加各种各样的权限，同理挪过来，其中有几个注意的地方\n```\n<!-- android网络请求权限 -->\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n <!-- 这个特别重要！！！！！！不然可能相机不能用 -->\n        <provider\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:authorities=\"${applicationId}.provider\"\n            android:exported=\"false\"\n            android:grantUriPermissions=\"true\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/provider_paths\" />\n        </provider>\n```\n还有就是 cordova 的sqllite plugin，如果用到了注意把它的2个jar包放进项目依赖里面，sqlite-connector.jar、sqlite-native-driver.jar 别漏了，不然可能会遇到奇怪的报错，当时还是在 stackflow 才知道什么情况\n4. 最后一点别忘记，把cordova的jar包以及cordova插件的jar包或者模块拷过来。\n5. 直接用android studio 跑起来看一下吧\n","source":"_posts/ionic-webview-in-native-android.md","raw":"---\ntitle: ionic webview in native(android)\ndate: 2018-11-25 14:05:43\ncategories:\n- ionic\ntags:\n- webview\n---\n其实开发了这么久，webview的优点很多，热更新、跨平台开发、易维护。但是局限性也很大，一些原生的功能还是用原生插件最好。webview webview，功能只是web 用来 view 的。把网页当作native 里的一个模块或插件最好。好久没更新blog了，更新一波让自己记住。\n把ionic 部署到android原生应用里面\n```\nMainActivity\npublic class MainActivity extends AppCompatActivity {\n    private  View cv;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        cv = getWindow().getDecorView();\n        findViewById(R.id.ionic).setOnClickListener(cordovaViewClickListener);\n    }\n\n    private View.OnClickListener cordovaViewClickListener=new View.OnClickListener() {\n        @Override\n        public void onClick(View v){\n            startCordovaActivity(cv);\n        }\n    };\n\n    public void startCordovaActivity(View view) {\n        // 项目用的方式\n        //Intent intent = new Intent(this, TestCordovaActivity.class);\n        //ionic 现在应用的方式\n        Intent intent = new Intent(this, IonicActivity.class);\n        startActivity(intent);\n    }\n}\n```\n看看ionic 如何嵌套webview的，activity无需xml\n```\npublic class IonicActivity extends CordovaActivity {\n\n    @Override\n    public void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n\n        // enable Cordova apps to be started in the background\n        Bundle extras = getIntent().getExtras();\n        if (extras != null && extras.getBoolean(\"cdvStartInBackground\", false)) {\n            moveTaskToBack(true);\n        }\n\n        // Set by <content src=\"index.html\" /> in config.xml\n        loadUrl(\"file:///android_asset/ionic/index.html\");\n    }\n\n}\n```\n我们项目组嵌套native的方式，效果上和是一样的\n```\npublic class TestCordovaActivity extends Activity {\n\n    SystemWebView webView;\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.content_frame);\n        initCordovaWebView();\n    }\n\n    public CordovaInterfaceImpl cordovaInterface;\n    private CordovaWebView cordovaWebView;\n    public final ArrayBlockingQueue<String> onPageFinishedUrl = new ArrayBlockingQueue<String>(5);\n    public void initCordovaWebView() {\n        cordovaInterface = new CordovaInterfaceImpl(this) {\n            @Override\n            public Object onMessage(String id, Object data) {\n                if (\"onPageFinished\".equals(id)) {\n                    onPageFinishedUrl.add((String) data);\n                }\n                return super.onMessage(id, data);\n            }\n        };\n        ConfigXmlParser parser = new ConfigXmlParser();\n        parser.parse(this);\n        webView = (SystemWebView) findViewById(R.id.aiCordovaWebView);\n        SystemWebViewEngine systemWebViewEngine = new SystemWebViewEngine(webView);\n        //允许JavaScript执行\n        webView.getSettings().setJavaScriptEnabled(true);\n        this.cordovaWebView = new CordovaWebViewImpl(systemWebViewEngine);\n        this.cordovaWebView.init(this.cordovaInterface, parser.getPluginEntries(), parser.getPreferences());\n        this.cordovaWebView.loadUrl(\"file:///android_asset/ionic/index.html\");\n\n    }\n\n\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent intent) {\n        super.onActivityResult(requestCode, resultCode, intent);\n        this.cordovaInterface.onActivityResult(requestCode, resultCode, intent);\n    }\n\n}\n```\n对应的xml\n```\n<org.apache.cordova.engine.SystemWebView\n        android:id=\"@+id/aiCordovaWebView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n```\n上面就是主要代码，至于其他的步骤，网上其他blog 都有，现在有一个native的应用，还有一个ionic build 出来的android 项目\n1.  把www文件夹放在android assets 资源目录下，我改名叫ionic 文件夹了\n2.  src/main/res/xml 里面的config.xml 文件要从ionic build的android项目里挪过来，这个文件很重要，里面有各种cordova插件所用的java依赖配置,使用command或者ctrl 点击某一项看能不能跳到java文件，不然找不到项目是会报错的。 \n3.  AndroidManifest.xml 里面还要加各种各样的权限，同理挪过来，其中有几个注意的地方\n```\n<!-- android网络请求权限 -->\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n <!-- 这个特别重要！！！！！！不然可能相机不能用 -->\n        <provider\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:authorities=\"${applicationId}.provider\"\n            android:exported=\"false\"\n            android:grantUriPermissions=\"true\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/provider_paths\" />\n        </provider>\n```\n还有就是 cordova 的sqllite plugin，如果用到了注意把它的2个jar包放进项目依赖里面，sqlite-connector.jar、sqlite-native-driver.jar 别漏了，不然可能会遇到奇怪的报错，当时还是在 stackflow 才知道什么情况\n4. 最后一点别忘记，把cordova的jar包以及cordova插件的jar包或者模块拷过来。\n5. 直接用android studio 跑起来看一下吧\n","slug":"ionic-webview-in-native-android","published":1,"updated":"2023-08-18T07:53:45.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllgb7w4t00041twbgaq4o8w2","content":"<p>其实开发了这么久，webview的优点很多，热更新、跨平台开发、易维护。但是局限性也很大，一些原生的功能还是用原生插件最好。webview webview，功能只是web 用来 view 的。把网页当作native 里的一个模块或插件最好。好久没更新blog了，更新一波让自己记住。<br>把ionic 部署到android原生应用里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MainActivity</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\">    private  View cv;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        cv = getWindow().getDecorView();</span><br><span class=\"line\">        findViewById(R.id.ionic).setOnClickListener(cordovaViewClickListener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private View.OnClickListener cordovaViewClickListener=new View.OnClickListener() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void onClick(View v)&#123;</span><br><span class=\"line\">            startCordovaActivity(cv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void startCordovaActivity(View view) &#123;</span><br><span class=\"line\">        // 项目用的方式</span><br><span class=\"line\">        //Intent intent = new Intent(this, TestCordovaActivity.class);</span><br><span class=\"line\">        //ionic 现在应用的方式</span><br><span class=\"line\">        Intent intent = new Intent(this, IonicActivity.class);</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看看ionic 如何嵌套webview的，activity无需xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IonicActivity extends CordovaActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onCreate(Bundle savedInstanceState)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        // enable Cordova apps to be started in the background</span><br><span class=\"line\">        Bundle extras = getIntent().getExtras();</span><br><span class=\"line\">        if (extras != null &amp;&amp; extras.getBoolean(&quot;cdvStartInBackground&quot;, false)) &#123;</span><br><span class=\"line\">            moveTaskToBack(true);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Set by &lt;content src=&quot;index.html&quot; /&gt; in config.xml</span><br><span class=\"line\">        loadUrl(&quot;file:///android_asset/ionic/index.html&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们项目组嵌套native的方式，效果上和是一样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestCordovaActivity extends Activity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SystemWebView webView;</span><br><span class=\"line\">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.content_frame);</span><br><span class=\"line\">        initCordovaWebView();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public CordovaInterfaceImpl cordovaInterface;</span><br><span class=\"line\">    private CordovaWebView cordovaWebView;</span><br><span class=\"line\">    public final ArrayBlockingQueue&lt;String&gt; onPageFinishedUrl = new ArrayBlockingQueue&lt;String&gt;(5);</span><br><span class=\"line\">    public void initCordovaWebView() &#123;</span><br><span class=\"line\">        cordovaInterface = new CordovaInterfaceImpl(this) &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public Object onMessage(String id, Object data) &#123;</span><br><span class=\"line\">                if (&quot;onPageFinished&quot;.equals(id)) &#123;</span><br><span class=\"line\">                    onPageFinishedUrl.add((String) data);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return super.onMessage(id, data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ConfigXmlParser parser = new ConfigXmlParser();</span><br><span class=\"line\">        parser.parse(this);</span><br><span class=\"line\">        webView = (SystemWebView) findViewById(R.id.aiCordovaWebView);</span><br><span class=\"line\">        SystemWebViewEngine systemWebViewEngine = new SystemWebViewEngine(webView);</span><br><span class=\"line\">        //允许JavaScript执行</span><br><span class=\"line\">        webView.getSettings().setJavaScriptEnabled(true);</span><br><span class=\"line\">        this.cordovaWebView = new CordovaWebViewImpl(systemWebViewEngine);</span><br><span class=\"line\">        this.cordovaWebView.init(this.cordovaInterface, parser.getPluginEntries(), parser.getPreferences());</span><br><span class=\"line\">        this.cordovaWebView.loadUrl(&quot;file:///android_asset/ionic/index.html&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onActivityResult(int requestCode, int resultCode, Intent intent) &#123;</span><br><span class=\"line\">        super.onActivityResult(requestCode, resultCode, intent);</span><br><span class=\"line\">        this.cordovaInterface.onActivityResult(requestCode, resultCode, intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对应的xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;org.apache.cordova.engine.SystemWebView</span><br><span class=\"line\">        android:id=&quot;@+id/aiCordovaWebView&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;match_parent&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>上面就是主要代码，至于其他的步骤，网上其他blog 都有，现在有一个native的应用，还有一个ionic build 出来的android 项目</p>\n<ol>\n<li>把www文件夹放在android assets 资源目录下，我改名叫ionic 文件夹了</li>\n<li>src/main/res/xml 里面的config.xml 文件要从ionic build的android项目里挪过来，这个文件很重要，里面有各种cordova插件所用的java依赖配置,使用command或者ctrl 点击某一项看能不能跳到java文件，不然找不到项目是会报错的。 </li>\n<li>AndroidManifest.xml 里面还要加各种各样的权限，同理挪过来，其中有几个注意的地方<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- android网络请求权限 --&gt;</span><br><span class=\"line\">    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</span><br><span class=\"line\"> &lt;!-- 这个特别重要！！！！！！不然可能相机不能用 --&gt;</span><br><span class=\"line\">        &lt;provider</span><br><span class=\"line\">            android:name=&quot;android.support.v4.content.FileProvider&quot;</span><br><span class=\"line\">            android:authorities=&quot;$&#123;applicationId&#125;.provider&quot;</span><br><span class=\"line\">            android:exported=&quot;false&quot;</span><br><span class=\"line\">            android:grantUriPermissions=&quot;true&quot;&gt;</span><br><span class=\"line\">            &lt;meta-data</span><br><span class=\"line\">                android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</span><br><span class=\"line\">                android:resource=&quot;@xml/provider_paths&quot; /&gt;</span><br><span class=\"line\">        &lt;/provider&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>还有就是 cordova 的sqllite plugin，如果用到了注意把它的2个jar包放进项目依赖里面，sqlite-connector.jar、sqlite-native-driver.jar 别漏了，不然可能会遇到奇怪的报错，当时还是在 stackflow 才知道什么情况</p>\n<ol>\n<li>最后一点别忘记，把cordova的jar包以及cordova插件的jar包或者模块拷过来。</li>\n<li>直接用android studio 跑起来看一下吧</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>其实开发了这么久，webview的优点很多，热更新、跨平台开发、易维护。但是局限性也很大，一些原生的功能还是用原生插件最好。webview webview，功能只是web 用来 view 的。把网页当作native 里的一个模块或插件最好。好久没更新blog了，更新一波让自己记住。<br>把ionic 部署到android原生应用里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MainActivity</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\">    private  View cv;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        cv = getWindow().getDecorView();</span><br><span class=\"line\">        findViewById(R.id.ionic).setOnClickListener(cordovaViewClickListener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private View.OnClickListener cordovaViewClickListener=new View.OnClickListener() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void onClick(View v)&#123;</span><br><span class=\"line\">            startCordovaActivity(cv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void startCordovaActivity(View view) &#123;</span><br><span class=\"line\">        // 项目用的方式</span><br><span class=\"line\">        //Intent intent = new Intent(this, TestCordovaActivity.class);</span><br><span class=\"line\">        //ionic 现在应用的方式</span><br><span class=\"line\">        Intent intent = new Intent(this, IonicActivity.class);</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看看ionic 如何嵌套webview的，activity无需xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IonicActivity extends CordovaActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onCreate(Bundle savedInstanceState)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        // enable Cordova apps to be started in the background</span><br><span class=\"line\">        Bundle extras = getIntent().getExtras();</span><br><span class=\"line\">        if (extras != null &amp;&amp; extras.getBoolean(&quot;cdvStartInBackground&quot;, false)) &#123;</span><br><span class=\"line\">            moveTaskToBack(true);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Set by &lt;content src=&quot;index.html&quot; /&gt; in config.xml</span><br><span class=\"line\">        loadUrl(&quot;file:///android_asset/ionic/index.html&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们项目组嵌套native的方式，效果上和是一样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestCordovaActivity extends Activity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SystemWebView webView;</span><br><span class=\"line\">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.content_frame);</span><br><span class=\"line\">        initCordovaWebView();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public CordovaInterfaceImpl cordovaInterface;</span><br><span class=\"line\">    private CordovaWebView cordovaWebView;</span><br><span class=\"line\">    public final ArrayBlockingQueue&lt;String&gt; onPageFinishedUrl = new ArrayBlockingQueue&lt;String&gt;(5);</span><br><span class=\"line\">    public void initCordovaWebView() &#123;</span><br><span class=\"line\">        cordovaInterface = new CordovaInterfaceImpl(this) &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public Object onMessage(String id, Object data) &#123;</span><br><span class=\"line\">                if (&quot;onPageFinished&quot;.equals(id)) &#123;</span><br><span class=\"line\">                    onPageFinishedUrl.add((String) data);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return super.onMessage(id, data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ConfigXmlParser parser = new ConfigXmlParser();</span><br><span class=\"line\">        parser.parse(this);</span><br><span class=\"line\">        webView = (SystemWebView) findViewById(R.id.aiCordovaWebView);</span><br><span class=\"line\">        SystemWebViewEngine systemWebViewEngine = new SystemWebViewEngine(webView);</span><br><span class=\"line\">        //允许JavaScript执行</span><br><span class=\"line\">        webView.getSettings().setJavaScriptEnabled(true);</span><br><span class=\"line\">        this.cordovaWebView = new CordovaWebViewImpl(systemWebViewEngine);</span><br><span class=\"line\">        this.cordovaWebView.init(this.cordovaInterface, parser.getPluginEntries(), parser.getPreferences());</span><br><span class=\"line\">        this.cordovaWebView.loadUrl(&quot;file:///android_asset/ionic/index.html&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onActivityResult(int requestCode, int resultCode, Intent intent) &#123;</span><br><span class=\"line\">        super.onActivityResult(requestCode, resultCode, intent);</span><br><span class=\"line\">        this.cordovaInterface.onActivityResult(requestCode, resultCode, intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对应的xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;org.apache.cordova.engine.SystemWebView</span><br><span class=\"line\">        android:id=&quot;@+id/aiCordovaWebView&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;match_parent&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>上面就是主要代码，至于其他的步骤，网上其他blog 都有，现在有一个native的应用，还有一个ionic build 出来的android 项目</p>\n<ol>\n<li>把www文件夹放在android assets 资源目录下，我改名叫ionic 文件夹了</li>\n<li>src/main/res/xml 里面的config.xml 文件要从ionic build的android项目里挪过来，这个文件很重要，里面有各种cordova插件所用的java依赖配置,使用command或者ctrl 点击某一项看能不能跳到java文件，不然找不到项目是会报错的。 </li>\n<li>AndroidManifest.xml 里面还要加各种各样的权限，同理挪过来，其中有几个注意的地方<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- android网络请求权限 --&gt;</span><br><span class=\"line\">    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</span><br><span class=\"line\"> &lt;!-- 这个特别重要！！！！！！不然可能相机不能用 --&gt;</span><br><span class=\"line\">        &lt;provider</span><br><span class=\"line\">            android:name=&quot;android.support.v4.content.FileProvider&quot;</span><br><span class=\"line\">            android:authorities=&quot;$&#123;applicationId&#125;.provider&quot;</span><br><span class=\"line\">            android:exported=&quot;false&quot;</span><br><span class=\"line\">            android:grantUriPermissions=&quot;true&quot;&gt;</span><br><span class=\"line\">            &lt;meta-data</span><br><span class=\"line\">                android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</span><br><span class=\"line\">                android:resource=&quot;@xml/provider_paths&quot; /&gt;</span><br><span class=\"line\">        &lt;/provider&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>还有就是 cordova 的sqllite plugin，如果用到了注意把它的2个jar包放进项目依赖里面，sqlite-connector.jar、sqlite-native-driver.jar 别漏了，不然可能会遇到奇怪的报错，当时还是在 stackflow 才知道什么情况</p>\n<ol>\n<li>最后一点别忘记，把cordova的jar包以及cordova插件的jar包或者模块拷过来。</li>\n<li>直接用android studio 跑起来看一下吧</li>\n</ol>\n"},{"title":"angular4学习笔记整理（四）组件间通讯、管道","date":"2018-01-12T13:35:00.000Z","_content":"####组件间通讯\n1.组件间通讯 。  \n父组件向子组件输入属性用\n```\n<app-order [stockCode]=\"stock\" [amount]=\"100\"></app-order>\n```\n子组件声明接收父组件的属性@input()注解\n```\n@Input()\namount: number;\n```\n\n2.组件输出属性\n\n1.在发射的组件内部定义发射的EventEmitter对象\n```\n@Output()\nlastPrice: EventEmitter<PriceQuote> = new EventEmitter();\n```\n2.在发射组件里 将要发射的变量发射出去 ，注意类型必须和定义里的泛型一致\n```\nlet pq = new PriceQuote(this.stockCode, Math.random() * 100);\nthis.lastPrice.emit(pq);\n```\n3.在发射组件标签声明的地方加上监听该emitEvent对象传过来的事件\n```\n<app-price-quote (lastPrice)=\"priceQuoteHandler($event)\"></app-price-quote>\n```\n\n然后父组件里就可以写，事件就是发射过来的值\n```\npriceQuoteHandler(priceQuote) {\nthis.priceQuote = priceQuote;\n}\n```\n注意想监听事件的名字即不是lastPrice 只要在output里改即可\n```\n@Output('priceChange')\n```\n但是这样有感觉很麻烦，能不能用**双向绑定**\n\n还有注意 如果一个属性想用双向绑定 那么如果输入属性为rating ，并且想在标签上```[(rating)]```，获取输出值那么在组件内的输出属性 名称必须为```ratingChange```  ，加个Change\n```\n@Output()\nprivate ratingChange: EventEmitter<number> = new EventEmitter();\n```\n\n####管道\n普通应用，这个使用可以去查官网\n```\n<p>{{birthday | date : 'yyyy-MM-dd HH:mm:ss'}}</p>\n<p>{{pi | number: '2.2-4'}}</p>\n```\n自定义管道需命令行生成 ```ng g pipe name```\n管道和组件一样需申明在NgModule里\n```\ndeclarations: [\nFilterPipe\n],\n```\n自定义管道\n```\nimport { Pipe, PipeTransform } from '@angular/core';\n@Pipe({\nname: 'filter'\n})\nexport class FilterPipe implements PipeTransform {\ntransform(list: any[], filterField: string, keyword: string): any {\nif (!filterField || !keyword) {\nreturn list;\n}\nreturn list.filter( item => {\nlet fieldVaule = item[filterField];\nreturn fieldVaule.indexOf(keyword) >= 0;\n});\n}\n}\n```\n####如何在父组件中调用子组件的方法\n子组件就一个gretting的方法\n```\n父组件html代码\n<app-children #child1></app-children>\n<app-children #child2></app-children>\n<button (click)=\"child2.gretting('jsex')\">hahah1</button>\n```\n父组件ts代码\n```\nimport { Component, OnInit, ViewChild} from '@angular/core';\nimport {ChildrenComponent} from './children/children.component';\n\n@Component({\nselector: 'app-root',\ntemplateUrl: './app.component.html',\nstyleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit,{\n@ViewChild('child1')\nchild1: ChildrenComponent;\ngreeting: string = 'heelo';\nngOnInit(): void {\nthis.child1.gretting(this.greeting);\n}\n}\n```\n\n1.在ts中调用子组件方法\nhtml里\n```\n<app-children #child1></app-children>\n```\nts里\n```\n@ViewChild('child1')\nchild1: ChildrenComponent;\n```\n父组件ts任意地方就可以\n```\nthis.child1.gretting(this.greeting);\n```\n\n2.在html里调用子组件api\n```\n<app-children #child2></app-children>\n<button (click)=\"child2.gretting('jsex')\">hahah</button>\n```\n\n","source":"_posts/angular4学习笔记整理（四）组件间通讯、管道.md","raw":"---\ntitle: angular4学习笔记整理（四）组件间通讯、管道\ndate: 2018-01-12 21:35:00\ncategories:\n- angular\ntags:\n- pipe \n- emit\n---\n####组件间通讯\n1.组件间通讯 。  \n父组件向子组件输入属性用\n```\n<app-order [stockCode]=\"stock\" [amount]=\"100\"></app-order>\n```\n子组件声明接收父组件的属性@input()注解\n```\n@Input()\namount: number;\n```\n\n2.组件输出属性\n\n1.在发射的组件内部定义发射的EventEmitter对象\n```\n@Output()\nlastPrice: EventEmitter<PriceQuote> = new EventEmitter();\n```\n2.在发射组件里 将要发射的变量发射出去 ，注意类型必须和定义里的泛型一致\n```\nlet pq = new PriceQuote(this.stockCode, Math.random() * 100);\nthis.lastPrice.emit(pq);\n```\n3.在发射组件标签声明的地方加上监听该emitEvent对象传过来的事件\n```\n<app-price-quote (lastPrice)=\"priceQuoteHandler($event)\"></app-price-quote>\n```\n\n然后父组件里就可以写，事件就是发射过来的值\n```\npriceQuoteHandler(priceQuote) {\nthis.priceQuote = priceQuote;\n}\n```\n注意想监听事件的名字即不是lastPrice 只要在output里改即可\n```\n@Output('priceChange')\n```\n但是这样有感觉很麻烦，能不能用**双向绑定**\n\n还有注意 如果一个属性想用双向绑定 那么如果输入属性为rating ，并且想在标签上```[(rating)]```，获取输出值那么在组件内的输出属性 名称必须为```ratingChange```  ，加个Change\n```\n@Output()\nprivate ratingChange: EventEmitter<number> = new EventEmitter();\n```\n\n####管道\n普通应用，这个使用可以去查官网\n```\n<p>{{birthday | date : 'yyyy-MM-dd HH:mm:ss'}}</p>\n<p>{{pi | number: '2.2-4'}}</p>\n```\n自定义管道需命令行生成 ```ng g pipe name```\n管道和组件一样需申明在NgModule里\n```\ndeclarations: [\nFilterPipe\n],\n```\n自定义管道\n```\nimport { Pipe, PipeTransform } from '@angular/core';\n@Pipe({\nname: 'filter'\n})\nexport class FilterPipe implements PipeTransform {\ntransform(list: any[], filterField: string, keyword: string): any {\nif (!filterField || !keyword) {\nreturn list;\n}\nreturn list.filter( item => {\nlet fieldVaule = item[filterField];\nreturn fieldVaule.indexOf(keyword) >= 0;\n});\n}\n}\n```\n####如何在父组件中调用子组件的方法\n子组件就一个gretting的方法\n```\n父组件html代码\n<app-children #child1></app-children>\n<app-children #child2></app-children>\n<button (click)=\"child2.gretting('jsex')\">hahah1</button>\n```\n父组件ts代码\n```\nimport { Component, OnInit, ViewChild} from '@angular/core';\nimport {ChildrenComponent} from './children/children.component';\n\n@Component({\nselector: 'app-root',\ntemplateUrl: './app.component.html',\nstyleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit,{\n@ViewChild('child1')\nchild1: ChildrenComponent;\ngreeting: string = 'heelo';\nngOnInit(): void {\nthis.child1.gretting(this.greeting);\n}\n}\n```\n\n1.在ts中调用子组件方法\nhtml里\n```\n<app-children #child1></app-children>\n```\nts里\n```\n@ViewChild('child1')\nchild1: ChildrenComponent;\n```\n父组件ts任意地方就可以\n```\nthis.child1.gretting(this.greeting);\n```\n\n2.在html里调用子组件api\n```\n<app-children #child2></app-children>\n<button (click)=\"child2.gretting('jsex')\">hahah</button>\n```\n\n","slug":"angular4学习笔记整理（四）组件间通讯、管道","published":1,"updated":"2023-08-18T07:53:45.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllgb7w4w00051twb0k5vnkam","content":"<p>####组件间通讯<br>1.组件间通讯 。<br>父组件向子组件输入属性用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;app-order [stockCode]=&quot;stock&quot; [amount]=&quot;100&quot;&gt;&lt;/app-order&gt;</span><br></pre></td></tr></table></figure></p>\n<p>子组件声明接收父组件的属性@input()注解<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Input()</span><br><span class=\"line\">amount: number;</span><br></pre></td></tr></table></figure></p>\n<p>2.组件输出属性</p>\n<p>1.在发射的组件内部定义发射的EventEmitter对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Output()</span><br><span class=\"line\">lastPrice: EventEmitter&lt;PriceQuote&gt; = new EventEmitter();</span><br></pre></td></tr></table></figure></p>\n<p>2.在发射组件里 将要发射的变量发射出去 ，注意类型必须和定义里的泛型一致<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pq = new PriceQuote(this.stockCode, Math.random() * 100);</span><br><span class=\"line\">this.lastPrice.emit(pq);</span><br></pre></td></tr></table></figure></p>\n<p>3.在发射组件标签声明的地方加上监听该emitEvent对象传过来的事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;app-price-quote (lastPrice)=&quot;priceQuoteHandler($event)&quot;&gt;&lt;/app-price-quote&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后父组件里就可以写，事件就是发射过来的值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">priceQuoteHandler(priceQuote) &#123;</span><br><span class=\"line\">this.priceQuote = priceQuote;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意想监听事件的名字即不是lastPrice 只要在output里改即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Output(&apos;priceChange&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>但是这样有感觉很麻烦，能不能用<strong>双向绑定</strong></p>\n<p>还有注意 如果一个属性想用双向绑定 那么如果输入属性为rating ，并且想在标签上<figure class=\"highlight plain\"><figcaption><span>名称必须为```ratingChange```  ，加个Change</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">@Output()</span><br><span class=\"line\">private ratingChange: EventEmitter&lt;number&gt; = new EventEmitter();</span><br></pre></td></tr></table></figure></p>\n<p>####管道<br>普通应用，这个使用可以去查官网<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&#123;&#123;birthday | date : &apos;yyyy-MM-dd HH:mm:ss&apos;&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&#123;&#123;pi | number: &apos;2.2-4&apos;&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>\n<p>自定义管道需命令行生成 <figure class=\"highlight plain\"><figcaption><span>g pipe name```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">管道和组件一样需申明在NgModule里</span><br></pre></td></tr></table></figure></p>\n<p>declarations: [<br>FilterPipe<br>],<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自定义管道</span><br></pre></td></tr></table></figure></p>\n<p>import { Pipe, PipeTransform } from ‘@angular/core’;<br>@Pipe({<br>name: ‘filter’<br>})<br>export class FilterPipe implements PipeTransform {<br>transform(list: any[], filterField: string, keyword: string): any {<br>if (!filterField || !keyword) {<br>return list;<br>}<br>return list.filter( item =&gt; {<br>let fieldVaule = item[filterField];<br>return fieldVaule.indexOf(keyword) &gt;= 0;<br>});<br>}<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">####如何在父组件中调用子组件的方法</span><br><span class=\"line\">子组件就一个gretting的方法</span><br></pre></td></tr></table></figure></p>\n<p>父组件html代码</p>\n<p><app-children #child1=\"\"></app-children></p>\n<p><app-children #child2=\"\"></app-children></p>\n<p><button (click)=\"child2.gretting('jsex')\">hahah1</button><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父组件ts代码</span><br></pre></td></tr></table></figure></p>\n<p>import { Component, OnInit, ViewChild} from ‘@angular/core’;<br>import {ChildrenComponent} from ‘./children/children.component’;</p>\n<p>@Component({<br>selector: ‘app-root’,<br>templateUrl: ‘./app.component.html’,<br>styleUrls: [‘./app.component.css’]<br>})<br>export class AppComponent implements OnInit,{<br>@ViewChild(‘child1’)<br>child1: ChildrenComponent;<br>greeting: string = ‘heelo’;<br>ngOnInit(): void {<br>this.child1.gretting(this.greeting);<br>}<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1.在ts中调用子组件方法</span><br><span class=\"line\">html里</span><br></pre></td></tr></table></figure></p>\n<p><app-children #child1=\"\"></app-children><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ts里</span><br></pre></td></tr></table></figure></p>\n<p>@ViewChild(‘child1’)<br>child1: ChildrenComponent;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父组件ts任意地方就可以</span><br></pre></td></tr></table></figure></p>\n<p>this.child1.gretting(this.greeting);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2.在html里调用子组件api</span><br></pre></td></tr></table></figure></p>\n<p><app-children #child2=\"\"></app-children></p>\n<p><button (click)=\"child2.gretting('jsex')\">hahah</button><br>```</p>\n","site":{"data":{}},"excerpt":"","more":"<p>####组件间通讯<br>1.组件间通讯 。<br>父组件向子组件输入属性用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;app-order [stockCode]=&quot;stock&quot; [amount]=&quot;100&quot;&gt;&lt;/app-order&gt;</span><br></pre></td></tr></table></figure></p>\n<p>子组件声明接收父组件的属性@input()注解<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Input()</span><br><span class=\"line\">amount: number;</span><br></pre></td></tr></table></figure></p>\n<p>2.组件输出属性</p>\n<p>1.在发射的组件内部定义发射的EventEmitter对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Output()</span><br><span class=\"line\">lastPrice: EventEmitter&lt;PriceQuote&gt; = new EventEmitter();</span><br></pre></td></tr></table></figure></p>\n<p>2.在发射组件里 将要发射的变量发射出去 ，注意类型必须和定义里的泛型一致<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pq = new PriceQuote(this.stockCode, Math.random() * 100);</span><br><span class=\"line\">this.lastPrice.emit(pq);</span><br></pre></td></tr></table></figure></p>\n<p>3.在发射组件标签声明的地方加上监听该emitEvent对象传过来的事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;app-price-quote (lastPrice)=&quot;priceQuoteHandler($event)&quot;&gt;&lt;/app-price-quote&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后父组件里就可以写，事件就是发射过来的值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">priceQuoteHandler(priceQuote) &#123;</span><br><span class=\"line\">this.priceQuote = priceQuote;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意想监听事件的名字即不是lastPrice 只要在output里改即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Output(&apos;priceChange&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>但是这样有感觉很麻烦，能不能用<strong>双向绑定</strong></p>\n<p>还有注意 如果一个属性想用双向绑定 那么如果输入属性为rating ，并且想在标签上<figure class=\"highlight plain\"><figcaption><span>名称必须为```ratingChange```  ，加个Change</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">@Output()</span><br><span class=\"line\">private ratingChange: EventEmitter&lt;number&gt; = new EventEmitter();</span><br></pre></td></tr></table></figure></p>\n<p>####管道<br>普通应用，这个使用可以去查官网<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&#123;&#123;birthday | date : &apos;yyyy-MM-dd HH:mm:ss&apos;&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&#123;&#123;pi | number: &apos;2.2-4&apos;&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>\n<p>自定义管道需命令行生成 <figure class=\"highlight plain\"><figcaption><span>g pipe name```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">管道和组件一样需申明在NgModule里</span><br></pre></td></tr></table></figure></p>\n<p>declarations: [<br>FilterPipe<br>],<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自定义管道</span><br></pre></td></tr></table></figure></p>\n<p>import { Pipe, PipeTransform } from ‘@angular/core’;<br>@Pipe({<br>name: ‘filter’<br>})<br>export class FilterPipe implements PipeTransform {<br>transform(list: any[], filterField: string, keyword: string): any {<br>if (!filterField || !keyword) {<br>return list;<br>}<br>return list.filter( item =&gt; {<br>let fieldVaule = item[filterField];<br>return fieldVaule.indexOf(keyword) &gt;= 0;<br>});<br>}<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">####如何在父组件中调用子组件的方法</span><br><span class=\"line\">子组件就一个gretting的方法</span><br></pre></td></tr></table></figure></p>\n<p>父组件html代码</p>\n<p><app-children #child1=\"\"></app-children></p>\n<p><app-children #child2=\"\"></app-children></p>\n<p><button (click)=\"child2.gretting('jsex')\">hahah1</button><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父组件ts代码</span><br></pre></td></tr></table></figure></p>\n<p>import { Component, OnInit, ViewChild} from ‘@angular/core’;<br>import {ChildrenComponent} from ‘./children/children.component’;</p>\n<p>@Component({<br>selector: ‘app-root’,<br>templateUrl: ‘./app.component.html’,<br>styleUrls: [‘./app.component.css’]<br>})<br>export class AppComponent implements OnInit,{<br>@ViewChild(‘child1’)<br>child1: ChildrenComponent;<br>greeting: string = ‘heelo’;<br>ngOnInit(): void {<br>this.child1.gretting(this.greeting);<br>}<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1.在ts中调用子组件方法</span><br><span class=\"line\">html里</span><br></pre></td></tr></table></figure></p>\n<p><app-children #child1=\"\"></app-children><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ts里</span><br></pre></td></tr></table></figure></p>\n<p>@ViewChild(‘child1’)<br>child1: ChildrenComponent;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父组件ts任意地方就可以</span><br></pre></td></tr></table></figure></p>\n<p>this.child1.gretting(this.greeting);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2.在html里调用子组件api</span><br></pre></td></tr></table></figure></p>\n<p><app-children #child2=\"\"></app-children></p>\n<p><button (click)=\"child2.gretting('jsex')\">hahah</button><br>```</p>\n"},{"title":"ionic3 热更新android篇","date":"2018-03-18T04:35:00.000Z","_content":"这热更新简直了，其实看网上配来配去就这几步，但自己一配就立马遇上很多问题，主要还是细节方面处理不够到位。索性自己也开一篇，防止自己忘了。\n\n1. 进入自己的ionic项目根目录下 启动 ionic服务  ``ionic serve``\n\n2. 安装ionic native 热更新插件\n```\nionic cordova plugin add cordova-hot-code-push-plugin\nionic cordova plugin add cordova-hot-code-push-local-dev-addon\nnpm install -g cordova-hot-code-push-cli\n```\n当然了还要确保自己已经安装了android平台（没安装可以执行 ``ionic cordova platform add android``）\n\n3. 在config.xml配置文件中加入下面节点\n```\n<chcp>\n<config-file url=\"http://192.168.1.76:8121/chcp.json\" />\n<native-interface version=\"1\" />\n</chcp>\n```\n上面那个地址是你远程服务器存放www文件夹路径的地址 ，当然我这个地址http://192.168.1.76:8121是通过http-server -p 8121 在www目录下开服务拿的地址。是本地的一个服务。\n\n4. 热更新服务开启 ``cordova-hcp server ``  还有如果运行命令正常www目录下会有 有chcp.json和chcp.manifest文件出现。到这一步你就知道为什么第三步要配这个地址了。\n\n5. 在项目根目录下新建模板 cordova-hcp.json\n```\n{\n\"content_url\": \"http://192.168.1.76:8121\",\n\"autogenerated\": true,\n\"update\": \"now\"\n}\n```\n这一步配置完后急的访问下，\nhttp://192.168.1.76:8121 访问的是ionic项目的首页\nhttp://192.168.1.76:8121/chcp.json 也要能访问到\n\n6.  以后发布执行``cordova-hcp build``命令，就可以把模板内容替换到chcp.json文件内，因为每次更新或者发布app都会使热更新服务重新生成chcp.json文件内容\n值得注意的是，这条命令一运行，热更新服务的运行窗口也会报相应的日志\n![Screenshot 2018-02-16_20-10-53.png](http://upload-images.jianshu.io/upload_images/6114493-0386c299e9515172.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可见这条命令不仅生成chcp.json内容这么简单。然后再说我发现的一个问题，执行ionic serve 就会chcp.json又改回原来的了，所以打包build的时候要小心一点。\n\n7. build安卓包 ```ionic cordova build android```\n到这一步，编译完android包以后记得再看一下配置，这回要看app里面的。\n![Screenshot 2018-02-16_20-17-13.png](http://upload-images.jianshu.io/upload_images/6114493-11068a510e2fbf35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n别又是什么ngrok内网穿透的地址，这就不好玩了，不对的话，把www里面的chcp.json内容复制过来替换一下。\n\n8.最后一步就直接打开安装好的app了，改一下html内容,用``ionic serve`` 编译一下，把app关掉重新开一下，就可以看到热更新改的东西了。\n注意：我这边测试热更新是用模拟器的，用真的小伙伴注意下你的地址是不是手机可以访问哦！\n\n","source":"_posts/ionic3-热更新android篇.md","raw":"---\ntitle: ionic3 热更新android篇\ndate: 2018-03-18 12:35:00\ncategories:\n- ionic\ntags:\n- hot codePush\n---\n这热更新简直了，其实看网上配来配去就这几步，但自己一配就立马遇上很多问题，主要还是细节方面处理不够到位。索性自己也开一篇，防止自己忘了。\n\n1. 进入自己的ionic项目根目录下 启动 ionic服务  ``ionic serve``\n\n2. 安装ionic native 热更新插件\n```\nionic cordova plugin add cordova-hot-code-push-plugin\nionic cordova plugin add cordova-hot-code-push-local-dev-addon\nnpm install -g cordova-hot-code-push-cli\n```\n当然了还要确保自己已经安装了android平台（没安装可以执行 ``ionic cordova platform add android``）\n\n3. 在config.xml配置文件中加入下面节点\n```\n<chcp>\n<config-file url=\"http://192.168.1.76:8121/chcp.json\" />\n<native-interface version=\"1\" />\n</chcp>\n```\n上面那个地址是你远程服务器存放www文件夹路径的地址 ，当然我这个地址http://192.168.1.76:8121是通过http-server -p 8121 在www目录下开服务拿的地址。是本地的一个服务。\n\n4. 热更新服务开启 ``cordova-hcp server ``  还有如果运行命令正常www目录下会有 有chcp.json和chcp.manifest文件出现。到这一步你就知道为什么第三步要配这个地址了。\n\n5. 在项目根目录下新建模板 cordova-hcp.json\n```\n{\n\"content_url\": \"http://192.168.1.76:8121\",\n\"autogenerated\": true,\n\"update\": \"now\"\n}\n```\n这一步配置完后急的访问下，\nhttp://192.168.1.76:8121 访问的是ionic项目的首页\nhttp://192.168.1.76:8121/chcp.json 也要能访问到\n\n6.  以后发布执行``cordova-hcp build``命令，就可以把模板内容替换到chcp.json文件内，因为每次更新或者发布app都会使热更新服务重新生成chcp.json文件内容\n值得注意的是，这条命令一运行，热更新服务的运行窗口也会报相应的日志\n![Screenshot 2018-02-16_20-10-53.png](http://upload-images.jianshu.io/upload_images/6114493-0386c299e9515172.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可见这条命令不仅生成chcp.json内容这么简单。然后再说我发现的一个问题，执行ionic serve 就会chcp.json又改回原来的了，所以打包build的时候要小心一点。\n\n7. build安卓包 ```ionic cordova build android```\n到这一步，编译完android包以后记得再看一下配置，这回要看app里面的。\n![Screenshot 2018-02-16_20-17-13.png](http://upload-images.jianshu.io/upload_images/6114493-11068a510e2fbf35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n别又是什么ngrok内网穿透的地址，这就不好玩了，不对的话，把www里面的chcp.json内容复制过来替换一下。\n\n8.最后一步就直接打开安装好的app了，改一下html内容,用``ionic serve`` 编译一下，把app关掉重新开一下，就可以看到热更新改的东西了。\n注意：我这边测试热更新是用模拟器的，用真的小伙伴注意下你的地址是不是手机可以访问哦！\n\n","slug":"ionic3-热更新android篇","published":1,"updated":"2023-08-18T07:53:45.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllgb7w4y00061twbd7log1tg","content":"<p>这热更新简直了，其实看网上配来配去就这几步，但自己一配就立马遇上很多问题，主要还是细节方面处理不够到位。索性自己也开一篇，防止自己忘了。</p>\n<ol>\n<li><p>进入自己的ionic项目根目录下 启动 ionic服务  <code>ionic serve</code></p>\n</li>\n<li><p>安装ionic native 热更新插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ionic cordova plugin add cordova-hot-code-push-plugin</span><br><span class=\"line\">ionic cordova plugin add cordova-hot-code-push-local-dev-addon</span><br><span class=\"line\">npm install -g cordova-hot-code-push-cli</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当然了还要确保自己已经安装了android平台（没安装可以执行 <code>ionic cordova platform add android</code>）</p>\n<ol>\n<li>在config.xml配置文件中加入下面节点<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;chcp&gt;</span><br><span class=\"line\">&lt;config-file url=&quot;http://192.168.1.76:8121/chcp.json&quot; /&gt;</span><br><span class=\"line\">&lt;native-interface version=&quot;1&quot; /&gt;</span><br><span class=\"line\">&lt;/chcp&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面那个地址是你远程服务器存放www文件夹路径的地址 ，当然我这个地址<a href=\"http://192.168.1.76:8121是通过http-server\" target=\"_blank\" rel=\"noopener\">http://192.168.1.76:8121是通过http-server</a> -p 8121 在www目录下开服务拿的地址。是本地的一个服务。</p>\n<ol>\n<li><p>热更新服务开启 <code>cordova-hcp server</code>  还有如果运行命令正常www目录下会有 有chcp.json和chcp.manifest文件出现。到这一步你就知道为什么第三步要配这个地址了。</p>\n</li>\n<li><p>在项目根目录下新建模板 cordova-hcp.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;content_url&quot;: &quot;http://192.168.1.76:8121&quot;,</span><br><span class=\"line\">&quot;autogenerated&quot;: true,</span><br><span class=\"line\">&quot;update&quot;: &quot;now&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这一步配置完后急的访问下，<br><a href=\"http://192.168.1.76:8121\" target=\"_blank\" rel=\"noopener\">http://192.168.1.76:8121</a> 访问的是ionic项目的首页<br><a href=\"http://192.168.1.76:8121/chcp.json\" target=\"_blank\" rel=\"noopener\">http://192.168.1.76:8121/chcp.json</a> 也要能访问到</p>\n<ol>\n<li>以后发布执行<code>cordova-hcp build</code>命令，就可以把模板内容替换到chcp.json文件内，因为每次更新或者发布app都会使热更新服务重新生成chcp.json文件内容<br>值得注意的是，这条命令一运行，热更新服务的运行窗口也会报相应的日志<br><img src=\"http://upload-images.jianshu.io/upload_images/6114493-0386c299e9515172.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot 2018-02-16_20-10-53.png\"></li>\n</ol>\n<p>可见这条命令不仅生成chcp.json内容这么简单。然后再说我发现的一个问题，执行ionic serve 就会chcp.json又改回原来的了，所以打包build的时候要小心一点。</p>\n<ol>\n<li>build安卓包 <code>ionic cordova build android</code><br>到这一步，编译完android包以后记得再看一下配置，这回要看app里面的。<br><img src=\"http://upload-images.jianshu.io/upload_images/6114493-11068a510e2fbf35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot 2018-02-16_20-17-13.png\"></li>\n</ol>\n<p>别又是什么ngrok内网穿透的地址，这就不好玩了，不对的话，把www里面的chcp.json内容复制过来替换一下。</p>\n<p>8.最后一步就直接打开安装好的app了，改一下html内容,用<code>ionic serve</code> 编译一下，把app关掉重新开一下，就可以看到热更新改的东西了。<br>注意：我这边测试热更新是用模拟器的，用真的小伙伴注意下你的地址是不是手机可以访问哦！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这热更新简直了，其实看网上配来配去就这几步，但自己一配就立马遇上很多问题，主要还是细节方面处理不够到位。索性自己也开一篇，防止自己忘了。</p>\n<ol>\n<li><p>进入自己的ionic项目根目录下 启动 ionic服务  <code>ionic serve</code></p>\n</li>\n<li><p>安装ionic native 热更新插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ionic cordova plugin add cordova-hot-code-push-plugin</span><br><span class=\"line\">ionic cordova plugin add cordova-hot-code-push-local-dev-addon</span><br><span class=\"line\">npm install -g cordova-hot-code-push-cli</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当然了还要确保自己已经安装了android平台（没安装可以执行 <code>ionic cordova platform add android</code>）</p>\n<ol>\n<li>在config.xml配置文件中加入下面节点<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;chcp&gt;</span><br><span class=\"line\">&lt;config-file url=&quot;http://192.168.1.76:8121/chcp.json&quot; /&gt;</span><br><span class=\"line\">&lt;native-interface version=&quot;1&quot; /&gt;</span><br><span class=\"line\">&lt;/chcp&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面那个地址是你远程服务器存放www文件夹路径的地址 ，当然我这个地址<a href=\"http://192.168.1.76:8121是通过http-server\" target=\"_blank\" rel=\"noopener\">http://192.168.1.76:8121是通过http-server</a> -p 8121 在www目录下开服务拿的地址。是本地的一个服务。</p>\n<ol>\n<li><p>热更新服务开启 <code>cordova-hcp server</code>  还有如果运行命令正常www目录下会有 有chcp.json和chcp.manifest文件出现。到这一步你就知道为什么第三步要配这个地址了。</p>\n</li>\n<li><p>在项目根目录下新建模板 cordova-hcp.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;content_url&quot;: &quot;http://192.168.1.76:8121&quot;,</span><br><span class=\"line\">&quot;autogenerated&quot;: true,</span><br><span class=\"line\">&quot;update&quot;: &quot;now&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这一步配置完后急的访问下，<br><a href=\"http://192.168.1.76:8121\" target=\"_blank\" rel=\"noopener\">http://192.168.1.76:8121</a> 访问的是ionic项目的首页<br><a href=\"http://192.168.1.76:8121/chcp.json\" target=\"_blank\" rel=\"noopener\">http://192.168.1.76:8121/chcp.json</a> 也要能访问到</p>\n<ol>\n<li>以后发布执行<code>cordova-hcp build</code>命令，就可以把模板内容替换到chcp.json文件内，因为每次更新或者发布app都会使热更新服务重新生成chcp.json文件内容<br>值得注意的是，这条命令一运行，热更新服务的运行窗口也会报相应的日志<br><img src=\"http://upload-images.jianshu.io/upload_images/6114493-0386c299e9515172.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot 2018-02-16_20-10-53.png\"></li>\n</ol>\n<p>可见这条命令不仅生成chcp.json内容这么简单。然后再说我发现的一个问题，执行ionic serve 就会chcp.json又改回原来的了，所以打包build的时候要小心一点。</p>\n<ol>\n<li>build安卓包 <code>ionic cordova build android</code><br>到这一步，编译完android包以后记得再看一下配置，这回要看app里面的。<br><img src=\"http://upload-images.jianshu.io/upload_images/6114493-11068a510e2fbf35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot 2018-02-16_20-17-13.png\"></li>\n</ol>\n<p>别又是什么ngrok内网穿透的地址，这就不好玩了，不对的话，把www里面的chcp.json内容复制过来替换一下。</p>\n<p>8.最后一步就直接打开安装好的app了，改一下html内容,用<code>ionic serve</code> 编译一下，把app关掉重新开一下，就可以看到热更新改的东西了。<br>注意：我这边测试热更新是用模拟器的，用真的小伙伴注意下你的地址是不是手机可以访问哦！</p>\n"},{"title":"有用的css知识收集","date":"2017-12-07T06:42:12.000Z","_content":"\n**currentColor**\n表示“当前的标签所继承的文字颜色”。\n\n**实战1：背景色镂空技术**去年介绍过“[CSS背景色镂空技术](http://www.zhangxinxu.com/wordpress/?p=3545)”，可以方便控制图标的颜色，很赞的想法。此文章对应demo可以[轻戳这里](http://www.zhangxinxu.com/study/201307/background-color-insert-background-image.html)访问。\n这种设计的目的就是鼠标hover时候，图标可以跟着文字一起变色。如果不考虑兼容性问题，我们可以稍稍改造下，使其实现更加简单：\n```sh\n.icon { \ndisplay: inline-block; width: 16px;\nheight: 20px; \nbackground-image: url(../201307/sprite_icons.png); \nbackground-color: currentColor; /* 该颜色控制图标的颜色 */\n}\n```\n于是，我们想要鼠标hover文字链接，其图标颜色要跟着一起变化，只要改变文字颜色就可以了.\n```sh\n.link:hover { color: #333; }/* 虽然改变的是文字颜色，但是图标颜色也一起变化了 */\n```\nHTML结构如下：\n``<a href=\"##\" class=\"link\"><i class=\"icon icon1\"></i>返回</a>``\n于是鼠标hover就是``#333``\n因为``currentColor``继承文本颜色这个属性,``color``的改变会随之改变``background-color``\n\n## meta\n---\n` <meta http-equiv=\"x-ua-comatible\" content=\"ie=edge\">`\n1.  它代表ie文档的兼容性，告诉文档在**ie**下的兼容模式，\n2.  它是为了兼容一些在ie8下显示不正常，但在老版本浏览器下显示正常的模式\n3.  通过content  可以告诉 ie浏览器 你可以模拟 ie7的形式或者ie8或者ie9、ie11的形式显示网页\n4.  比如`content=\"IE=EmulateIE8\"`以ie8的模式渲染页面\n5.  ie=edge是为了强制ie浏览器以最新的模式渲染页面，能多新，有多新，**（但如果浏览器最高ie8，那也只能用ie8的模式渲染）**。\n\n## 移动端meta必备\n`<meta name=\"view-port\" content=\"width=device-width,initial-scale=1\">`\n\n## 对于ie低版本兼容\n- css里 \\0  大家都懂\n- html里\n```sh\n<!--[if lte IE8]>\n<p>如果浏览器小于等于ie8，那么我提示你该升级了</p>\n<![endif]-->\n```\n- 格式不多说  gt 大于、lt小于、gte大于等于、lte小于等于\n\n\n## px em rem\n1. px像素\n2. em 相对父元素 ，如果没设会一直往上找，很强大但会导致混乱\n3. rem 相对html，但rem ie678不支持\n\n```sh\nhtml {\nfont-size: 62.5%;\ncolor: #222;\n}\n```\n如此一个rem会是10px \n\n## 取消选中\ncss3属性  顺序不能乱，不然谷歌没有，火狐有\n```sh\n::-moz-selection{\nbackground-color: #b3d4fc;\ntext-shadow: none;\n}\n::selection{\nbackground-color: #b3d4fc;\ntext-shadow: none;\n}\n```\n## 隐藏文字\n```sh\n.text-hide{\nfont:0/0 a;\ncolor: transparent;\ntext-shadow: none;\nbackground-color: transparent;\nborder: 0;\n}\n```\n注意其中的text-hide 是为了隐藏文字，方便seo识别图片\n\n## 清除浮动\n```sh\n.clearfix:after,.clearfix:before{\ncontent:' ';\ndisplay: table;\n}\n.clearfix:after{\nclear:both;\n}\n```\n这种方法可以防止margin的叠加\n\n\n\n## before 利用\n```sh\n.notice a:first-child:before{\ncontent: '最新公告：\\00a0\\00a0';\ncolor: #aaa;\n}\n```\n其中`\\00a0\\00a0`是不换行的空白字符,因为content没法用`&nbsp`添加空格\n\n## 文字不换行,多出省略\n```sh\n.notice a:first-child{\ntext-overflow: ellipsis;\noverflow: hidden;\nwhite-space: nowrap;\n}\n```\n\n## 设备信息\n用户代理字符串在控制台输入`navigator.userAgent`获得相关设备信息\n\n## 文字超出隐藏\n``` sh\n{\noverflow: hidden;\nwhite-space: nowrap;\ntext-overflow: ellipsis;\n}\n```\n## 图标随文字变色设计\n**背景色镂空技术** 利用 \n**currentColor**表示“当前的标签所继承的文字颜色”。\n这种设计的目的就是鼠标hover时候，图标可以跟着文字一起变色。\n```sh\n.icon {\ndisplay: inline-block;\nwidth: 16px; height: 20px;\nbackground-image: url(../201307/sprite_icons.png);\nbackground-color: currentColor; /* 该颜色控制图标的颜色 */\n}\n```\n于是，我们想要鼠标hover文字链接，其图标颜色要跟着一起变化，只要改变文字颜色就可以了：\n```sh\n.link:hover { \ncolor: #333; \n}\n```\n\n因为``currentColor``继承文本颜色这个属性,``color``的改变会随之改变``background-color``\n\n## margin-top溢出问题：\n给元素盒子一个垂直外边距margin-top，父元素盒子也会往下走margin-top的值。\n有以下几点解决方案\n1.修改父元素高度，增加padding-top                     好用，但间距变成margin+padding\n2.为父元素添加overflow：hidden                            特别好用，相当于子元素向下移，但范围和子元素大小要注意\n3.为父元素或者子元素申明浮动（float：left）            可以用，但会改变父子的定位，会浮起来\n4.为父元素添加border                                            好用，但会改变边框\n\n## 毛玻璃特效\ncss代码\n```sh\n.blur {    \n-webkit-filter: blur(20px); /* Chrome, Opera */\n-moz-filter: blur(20px);\n-ms-filter: blur(20px);    \nfilter: blur(20px);    \n}\n/**--图片上的div--**/\n.top-bg{\nposition: absolute;\ntop: 0;\nleft: 0;\nwidth: 100%;\nheight: 100%;\nz-index: -1;\noverflow: hidden;\n}\n.top-bg img{\ntransform: scale(4.0);\n}\n```\nhtml代码\n```sh\n<div>  <!--父层-->\n<div class=\"top-bg blur\"> <!--背景层-->\n![](./img/37403260_p0.png)  <!-- 图片层-->\n</div>\n</div>\n```\n","source":"_posts/有用的css知识收集.md","raw":"---\ntitle: 有用的css知识收集\ndate: 2017-12-07 14:42:12\ncategories:\n- css\n---\n\n**currentColor**\n表示“当前的标签所继承的文字颜色”。\n\n**实战1：背景色镂空技术**去年介绍过“[CSS背景色镂空技术](http://www.zhangxinxu.com/wordpress/?p=3545)”，可以方便控制图标的颜色，很赞的想法。此文章对应demo可以[轻戳这里](http://www.zhangxinxu.com/study/201307/background-color-insert-background-image.html)访问。\n这种设计的目的就是鼠标hover时候，图标可以跟着文字一起变色。如果不考虑兼容性问题，我们可以稍稍改造下，使其实现更加简单：\n```sh\n.icon { \ndisplay: inline-block; width: 16px;\nheight: 20px; \nbackground-image: url(../201307/sprite_icons.png); \nbackground-color: currentColor; /* 该颜色控制图标的颜色 */\n}\n```\n于是，我们想要鼠标hover文字链接，其图标颜色要跟着一起变化，只要改变文字颜色就可以了.\n```sh\n.link:hover { color: #333; }/* 虽然改变的是文字颜色，但是图标颜色也一起变化了 */\n```\nHTML结构如下：\n``<a href=\"##\" class=\"link\"><i class=\"icon icon1\"></i>返回</a>``\n于是鼠标hover就是``#333``\n因为``currentColor``继承文本颜色这个属性,``color``的改变会随之改变``background-color``\n\n## meta\n---\n` <meta http-equiv=\"x-ua-comatible\" content=\"ie=edge\">`\n1.  它代表ie文档的兼容性，告诉文档在**ie**下的兼容模式，\n2.  它是为了兼容一些在ie8下显示不正常，但在老版本浏览器下显示正常的模式\n3.  通过content  可以告诉 ie浏览器 你可以模拟 ie7的形式或者ie8或者ie9、ie11的形式显示网页\n4.  比如`content=\"IE=EmulateIE8\"`以ie8的模式渲染页面\n5.  ie=edge是为了强制ie浏览器以最新的模式渲染页面，能多新，有多新，**（但如果浏览器最高ie8，那也只能用ie8的模式渲染）**。\n\n## 移动端meta必备\n`<meta name=\"view-port\" content=\"width=device-width,initial-scale=1\">`\n\n## 对于ie低版本兼容\n- css里 \\0  大家都懂\n- html里\n```sh\n<!--[if lte IE8]>\n<p>如果浏览器小于等于ie8，那么我提示你该升级了</p>\n<![endif]-->\n```\n- 格式不多说  gt 大于、lt小于、gte大于等于、lte小于等于\n\n\n## px em rem\n1. px像素\n2. em 相对父元素 ，如果没设会一直往上找，很强大但会导致混乱\n3. rem 相对html，但rem ie678不支持\n\n```sh\nhtml {\nfont-size: 62.5%;\ncolor: #222;\n}\n```\n如此一个rem会是10px \n\n## 取消选中\ncss3属性  顺序不能乱，不然谷歌没有，火狐有\n```sh\n::-moz-selection{\nbackground-color: #b3d4fc;\ntext-shadow: none;\n}\n::selection{\nbackground-color: #b3d4fc;\ntext-shadow: none;\n}\n```\n## 隐藏文字\n```sh\n.text-hide{\nfont:0/0 a;\ncolor: transparent;\ntext-shadow: none;\nbackground-color: transparent;\nborder: 0;\n}\n```\n注意其中的text-hide 是为了隐藏文字，方便seo识别图片\n\n## 清除浮动\n```sh\n.clearfix:after,.clearfix:before{\ncontent:' ';\ndisplay: table;\n}\n.clearfix:after{\nclear:both;\n}\n```\n这种方法可以防止margin的叠加\n\n\n\n## before 利用\n```sh\n.notice a:first-child:before{\ncontent: '最新公告：\\00a0\\00a0';\ncolor: #aaa;\n}\n```\n其中`\\00a0\\00a0`是不换行的空白字符,因为content没法用`&nbsp`添加空格\n\n## 文字不换行,多出省略\n```sh\n.notice a:first-child{\ntext-overflow: ellipsis;\noverflow: hidden;\nwhite-space: nowrap;\n}\n```\n\n## 设备信息\n用户代理字符串在控制台输入`navigator.userAgent`获得相关设备信息\n\n## 文字超出隐藏\n``` sh\n{\noverflow: hidden;\nwhite-space: nowrap;\ntext-overflow: ellipsis;\n}\n```\n## 图标随文字变色设计\n**背景色镂空技术** 利用 \n**currentColor**表示“当前的标签所继承的文字颜色”。\n这种设计的目的就是鼠标hover时候，图标可以跟着文字一起变色。\n```sh\n.icon {\ndisplay: inline-block;\nwidth: 16px; height: 20px;\nbackground-image: url(../201307/sprite_icons.png);\nbackground-color: currentColor; /* 该颜色控制图标的颜色 */\n}\n```\n于是，我们想要鼠标hover文字链接，其图标颜色要跟着一起变化，只要改变文字颜色就可以了：\n```sh\n.link:hover { \ncolor: #333; \n}\n```\n\n因为``currentColor``继承文本颜色这个属性,``color``的改变会随之改变``background-color``\n\n## margin-top溢出问题：\n给元素盒子一个垂直外边距margin-top，父元素盒子也会往下走margin-top的值。\n有以下几点解决方案\n1.修改父元素高度，增加padding-top                     好用，但间距变成margin+padding\n2.为父元素添加overflow：hidden                            特别好用，相当于子元素向下移，但范围和子元素大小要注意\n3.为父元素或者子元素申明浮动（float：left）            可以用，但会改变父子的定位，会浮起来\n4.为父元素添加border                                            好用，但会改变边框\n\n## 毛玻璃特效\ncss代码\n```sh\n.blur {    \n-webkit-filter: blur(20px); /* Chrome, Opera */\n-moz-filter: blur(20px);\n-ms-filter: blur(20px);    \nfilter: blur(20px);    \n}\n/**--图片上的div--**/\n.top-bg{\nposition: absolute;\ntop: 0;\nleft: 0;\nwidth: 100%;\nheight: 100%;\nz-index: -1;\noverflow: hidden;\n}\n.top-bg img{\ntransform: scale(4.0);\n}\n```\nhtml代码\n```sh\n<div>  <!--父层-->\n<div class=\"top-bg blur\"> <!--背景层-->\n![](./img/37403260_p0.png)  <!-- 图片层-->\n</div>\n</div>\n```\n","slug":"有用的css知识收集","published":1,"updated":"2023-08-18T07:53:45.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllgb7w51000a1twb04aoflzp","content":"<p><strong>currentColor</strong><br>表示“当前的标签所继承的文字颜色”。</p>\n<p><strong>实战1：背景色镂空技术</strong>去年介绍过“<a href=\"http://www.zhangxinxu.com/wordpress/?p=3545\" target=\"_blank\" rel=\"noopener\">CSS背景色镂空技术</a>”，可以方便控制图标的颜色，很赞的想法。此文章对应demo可以<a href=\"http://www.zhangxinxu.com/study/201307/background-color-insert-background-image.html\" target=\"_blank\" rel=\"noopener\">轻戳这里</a>访问。<br>这种设计的目的就是鼠标hover时候，图标可以跟着文字一起变色。如果不考虑兼容性问题，我们可以稍稍改造下，使其实现更加简单：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.icon &#123; </span><br><span class=\"line\">display: inline-block; width: 16px;</span><br><span class=\"line\">height: 20px; </span><br><span class=\"line\">background-image: url(../201307/sprite_icons.png); </span><br><span class=\"line\">background-color: currentColor; /* 该颜色控制图标的颜色 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>于是，我们想要鼠标hover文字链接，其图标颜色要跟着一起变化，只要改变文字颜色就可以了.<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.link:hover &#123; color: <span class=\"comment\">#333; &#125;/* 虽然改变的是文字颜色，但是图标颜色也一起变化了 */</span></span><br></pre></td></tr></table></figure></p>\n<p>HTML结构如下：<br><code>&lt;a href=&quot;##&quot; class=&quot;link&quot;&gt;&lt;i class=&quot;icon icon1&quot;&gt;&lt;/i&gt;返回&lt;/a&gt;</code><br>于是鼠标hover就是<code>#333</code><br>因为<code>currentColor</code>继承文本颜色这个属性,<code>color</code>的改变会随之改变<code>background-color</code></p>\n<h2 id=\"meta\"><a href=\"#meta\" class=\"headerlink\" title=\"meta\"></a>meta</h2><hr>\n<p><code>&lt;meta http-equiv=&quot;x-ua-comatible&quot; content=&quot;ie=edge&quot;&gt;</code></p>\n<ol>\n<li>它代表ie文档的兼容性，告诉文档在<strong>ie</strong>下的兼容模式，</li>\n<li>它是为了兼容一些在ie8下显示不正常，但在老版本浏览器下显示正常的模式</li>\n<li>通过content  可以告诉 ie浏览器 你可以模拟 ie7的形式或者ie8或者ie9、ie11的形式显示网页</li>\n<li>比如<code>content=&quot;IE=EmulateIE8&quot;</code>以ie8的模式渲染页面</li>\n<li>ie=edge是为了强制ie浏览器以最新的模式渲染页面，能多新，有多新，<strong>（但如果浏览器最高ie8，那也只能用ie8的模式渲染）</strong>。</li>\n</ol>\n<h2 id=\"移动端meta必备\"><a href=\"#移动端meta必备\" class=\"headerlink\" title=\"移动端meta必备\"></a>移动端meta必备</h2><p><code>&lt;meta name=&quot;view-port&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</code></p>\n<h2 id=\"对于ie低版本兼容\"><a href=\"#对于ie低版本兼容\" class=\"headerlink\" title=\"对于ie低版本兼容\"></a>对于ie低版本兼容</h2><ul>\n<li>css里 \\0  大家都懂</li>\n<li><p>html里</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--[<span class=\"keyword\">if</span> lte IE8]&gt;</span><br><span class=\"line\">&lt;p&gt;如果浏览器小于等于ie8，那么我提示你该升级了&lt;/p&gt;</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>格式不多说  gt 大于、lt小于、gte大于等于、lte小于等于</p>\n</li>\n</ul>\n<h2 id=\"px-em-rem\"><a href=\"#px-em-rem\" class=\"headerlink\" title=\"px em rem\"></a>px em rem</h2><ol>\n<li>px像素</li>\n<li>em 相对父元素 ，如果没设会一直往上找，很强大但会导致混乱</li>\n<li>rem 相对html，但rem ie678不支持</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;</span><br><span class=\"line\">font-size: 62.5%;</span><br><span class=\"line\">color: <span class=\"comment\">#222;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如此一个rem会是10px </p>\n<h2 id=\"取消选中\"><a href=\"#取消选中\" class=\"headerlink\" title=\"取消选中\"></a>取消选中</h2><p>css3属性  顺序不能乱，不然谷歌没有，火狐有<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">::-moz-selection&#123;</span><br><span class=\"line\">background-color: <span class=\"comment\">#b3d4fc;</span></span><br><span class=\"line\">text-shadow: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">::selection&#123;</span><br><span class=\"line\">background-color: <span class=\"comment\">#b3d4fc;</span></span><br><span class=\"line\">text-shadow: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"隐藏文字\"><a href=\"#隐藏文字\" class=\"headerlink\" title=\"隐藏文字\"></a>隐藏文字</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text-hide&#123;</span><br><span class=\"line\">font:0/0 a;</span><br><span class=\"line\">color: transparent;</span><br><span class=\"line\">text-shadow: none;</span><br><span class=\"line\">background-color: transparent;</span><br><span class=\"line\">border: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意其中的text-hide 是为了隐藏文字，方便seo识别图片</p>\n<h2 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.clearfix:after,.clearfix:before&#123;</span><br><span class=\"line\">content:<span class=\"string\">' '</span>;</span><br><span class=\"line\">display: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix:after&#123;</span><br><span class=\"line\">clear:both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法可以防止margin的叠加</p>\n<h2 id=\"before-利用\"><a href=\"#before-利用\" class=\"headerlink\" title=\"before 利用\"></a>before 利用</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.notice a:first-child:before&#123;</span><br><span class=\"line\">content: <span class=\"string\">'最新公告：\\00a0\\00a0'</span>;</span><br><span class=\"line\">color: <span class=\"comment\">#aaa;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<code>\\00a0\\00a0</code>是不换行的空白字符,因为content没法用<code>&amp;nbsp</code>添加空格</p>\n<h2 id=\"文字不换行-多出省略\"><a href=\"#文字不换行-多出省略\" class=\"headerlink\" title=\"文字不换行,多出省略\"></a>文字不换行,多出省略</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.notice a:first-child&#123;</span><br><span class=\"line\">text-overflow: ellipsis;</span><br><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">white-space: nowrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"设备信息\"><a href=\"#设备信息\" class=\"headerlink\" title=\"设备信息\"></a>设备信息</h2><p>用户代理字符串在控制台输入<code>navigator.userAgent</code>获得相关设备信息</p>\n<h2 id=\"文字超出隐藏\"><a href=\"#文字超出隐藏\" class=\"headerlink\" title=\"文字超出隐藏\"></a>文字超出隐藏</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">white-space: nowrap;</span><br><span class=\"line\">text-overflow: ellipsis;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"图标随文字变色设计\"><a href=\"#图标随文字变色设计\" class=\"headerlink\" title=\"图标随文字变色设计\"></a>图标随文字变色设计</h2><p><strong>背景色镂空技术</strong> 利用<br><strong>currentColor</strong>表示“当前的标签所继承的文字颜色”。<br>这种设计的目的就是鼠标hover时候，图标可以跟着文字一起变色。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.icon &#123;</span><br><span class=\"line\">display: inline-block;</span><br><span class=\"line\">width: 16px; height: 20px;</span><br><span class=\"line\">background-image: url(../201307/sprite_icons.png);</span><br><span class=\"line\">background-color: currentColor; /* 该颜色控制图标的颜色 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>于是，我们想要鼠标hover文字链接，其图标颜色要跟着一起变化，只要改变文字颜色就可以了：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.link:hover &#123; </span><br><span class=\"line\">color: <span class=\"comment\">#333; </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为<code>currentColor</code>继承文本颜色这个属性,<code>color</code>的改变会随之改变<code>background-color</code></p>\n<h2 id=\"margin-top溢出问题：\"><a href=\"#margin-top溢出问题：\" class=\"headerlink\" title=\"margin-top溢出问题：\"></a>margin-top溢出问题：</h2><p>给元素盒子一个垂直外边距margin-top，父元素盒子也会往下走margin-top的值。<br>有以下几点解决方案<br>1.修改父元素高度，增加padding-top                     好用，但间距变成margin+padding<br>2.为父元素添加overflow：hidden                            特别好用，相当于子元素向下移，但范围和子元素大小要注意<br>3.为父元素或者子元素申明浮动（float：left）            可以用，但会改变父子的定位，会浮起来<br>4.为父元素添加border                                            好用，但会改变边框</p>\n<h2 id=\"毛玻璃特效\"><a href=\"#毛玻璃特效\" class=\"headerlink\" title=\"毛玻璃特效\"></a>毛玻璃特效</h2><p>css代码<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.blur &#123;    </span><br><span class=\"line\">-webkit-filter: blur(20px); /* Chrome, Opera */</span><br><span class=\"line\">-moz-filter: blur(20px);</span><br><span class=\"line\">-ms-filter: blur(20px);    </span><br><span class=\"line\">filter: blur(20px);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**--图片上的div--**/</span><br><span class=\"line\">.top-bg&#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">width: 100%;</span><br><span class=\"line\">height: 100%;</span><br><span class=\"line\">z-index: -1;</span><br><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.top-bg img&#123;</span><br><span class=\"line\">transform: scale(4.0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>html代码<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;  &lt;!--父层--&gt;</span><br><span class=\"line\">&lt;div class=<span class=\"string\">\"top-bg blur\"</span>&gt; &lt;!--背景层--&gt;</span><br><span class=\"line\">![](./img/37403260_p0.png)  &lt;!-- 图片层--&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>currentColor</strong><br>表示“当前的标签所继承的文字颜色”。</p>\n<p><strong>实战1：背景色镂空技术</strong>去年介绍过“<a href=\"http://www.zhangxinxu.com/wordpress/?p=3545\" target=\"_blank\" rel=\"noopener\">CSS背景色镂空技术</a>”，可以方便控制图标的颜色，很赞的想法。此文章对应demo可以<a href=\"http://www.zhangxinxu.com/study/201307/background-color-insert-background-image.html\" target=\"_blank\" rel=\"noopener\">轻戳这里</a>访问。<br>这种设计的目的就是鼠标hover时候，图标可以跟着文字一起变色。如果不考虑兼容性问题，我们可以稍稍改造下，使其实现更加简单：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.icon &#123; </span><br><span class=\"line\">display: inline-block; width: 16px;</span><br><span class=\"line\">height: 20px; </span><br><span class=\"line\">background-image: url(../201307/sprite_icons.png); </span><br><span class=\"line\">background-color: currentColor; /* 该颜色控制图标的颜色 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>于是，我们想要鼠标hover文字链接，其图标颜色要跟着一起变化，只要改变文字颜色就可以了.<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.link:hover &#123; color: <span class=\"comment\">#333; &#125;/* 虽然改变的是文字颜色，但是图标颜色也一起变化了 */</span></span><br></pre></td></tr></table></figure></p>\n<p>HTML结构如下：<br><code>&lt;a href=&quot;##&quot; class=&quot;link&quot;&gt;&lt;i class=&quot;icon icon1&quot;&gt;&lt;/i&gt;返回&lt;/a&gt;</code><br>于是鼠标hover就是<code>#333</code><br>因为<code>currentColor</code>继承文本颜色这个属性,<code>color</code>的改变会随之改变<code>background-color</code></p>\n<h2 id=\"meta\"><a href=\"#meta\" class=\"headerlink\" title=\"meta\"></a>meta</h2><hr>\n<p><code>&lt;meta http-equiv=&quot;x-ua-comatible&quot; content=&quot;ie=edge&quot;&gt;</code></p>\n<ol>\n<li>它代表ie文档的兼容性，告诉文档在<strong>ie</strong>下的兼容模式，</li>\n<li>它是为了兼容一些在ie8下显示不正常，但在老版本浏览器下显示正常的模式</li>\n<li>通过content  可以告诉 ie浏览器 你可以模拟 ie7的形式或者ie8或者ie9、ie11的形式显示网页</li>\n<li>比如<code>content=&quot;IE=EmulateIE8&quot;</code>以ie8的模式渲染页面</li>\n<li>ie=edge是为了强制ie浏览器以最新的模式渲染页面，能多新，有多新，<strong>（但如果浏览器最高ie8，那也只能用ie8的模式渲染）</strong>。</li>\n</ol>\n<h2 id=\"移动端meta必备\"><a href=\"#移动端meta必备\" class=\"headerlink\" title=\"移动端meta必备\"></a>移动端meta必备</h2><p><code>&lt;meta name=&quot;view-port&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</code></p>\n<h2 id=\"对于ie低版本兼容\"><a href=\"#对于ie低版本兼容\" class=\"headerlink\" title=\"对于ie低版本兼容\"></a>对于ie低版本兼容</h2><ul>\n<li>css里 \\0  大家都懂</li>\n<li><p>html里</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--[<span class=\"keyword\">if</span> lte IE8]&gt;</span><br><span class=\"line\">&lt;p&gt;如果浏览器小于等于ie8，那么我提示你该升级了&lt;/p&gt;</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>格式不多说  gt 大于、lt小于、gte大于等于、lte小于等于</p>\n</li>\n</ul>\n<h2 id=\"px-em-rem\"><a href=\"#px-em-rem\" class=\"headerlink\" title=\"px em rem\"></a>px em rem</h2><ol>\n<li>px像素</li>\n<li>em 相对父元素 ，如果没设会一直往上找，很强大但会导致混乱</li>\n<li>rem 相对html，但rem ie678不支持</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;</span><br><span class=\"line\">font-size: 62.5%;</span><br><span class=\"line\">color: <span class=\"comment\">#222;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如此一个rem会是10px </p>\n<h2 id=\"取消选中\"><a href=\"#取消选中\" class=\"headerlink\" title=\"取消选中\"></a>取消选中</h2><p>css3属性  顺序不能乱，不然谷歌没有，火狐有<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">::-moz-selection&#123;</span><br><span class=\"line\">background-color: <span class=\"comment\">#b3d4fc;</span></span><br><span class=\"line\">text-shadow: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">::selection&#123;</span><br><span class=\"line\">background-color: <span class=\"comment\">#b3d4fc;</span></span><br><span class=\"line\">text-shadow: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"隐藏文字\"><a href=\"#隐藏文字\" class=\"headerlink\" title=\"隐藏文字\"></a>隐藏文字</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text-hide&#123;</span><br><span class=\"line\">font:0/0 a;</span><br><span class=\"line\">color: transparent;</span><br><span class=\"line\">text-shadow: none;</span><br><span class=\"line\">background-color: transparent;</span><br><span class=\"line\">border: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意其中的text-hide 是为了隐藏文字，方便seo识别图片</p>\n<h2 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.clearfix:after,.clearfix:before&#123;</span><br><span class=\"line\">content:<span class=\"string\">' '</span>;</span><br><span class=\"line\">display: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix:after&#123;</span><br><span class=\"line\">clear:both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法可以防止margin的叠加</p>\n<h2 id=\"before-利用\"><a href=\"#before-利用\" class=\"headerlink\" title=\"before 利用\"></a>before 利用</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.notice a:first-child:before&#123;</span><br><span class=\"line\">content: <span class=\"string\">'最新公告：\\00a0\\00a0'</span>;</span><br><span class=\"line\">color: <span class=\"comment\">#aaa;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<code>\\00a0\\00a0</code>是不换行的空白字符,因为content没法用<code>&amp;nbsp</code>添加空格</p>\n<h2 id=\"文字不换行-多出省略\"><a href=\"#文字不换行-多出省略\" class=\"headerlink\" title=\"文字不换行,多出省略\"></a>文字不换行,多出省略</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.notice a:first-child&#123;</span><br><span class=\"line\">text-overflow: ellipsis;</span><br><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">white-space: nowrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"设备信息\"><a href=\"#设备信息\" class=\"headerlink\" title=\"设备信息\"></a>设备信息</h2><p>用户代理字符串在控制台输入<code>navigator.userAgent</code>获得相关设备信息</p>\n<h2 id=\"文字超出隐藏\"><a href=\"#文字超出隐藏\" class=\"headerlink\" title=\"文字超出隐藏\"></a>文字超出隐藏</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">white-space: nowrap;</span><br><span class=\"line\">text-overflow: ellipsis;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"图标随文字变色设计\"><a href=\"#图标随文字变色设计\" class=\"headerlink\" title=\"图标随文字变色设计\"></a>图标随文字变色设计</h2><p><strong>背景色镂空技术</strong> 利用<br><strong>currentColor</strong>表示“当前的标签所继承的文字颜色”。<br>这种设计的目的就是鼠标hover时候，图标可以跟着文字一起变色。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.icon &#123;</span><br><span class=\"line\">display: inline-block;</span><br><span class=\"line\">width: 16px; height: 20px;</span><br><span class=\"line\">background-image: url(../201307/sprite_icons.png);</span><br><span class=\"line\">background-color: currentColor; /* 该颜色控制图标的颜色 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>于是，我们想要鼠标hover文字链接，其图标颜色要跟着一起变化，只要改变文字颜色就可以了：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.link:hover &#123; </span><br><span class=\"line\">color: <span class=\"comment\">#333; </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为<code>currentColor</code>继承文本颜色这个属性,<code>color</code>的改变会随之改变<code>background-color</code></p>\n<h2 id=\"margin-top溢出问题：\"><a href=\"#margin-top溢出问题：\" class=\"headerlink\" title=\"margin-top溢出问题：\"></a>margin-top溢出问题：</h2><p>给元素盒子一个垂直外边距margin-top，父元素盒子也会往下走margin-top的值。<br>有以下几点解决方案<br>1.修改父元素高度，增加padding-top                     好用，但间距变成margin+padding<br>2.为父元素添加overflow：hidden                            特别好用，相当于子元素向下移，但范围和子元素大小要注意<br>3.为父元素或者子元素申明浮动（float：left）            可以用，但会改变父子的定位，会浮起来<br>4.为父元素添加border                                            好用，但会改变边框</p>\n<h2 id=\"毛玻璃特效\"><a href=\"#毛玻璃特效\" class=\"headerlink\" title=\"毛玻璃特效\"></a>毛玻璃特效</h2><p>css代码<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.blur &#123;    </span><br><span class=\"line\">-webkit-filter: blur(20px); /* Chrome, Opera */</span><br><span class=\"line\">-moz-filter: blur(20px);</span><br><span class=\"line\">-ms-filter: blur(20px);    </span><br><span class=\"line\">filter: blur(20px);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**--图片上的div--**/</span><br><span class=\"line\">.top-bg&#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">width: 100%;</span><br><span class=\"line\">height: 100%;</span><br><span class=\"line\">z-index: -1;</span><br><span class=\"line\">overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.top-bg img&#123;</span><br><span class=\"line\">transform: scale(4.0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>html代码<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;  &lt;!--父层--&gt;</span><br><span class=\"line\">&lt;div class=<span class=\"string\">\"top-bg blur\"</span>&gt; &lt;!--背景层--&gt;</span><br><span class=\"line\">![](./img/37403260_p0.png)  &lt;!-- 图片层--&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"ionic篇学习笔记-部署项目编","date":"2018-03-18T05:35:00.000Z","_content":"##1.启动ionic项目\n首先是随便都能查到的npm安装命令\n```\nnpm install -g ionic cordova\nionic start myIonicProject blank\ncd myIonicProject\nionic serve\n```\n看一下项目目录，了解一下\n首先src里存放的ionic的angular代码\n其次www 里存放的是src里的typescript代码编译后的注入的js代码，当然还有其他的东西，比如说图片，sass编译后注入的css代码，都是用webpack打包编译生成。\nwww很重要，就算ionic打包android安装包也是把www移过去。\n##2.配置移动开发环境\n其中ios的开发环境如果是苹果电脑就不用配了，ios只能在苹果上开发。\nandroid的环境配置网上一大堆，就是安装sdk配下环境变量。如果想要贪便宜，可以直接下个androidStudio，神器啊，快速帮助新手配置环境。\n##3.打包android安装包\n首先先给ionic项目添加支持的平台，在项目目录下运行命令行\n```\nionic cordova platform\n```\n能看到一大串支持的平台列表(android、ios、browser)和已经安装的平台\n运行命令安装ionic的android平台\n```\nionic cordova platform add android\n```\n添加完以后，可以看到目录下的platforms文件夹下多了个android文件夹，里面就是android项目代码，然后再运行命令build一下android平台的代码。\n```\nionic cordova build android\n```\n这行命令行就是为了更新android平台下的代码，其中就有把www替换android项目里的www。\n\n在mac下build完以后，最好进到上一层目录, sudo chmod -R 777 myIonicProject\n不然可能androidStudio没权限打开，windows下也应该用管理员权限设置一下。\n\n值得一提的是，这个build很多人都会出现问题，如果是android环境没配好，确保你的androidStudio能新建一个项目并成功跑起来。然后如果对android开发不太熟，不知道gradle怎么用怎么打包的筒子（作者我～～）,直接用androidStudio打开ionic编译后生成的android项目，就是那个platform下的android文件夹。androidStudio会自动帮你构建项目。\n\n我在androidStudio编译项目时遇到了一些问题，如果编译失败，除了网速问题（科学上网）以外，还遇到过\n![Jietu20171218-134359@2x.png](https://upload-images.jianshu.io/upload_images/6114493-80d4abe9ba203c9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这种问题，现在ionic build项目我已经没遇见了，前几个月build一次遇见一次。\n直接去 https://www.imooc.com/article/21867 看，找到问题6就行了。\n\nandroid项目导入androidStudio没问题以后，直接运行，就能看到自己的app跑起来了。\n\nionic项目开发起来很方便，但是真正难的就是他的底层环境配置。也不能说他坑，因为他是基于cordova开发的，cordova配置环境本来就很坑。打个cordova的jar包用官方的命令根本打不起来，遇上了好多问题，最后在androidStudio的帮助下才成功。\n\n","source":"_posts/ionic篇学习笔记-部署项目编.md","raw":"---\ntitle: ionic篇学习笔记-部署项目编\ndate: 2018-03-18 13:35:00\ncategories:\n- ionic\ntags:\n- 部署\n---\n##1.启动ionic项目\n首先是随便都能查到的npm安装命令\n```\nnpm install -g ionic cordova\nionic start myIonicProject blank\ncd myIonicProject\nionic serve\n```\n看一下项目目录，了解一下\n首先src里存放的ionic的angular代码\n其次www 里存放的是src里的typescript代码编译后的注入的js代码，当然还有其他的东西，比如说图片，sass编译后注入的css代码，都是用webpack打包编译生成。\nwww很重要，就算ionic打包android安装包也是把www移过去。\n##2.配置移动开发环境\n其中ios的开发环境如果是苹果电脑就不用配了，ios只能在苹果上开发。\nandroid的环境配置网上一大堆，就是安装sdk配下环境变量。如果想要贪便宜，可以直接下个androidStudio，神器啊，快速帮助新手配置环境。\n##3.打包android安装包\n首先先给ionic项目添加支持的平台，在项目目录下运行命令行\n```\nionic cordova platform\n```\n能看到一大串支持的平台列表(android、ios、browser)和已经安装的平台\n运行命令安装ionic的android平台\n```\nionic cordova platform add android\n```\n添加完以后，可以看到目录下的platforms文件夹下多了个android文件夹，里面就是android项目代码，然后再运行命令build一下android平台的代码。\n```\nionic cordova build android\n```\n这行命令行就是为了更新android平台下的代码，其中就有把www替换android项目里的www。\n\n在mac下build完以后，最好进到上一层目录, sudo chmod -R 777 myIonicProject\n不然可能androidStudio没权限打开，windows下也应该用管理员权限设置一下。\n\n值得一提的是，这个build很多人都会出现问题，如果是android环境没配好，确保你的androidStudio能新建一个项目并成功跑起来。然后如果对android开发不太熟，不知道gradle怎么用怎么打包的筒子（作者我～～）,直接用androidStudio打开ionic编译后生成的android项目，就是那个platform下的android文件夹。androidStudio会自动帮你构建项目。\n\n我在androidStudio编译项目时遇到了一些问题，如果编译失败，除了网速问题（科学上网）以外，还遇到过\n![Jietu20171218-134359@2x.png](https://upload-images.jianshu.io/upload_images/6114493-80d4abe9ba203c9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这种问题，现在ionic build项目我已经没遇见了，前几个月build一次遇见一次。\n直接去 https://www.imooc.com/article/21867 看，找到问题6就行了。\n\nandroid项目导入androidStudio没问题以后，直接运行，就能看到自己的app跑起来了。\n\nionic项目开发起来很方便，但是真正难的就是他的底层环境配置。也不能说他坑，因为他是基于cordova开发的，cordova配置环境本来就很坑。打个cordova的jar包用官方的命令根本打不起来，遇上了好多问题，最后在androidStudio的帮助下才成功。\n\n","slug":"ionic篇学习笔记-部署项目编","published":1,"updated":"2023-08-18T07:53:45.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllgb7w53000b1twbogi7jwg3","content":"<p>##1.启动ionic项目<br>首先是随便都能查到的npm安装命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g ionic cordova</span><br><span class=\"line\">ionic start myIonicProject blank</span><br><span class=\"line\">cd myIonicProject</span><br><span class=\"line\">ionic serve</span><br></pre></td></tr></table></figure></p>\n<p>看一下项目目录，了解一下<br>首先src里存放的ionic的angular代码<br>其次www 里存放的是src里的typescript代码编译后的注入的js代码，当然还有其他的东西，比如说图片，sass编译后注入的css代码，都是用webpack打包编译生成。<br>www很重要，就算ionic打包android安装包也是把www移过去。</p>\n<p>##2.配置移动开发环境<br>其中ios的开发环境如果是苹果电脑就不用配了，ios只能在苹果上开发。<br>android的环境配置网上一大堆，就是安装sdk配下环境变量。如果想要贪便宜，可以直接下个androidStudio，神器啊，快速帮助新手配置环境。</p>\n<p>##3.打包android安装包<br>首先先给ionic项目添加支持的平台，在项目目录下运行命令行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ionic cordova platform</span><br></pre></td></tr></table></figure></p>\n<p>能看到一大串支持的平台列表(android、ios、browser)和已经安装的平台<br>运行命令安装ionic的android平台<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ionic cordova platform add android</span><br></pre></td></tr></table></figure></p>\n<p>添加完以后，可以看到目录下的platforms文件夹下多了个android文件夹，里面就是android项目代码，然后再运行命令build一下android平台的代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ionic cordova build android</span><br></pre></td></tr></table></figure></p>\n<p>这行命令行就是为了更新android平台下的代码，其中就有把www替换android项目里的www。</p>\n<p>在mac下build完以后，最好进到上一层目录, sudo chmod -R 777 myIonicProject<br>不然可能androidStudio没权限打开，windows下也应该用管理员权限设置一下。</p>\n<p>值得一提的是，这个build很多人都会出现问题，如果是android环境没配好，确保你的androidStudio能新建一个项目并成功跑起来。然后如果对android开发不太熟，不知道gradle怎么用怎么打包的筒子（作者我～～）,直接用androidStudio打开ionic编译后生成的android项目，就是那个platform下的android文件夹。androidStudio会自动帮你构建项目。</p>\n<p>我在androidStudio编译项目时遇到了一些问题，如果编译失败，除了网速问题（科学上网）以外，还遇到过<br><img src=\"https://upload-images.jianshu.io/upload_images/6114493-80d4abe9ba203c9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Jietu20171218-134359@2x.png\"><br>这种问题，现在ionic build项目我已经没遇见了，前几个月build一次遇见一次。<br>直接去 <a href=\"https://www.imooc.com/article/21867\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/article/21867</a> 看，找到问题6就行了。</p>\n<p>android项目导入androidStudio没问题以后，直接运行，就能看到自己的app跑起来了。</p>\n<p>ionic项目开发起来很方便，但是真正难的就是他的底层环境配置。也不能说他坑，因为他是基于cordova开发的，cordova配置环境本来就很坑。打个cordova的jar包用官方的命令根本打不起来，遇上了好多问题，最后在androidStudio的帮助下才成功。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>##1.启动ionic项目<br>首先是随便都能查到的npm安装命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g ionic cordova</span><br><span class=\"line\">ionic start myIonicProject blank</span><br><span class=\"line\">cd myIonicProject</span><br><span class=\"line\">ionic serve</span><br></pre></td></tr></table></figure></p>\n<p>看一下项目目录，了解一下<br>首先src里存放的ionic的angular代码<br>其次www 里存放的是src里的typescript代码编译后的注入的js代码，当然还有其他的东西，比如说图片，sass编译后注入的css代码，都是用webpack打包编译生成。<br>www很重要，就算ionic打包android安装包也是把www移过去。</p>\n<p>##2.配置移动开发环境<br>其中ios的开发环境如果是苹果电脑就不用配了，ios只能在苹果上开发。<br>android的环境配置网上一大堆，就是安装sdk配下环境变量。如果想要贪便宜，可以直接下个androidStudio，神器啊，快速帮助新手配置环境。</p>\n<p>##3.打包android安装包<br>首先先给ionic项目添加支持的平台，在项目目录下运行命令行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ionic cordova platform</span><br></pre></td></tr></table></figure></p>\n<p>能看到一大串支持的平台列表(android、ios、browser)和已经安装的平台<br>运行命令安装ionic的android平台<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ionic cordova platform add android</span><br></pre></td></tr></table></figure></p>\n<p>添加完以后，可以看到目录下的platforms文件夹下多了个android文件夹，里面就是android项目代码，然后再运行命令build一下android平台的代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ionic cordova build android</span><br></pre></td></tr></table></figure></p>\n<p>这行命令行就是为了更新android平台下的代码，其中就有把www替换android项目里的www。</p>\n<p>在mac下build完以后，最好进到上一层目录, sudo chmod -R 777 myIonicProject<br>不然可能androidStudio没权限打开，windows下也应该用管理员权限设置一下。</p>\n<p>值得一提的是，这个build很多人都会出现问题，如果是android环境没配好，确保你的androidStudio能新建一个项目并成功跑起来。然后如果对android开发不太熟，不知道gradle怎么用怎么打包的筒子（作者我～～）,直接用androidStudio打开ionic编译后生成的android项目，就是那个platform下的android文件夹。androidStudio会自动帮你构建项目。</p>\n<p>我在androidStudio编译项目时遇到了一些问题，如果编译失败，除了网速问题（科学上网）以外，还遇到过<br><img src=\"https://upload-images.jianshu.io/upload_images/6114493-80d4abe9ba203c9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Jietu20171218-134359@2x.png\"><br>这种问题，现在ionic build项目我已经没遇见了，前几个月build一次遇见一次。<br>直接去 <a href=\"https://www.imooc.com/article/21867\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/article/21867</a> 看，找到问题6就行了。</p>\n<p>android项目导入androidStudio没问题以后，直接运行，就能看到自己的app跑起来了。</p>\n<p>ionic项目开发起来很方便，但是真正难的就是他的底层环境配置。也不能说他坑，因为他是基于cordova开发的，cordova配置环境本来就很坑。打个cordova的jar包用官方的命令根本打不起来，遇上了好多问题，最后在androidStudio的帮助下才成功。</p>\n"},{"title":"angular4学习笔记整理（一）","date":"2018-01-12T13:35:00.000Z","_content":"好久没写点东西了，毕业刚刚回到上海，就马上出差去了杭州去做app h5的webview开发，用的是ionic3，ionic现在学习还没学完，现在就把自己学到的angular的笔记整理一下。\n## angular 的 nodejs安装\n```\nnpm install -g angular\nnpm -g install @angular/cli    angular命令行工具安装\n```\n用typescript来写node需要引入一个包\n```\nnpm i @types/node --save\n```\n## angular cli常用的command\nng new 项目名称          新建angular项目\nng g component xxx  生成组件\nng g service xxx  生成服务     \n## jquery的使用\n其实angular4里可以使用jquery了，不用像angular1里面使用类似jq的元素选择器，不过其中需要一点配置。\n1. npm安装jq \n```\nnpm install jquery --save\n```\n2. 在angular-cli.json  里的app 配置文件里面 的styles、scripts里面添加js或者css的相对路径,就放在app的script里面，里面还有一个框的是bootstrap\n![Screenshot 2018-01-12_19-03-46.png](http://upload-images.jianshu.io/upload_images/6114493-648480aa2acad151.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3. 由于typescript 不认识js的东西，还需要一个 类型描述文件\n```\nnpm install @types/jquery --save\n```\n## 指令的简单运用\n像下面这样一段代码基本即看懂，*ngFor循环数组 ，js的class样式控制用这种[class.xxxx]=\"xx\" 这种方式\n```\nhtml\n<p >\n<span *ngFor=\"let star of stars\" class=\"glyphicon glyphicon-star\"\n[class.glyphicon-star-empty]=\"star\"></span>\n{{rating}}\n</p>\nts\n@Component({\nselector: 'app-stars',\ntemplateUrl: './stars.component.html',\nstyleUrls: ['./stars.component.css']\n})\n\nexport class StarsComponent{\nprivate rating: number = 0;\nprivate stars: boolean[];\nconstructor() { }\n}\n```\n## 父组件向子组件传递数据 \n子组件代码就是上面一段代码，它需要父组件输入一个rating属性，父组件调用子组件，只需在html里面调用子组件的html标签，输入属性用[]扩起来\n```\n<app-stars [rating]=\"product.rating\"></app-stars>\n```\n输入属性：这种属性绑定  是输入数据的绑定方式\n\n然后子组件里面的代码也需要改一下，将rating设置为输入属性\n```\nexport class StarsComponent implements OnInit {\n@Input()        通过这个input输入标注     声明rating会被父组件输入的属性覆盖\nprivate rating: number = 0;//默认\n}\n```\n\n","source":"_posts/angular4学习笔记整理（一）.md","raw":"---\ntitle: angular4学习笔记整理（一）\ndate: 2018-01-12 21:35:00\ncategories:\n- angular\n---\n好久没写点东西了，毕业刚刚回到上海，就马上出差去了杭州去做app h5的webview开发，用的是ionic3，ionic现在学习还没学完，现在就把自己学到的angular的笔记整理一下。\n## angular 的 nodejs安装\n```\nnpm install -g angular\nnpm -g install @angular/cli    angular命令行工具安装\n```\n用typescript来写node需要引入一个包\n```\nnpm i @types/node --save\n```\n## angular cli常用的command\nng new 项目名称          新建angular项目\nng g component xxx  生成组件\nng g service xxx  生成服务     \n## jquery的使用\n其实angular4里可以使用jquery了，不用像angular1里面使用类似jq的元素选择器，不过其中需要一点配置。\n1. npm安装jq \n```\nnpm install jquery --save\n```\n2. 在angular-cli.json  里的app 配置文件里面 的styles、scripts里面添加js或者css的相对路径,就放在app的script里面，里面还有一个框的是bootstrap\n![Screenshot 2018-01-12_19-03-46.png](http://upload-images.jianshu.io/upload_images/6114493-648480aa2acad151.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3. 由于typescript 不认识js的东西，还需要一个 类型描述文件\n```\nnpm install @types/jquery --save\n```\n## 指令的简单运用\n像下面这样一段代码基本即看懂，*ngFor循环数组 ，js的class样式控制用这种[class.xxxx]=\"xx\" 这种方式\n```\nhtml\n<p >\n<span *ngFor=\"let star of stars\" class=\"glyphicon glyphicon-star\"\n[class.glyphicon-star-empty]=\"star\"></span>\n{{rating}}\n</p>\nts\n@Component({\nselector: 'app-stars',\ntemplateUrl: './stars.component.html',\nstyleUrls: ['./stars.component.css']\n})\n\nexport class StarsComponent{\nprivate rating: number = 0;\nprivate stars: boolean[];\nconstructor() { }\n}\n```\n## 父组件向子组件传递数据 \n子组件代码就是上面一段代码，它需要父组件输入一个rating属性，父组件调用子组件，只需在html里面调用子组件的html标签，输入属性用[]扩起来\n```\n<app-stars [rating]=\"product.rating\"></app-stars>\n```\n输入属性：这种属性绑定  是输入数据的绑定方式\n\n然后子组件里面的代码也需要改一下，将rating设置为输入属性\n```\nexport class StarsComponent implements OnInit {\n@Input()        通过这个input输入标注     声明rating会被父组件输入的属性覆盖\nprivate rating: number = 0;//默认\n}\n```\n\n","slug":"angular4学习笔记整理（一）","published":1,"updated":"2023-08-18T07:53:45.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllgb7w55000f1twbgo4ck1ki","content":"<p>好久没写点东西了，毕业刚刚回到上海，就马上出差去了杭州去做app h5的webview开发，用的是ionic3，ionic现在学习还没学完，现在就把自己学到的angular的笔记整理一下。</p>\n<h2 id=\"angular-的-nodejs安装\"><a href=\"#angular-的-nodejs安装\" class=\"headerlink\" title=\"angular 的 nodejs安装\"></a>angular 的 nodejs安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g angular</span><br><span class=\"line\">npm -g install @angular/cli    angular命令行工具安装</span><br></pre></td></tr></table></figure>\n<p>用typescript来写node需要引入一个包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @types/node --save</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"angular-cli常用的command\"><a href=\"#angular-cli常用的command\" class=\"headerlink\" title=\"angular cli常用的command\"></a>angular cli常用的command</h2><p>ng new 项目名称          新建angular项目<br>ng g component xxx  生成组件<br>ng g service xxx  生成服务     </p>\n<h2 id=\"jquery的使用\"><a href=\"#jquery的使用\" class=\"headerlink\" title=\"jquery的使用\"></a>jquery的使用</h2><p>其实angular4里可以使用jquery了，不用像angular1里面使用类似jq的元素选择器，不过其中需要一点配置。</p>\n<ol>\n<li><p>npm安装jq </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jquery --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在angular-cli.json  里的app 配置文件里面 的styles、scripts里面添加js或者css的相对路径,就放在app的script里面，里面还有一个框的是bootstrap<br><img src=\"http://upload-images.jianshu.io/upload_images/6114493-648480aa2acad151.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot 2018-01-12_19-03-46.png\"></p>\n</li>\n<li><p>由于typescript 不认识js的东西，还需要一个 类型描述文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @types/jquery --save</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"指令的简单运用\"><a href=\"#指令的简单运用\" class=\"headerlink\" title=\"指令的简单运用\"></a>指令的简单运用</h2><p>像下面这样一段代码基本即看懂，*ngFor循环数组 ，js的class样式控制用这种[class.xxxx]=”xx” 这种方式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html</span><br><span class=\"line\">&lt;p &gt;</span><br><span class=\"line\">&lt;span *ngFor=&quot;let star of stars&quot; class=&quot;glyphicon glyphicon-star&quot;</span><br><span class=\"line\">[class.glyphicon-star-empty]=&quot;star&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">&#123;&#123;rating&#125;&#125;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">ts</span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">selector: &apos;app-stars&apos;,</span><br><span class=\"line\">templateUrl: &apos;./stars.component.html&apos;,</span><br><span class=\"line\">styleUrls: [&apos;./stars.component.css&apos;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export class StarsComponent&#123;</span><br><span class=\"line\">private rating: number = 0;</span><br><span class=\"line\">private stars: boolean[];</span><br><span class=\"line\">constructor() &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"父组件向子组件传递数据\"><a href=\"#父组件向子组件传递数据\" class=\"headerlink\" title=\"父组件向子组件传递数据\"></a>父组件向子组件传递数据</h2><p>子组件代码就是上面一段代码，它需要父组件输入一个rating属性，父组件调用子组件，只需在html里面调用子组件的html标签，输入属性用[]扩起来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;app-stars [rating]=&quot;product.rating&quot;&gt;&lt;/app-stars&gt;</span><br></pre></td></tr></table></figure></p>\n<p>输入属性：这种属性绑定  是输入数据的绑定方式</p>\n<p>然后子组件里面的代码也需要改一下，将rating设置为输入属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export class StarsComponent implements OnInit &#123;</span><br><span class=\"line\">@Input()        通过这个input输入标注     声明rating会被父组件输入的属性覆盖</span><br><span class=\"line\">private rating: number = 0;//默认</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>好久没写点东西了，毕业刚刚回到上海，就马上出差去了杭州去做app h5的webview开发，用的是ionic3，ionic现在学习还没学完，现在就把自己学到的angular的笔记整理一下。</p>\n<h2 id=\"angular-的-nodejs安装\"><a href=\"#angular-的-nodejs安装\" class=\"headerlink\" title=\"angular 的 nodejs安装\"></a>angular 的 nodejs安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g angular</span><br><span class=\"line\">npm -g install @angular/cli    angular命令行工具安装</span><br></pre></td></tr></table></figure>\n<p>用typescript来写node需要引入一个包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @types/node --save</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"angular-cli常用的command\"><a href=\"#angular-cli常用的command\" class=\"headerlink\" title=\"angular cli常用的command\"></a>angular cli常用的command</h2><p>ng new 项目名称          新建angular项目<br>ng g component xxx  生成组件<br>ng g service xxx  生成服务     </p>\n<h2 id=\"jquery的使用\"><a href=\"#jquery的使用\" class=\"headerlink\" title=\"jquery的使用\"></a>jquery的使用</h2><p>其实angular4里可以使用jquery了，不用像angular1里面使用类似jq的元素选择器，不过其中需要一点配置。</p>\n<ol>\n<li><p>npm安装jq </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jquery --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在angular-cli.json  里的app 配置文件里面 的styles、scripts里面添加js或者css的相对路径,就放在app的script里面，里面还有一个框的是bootstrap<br><img src=\"http://upload-images.jianshu.io/upload_images/6114493-648480aa2acad151.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot 2018-01-12_19-03-46.png\"></p>\n</li>\n<li><p>由于typescript 不认识js的东西，还需要一个 类型描述文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @types/jquery --save</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"指令的简单运用\"><a href=\"#指令的简单运用\" class=\"headerlink\" title=\"指令的简单运用\"></a>指令的简单运用</h2><p>像下面这样一段代码基本即看懂，*ngFor循环数组 ，js的class样式控制用这种[class.xxxx]=”xx” 这种方式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html</span><br><span class=\"line\">&lt;p &gt;</span><br><span class=\"line\">&lt;span *ngFor=&quot;let star of stars&quot; class=&quot;glyphicon glyphicon-star&quot;</span><br><span class=\"line\">[class.glyphicon-star-empty]=&quot;star&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">&#123;&#123;rating&#125;&#125;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">ts</span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">selector: &apos;app-stars&apos;,</span><br><span class=\"line\">templateUrl: &apos;./stars.component.html&apos;,</span><br><span class=\"line\">styleUrls: [&apos;./stars.component.css&apos;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export class StarsComponent&#123;</span><br><span class=\"line\">private rating: number = 0;</span><br><span class=\"line\">private stars: boolean[];</span><br><span class=\"line\">constructor() &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"父组件向子组件传递数据\"><a href=\"#父组件向子组件传递数据\" class=\"headerlink\" title=\"父组件向子组件传递数据\"></a>父组件向子组件传递数据</h2><p>子组件代码就是上面一段代码，它需要父组件输入一个rating属性，父组件调用子组件，只需在html里面调用子组件的html标签，输入属性用[]扩起来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;app-stars [rating]=&quot;product.rating&quot;&gt;&lt;/app-stars&gt;</span><br></pre></td></tr></table></figure></p>\n<p>输入属性：这种属性绑定  是输入数据的绑定方式</p>\n<p>然后子组件里面的代码也需要改一下，将rating设置为输入属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export class StarsComponent implements OnInit &#123;</span><br><span class=\"line\">@Input()        通过这个input输入标注     声明rating会被父组件输入的属性覆盖</span><br><span class=\"line\">private rating: number = 0;//默认</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"记一次hexo 博客上线 经验总结","date":"2018-12-02T16:09:47.000Z","_content":"\n前两天买了一台百度云服务器花了11块钱，花了点时间学了下如何部署hexo博客以及一些服务器方面的配置，没用hexo推荐的方式部署。专门记一个文章。系统用的是centos，先上图和链接\n## 博客地址\n[sunqx的博客](http://www.sunqx.top:4000)\n\n![preview.png](https://upload-images.jianshu.io/upload_images/6114493-3d1caea56828ef4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 步骤\n1. 先用hexo快捷搭建本地blog，再把项目上传到github \n2. 本地ssh无密码登陆远程服务器，把服务器的防火墙打开并配置指定端口才可以登陆\n3. 远程服务器配置 ssh key 后再把项目从git clone到云服务器\n4. 再用pm2，直接本地快捷部署项目到服务器并重启\n5. 使用nginx 转发端口 \n\n## 配置要点\n\n#### 先用hexo快捷搭建本地blog\n首先解释下\nhexo 基于nodejs的快速、简洁且高效的博客框架，它是帮人快速搭建个人博客的。\nPM2是node进程管理工具,可以利用它来简化很多node应用管理的繁琐任务,如性能监控、自动重启、负载均衡等,而且使用非常简单。就是一开始上手感觉好容易报错。\n\n这里只将一些官网上没有的，如何本地跑起来一个hexo 项目和部署一个主题请看官网 [hexo官网]( https://hexo.io/zh-cn/)\n\n`` hexo server ``  是项目 的启动命令 ，默认hexo启动端口是4000。但这样启动项目，nodejs是一个单线程项目，万一某一次程序出错，那整个服务就挂了。所以需要pm2 来监控这项线程，万一出错pm2还能自动重启。\n\npm2 启动命令一般是`` pm2 start app.js``  那如何用pm2 来管理hexo呢，可以通过在项目目录下新建一个 app.js\n```sh\nvar spawn = require('child_process').spawn;\nfree = spawn('hexo', ['server', '-p 4000']);/* 其实就是等于执行hexo server -p 4000*/\n\nfree.stdout.on('data', function (data) {\n    console.log('hexo standard output:\\n' + data);\n});\n\nfree.stderr.on('data', function (data) {\n    console.log('hexo standard error output:\\n' + data);\n});\n\nfree.on('exit', function (code, signal) {\n    console.log('hexo child process eixt ,exit:' + code);\n});\n```\n如此一来在项目根目录下  就能用 ``pm2 start app.js`` 来跑hexo项目了\n\n#### 本地ssh无密码登陆远程服务器，服务器 ssh key 配置\n初次配置的云服务器需要安装这些工具包\n```\n sudo yum install vim openssl build-essential libssl-dev wget curl git\n yum install gcc-c++\n```\n本地配置ssh key\n1. 本地 cd /\n2. cd .ssh  或者 open ~/.ssh  \n3. ls\n    ``id_rsa  id_rsa.pub  known_hosts``\n4. 备份\n   `` mv id_rsa id_rsa_backup``\n   ``mv id_rsa.pub id_rsa_backup.pub``\n5. 生成ssh公钥\n``ssh-keygen -t rsa -b 4096 -C \"931035063@qq.com\" ``\n6. 查看\n``cat id_rsa``\n``cat id_rsa.pub``\n7. key作用生效\n``eval \"$(ssh-agent -s)\"``\n``ssh-add ~/.ssh/id_rsa``\n8. 然后在连上**远程服务器** ``cd ~/.ssh`` ,编辑服务器端授权文件 ``vi authorized_keys``\n9. 在在**客户端** 输入 ``cat id_rsa.pub``将带有邮箱的公钥复制进去，再:wq!退出authorized_keys\n10.  配置生效 ``sudo service sshd restart`` \n11.  然后就可以直接通过 ssh root@xx.xx.xx.xx 来免密码 登陆了\n\n注意点:\n- 因为我连上云服务器后也没创建新用户，直接用root 编辑的，其他人配置是要注意一下 权限问题，我看网上也有不少人因为权限问题而生效失败\n- 如果还是配置没生效，需要看一下  [sshd_config配置详解](https://www.cnblogs.com/jingwu/articles/5598340.html)\nRSAAuthentication yes\nPubkeyAuthentication yes\n这两项不能为no\n- 还有一个地方，每次ssh登陆输ip太过于麻烦，当然你用secureCRT这样的工具当我没说, **在mac下面 可以配置快捷连接云服务器的命令**\n-- 在``sudo vim ~/.bashrc``\n-- 新加 ``alias ssh_baiduyun=\"ssh root@xx.xx.xx.xx\"``\n-- ``source .bashrc`` 以后即可通过 ``ssh_baiduyun`` 连接服务器\n- 再重申一点 本地的 ``id_rsa.pub`` 对应的是 服务器上的 ``authorized_keys``,两个复制错了就尴尬了\n#### 在服务器配置ssh并clone git 项目\n生成服务器端公钥 和本地一样\n``cd ~/.ssh``\n``ssh-keygen -t rsa -b 4096 -C \"931035063@qq.com\"``\n``eval \"$(ssh-agent -s)\"``\n``ssh-add ~/.ssh/id_rsa``\n生效,centos 下``service sshd restart``\n把  ``id_rsa.pub`` 里面的内容 放到git 账户里面ssh 配置里\n![Screenshot 2018-12-02_23-25-37.png](https://upload-images.jianshu.io/upload_images/6114493-9b765e356cd0a732.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**注意！！** 在服务器里你准备clone 项目的文件夹里 先用ssh clone 一遍 ``git@github.com:SHpoi/my-blog.git`` 第一次git clone 会有确认项，不然后面用pm2部署老是会遇到一个拉取项目为空的报错。\n\n#### 在服务器配置nodejs环境\n服务器配置nodejs 用的是nvm，安装nvm\n```\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash\n```\n**nvm 安装以后重新连接云服务器**，不然环境变量不会生效\nnvm安装nodejs，依次执行以下命令\n```\nnvm install v8.9.0\nnvm use v8.9.0\nnvm alias default v8.9.0\nnpm --registry=https://registry.npm.taobao.org install -g npm\n```\n拉取完以后记得先试用``hexo server``着能不能跑起来,进入文件夹先``npm install``再看还差什么其他的全局依赖\n\n#### 在本地使用pm2 一键部署云服务器上的项目\n这一块真的是血泪啊，就2行命令行，报的错查了一下午。\n1. 在本地项目目录下新建一个 ecosystem.json，与app.js平级\n```\n{\n  \"apps\" : [{\n    \"name\": \"myApp\",\n    \"script\": \"app.js\",\n    \"instances\": 1,\n    \"autorestart\": true,\n    \"env\": {\n      \"NODE_ENV\": \"development\"\n    },\n    \"env_production\": {\n      \"NODE_ENV\": \"production\"\n    }\n  }],\n  \"deploy\" : {\n    \"production\" : {\n      \"user\" : \"root\",\n      \"host\" : \"xx.xx.xx.xx\",\n      \"port\" : \"22\",\n      \"ssh_options\": \"StrictHostKeyChecking=no\",\n      \"ref\"  : \"origin/master\",\n      \"repo\" : \"git@github.com:SHpoi/my-blog.git\",\n      \"path\" : \"/root/www/myblog/\",\n      \"env\": {\n        \"NODE_ENV\": \"production\"\n      },\n      \"pre-setup\": \"rm -rf /var/www/myblog/production/source\",\n      \"post-deploy\" : \"npm install && pm2 startOrRestart ecosystem.json --env production\",\n      \"env\"  : {\n        \"NODE_ENV\": \"production\"\n      }\n    }\n  }\n}\n\n```\n然后运行2行命令 第一行在云服务器搭建运行环境，第二行每次重新发布项目需要\n```\npm2 deploy ecosystem.json production setup\n注意有巨坑，第一次ssh clone 会校验，要先在该目录下clone 一遍git ssh 连接，之后才会成功。不然会一直报空链接\npm2 deploy ecosystem.json production --force\nforce一定要加不然git会报冲突不解决\n```\n以后每次发布博客\n``hexo new  '记一次hexo 博客上线 经验总结'`` 生成md文件，写完以后提交到git仓库\n再用命令行在本地项目执行下 ``pm2 deploy ecosystem.json production --force`` 即可\n\n##### pm2 配置注意点\n- ``pm2 deploy ecosystem.json production --force`` force一定要加不然git会报冲突不解决\n-  运行setup命令时 第一次ssh clone 会校验，要先在该目录下clone 一遍git ssh 连接，之后才会成功。不然会一直报空链接。第一次clone完删了即可。\n- 启动前先删了source里面的git 代码，不然pm2 会报冲突不解决而部署失败\n``` \n\"pre-setup\": \"rm -rf /var/www/myblog/production/source\",\n- 部署后运行 命令进行项目依赖包安装 再跑起来hexo项目 \n\"post-deploy\" : \"npm install && pm2 startOrRestart ecosystem.json --env production\",\n```\n-  ``\"script\": \"app.js\"`` 为了让json 找到app.js,所以放平级，这个json文件如果不是私有仓库不建议提交，当然我是提了，不过你们有高手千万别看了我的git项目的配置文件就攻击它，活动买的加上域名服务就12块钱。\n- ``/root/www/myblog/`` 我是为了方便我登进去就能找项目才放root下的。还有这个目录需先创建，不然pm2不知道部署在哪。\n\n- ``pm2 deploy ecosystem.json  production setup `` 有时候还需要再次执行，因为有时候会出现这种错误 ``bash: line 0: cd: /root/www/myblog/source: 没有那个文件或目录``\n\n#### nginx配置\n这一块没啥说的 无非就是端口转发， 80转4000\nnginx 安装\n```\nsudo yum install nginx\n```\n**安装完重连服务器，不然怎么输命令配置都不生效**\n\n```\nupstream myblog{\n server localhost:4000;\n}\n\nserver {\n    listen  80 ;\n    server_name  www.sunqx.top;\n\n    location / {\n          proxy_set_header X-Real-IP $remote_addr;\n          proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;\n          proxy_set_header Host $http_host;\n          proxy_set_header X-Nginx-Proxy true;\n          proxy_pass http://myblog;\n          proxy_redirect off;\n    }\n}\n```\nnginx 配置生效\n```\nsudo nginx -t \nsudo nginx -s reload\n```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/记一次hexo-博客上线-经验总结.md","raw":"---\ntitle: 记一次hexo 博客上线 经验总结\ndate: 2018-12-03 00:09:47\ncategories:\n- hexo\ntags:\n- pm2\n- nginx\n- hexo\n---\n\n前两天买了一台百度云服务器花了11块钱，花了点时间学了下如何部署hexo博客以及一些服务器方面的配置，没用hexo推荐的方式部署。专门记一个文章。系统用的是centos，先上图和链接\n## 博客地址\n[sunqx的博客](http://www.sunqx.top:4000)\n\n![preview.png](https://upload-images.jianshu.io/upload_images/6114493-3d1caea56828ef4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 步骤\n1. 先用hexo快捷搭建本地blog，再把项目上传到github \n2. 本地ssh无密码登陆远程服务器，把服务器的防火墙打开并配置指定端口才可以登陆\n3. 远程服务器配置 ssh key 后再把项目从git clone到云服务器\n4. 再用pm2，直接本地快捷部署项目到服务器并重启\n5. 使用nginx 转发端口 \n\n## 配置要点\n\n#### 先用hexo快捷搭建本地blog\n首先解释下\nhexo 基于nodejs的快速、简洁且高效的博客框架，它是帮人快速搭建个人博客的。\nPM2是node进程管理工具,可以利用它来简化很多node应用管理的繁琐任务,如性能监控、自动重启、负载均衡等,而且使用非常简单。就是一开始上手感觉好容易报错。\n\n这里只将一些官网上没有的，如何本地跑起来一个hexo 项目和部署一个主题请看官网 [hexo官网]( https://hexo.io/zh-cn/)\n\n`` hexo server ``  是项目 的启动命令 ，默认hexo启动端口是4000。但这样启动项目，nodejs是一个单线程项目，万一某一次程序出错，那整个服务就挂了。所以需要pm2 来监控这项线程，万一出错pm2还能自动重启。\n\npm2 启动命令一般是`` pm2 start app.js``  那如何用pm2 来管理hexo呢，可以通过在项目目录下新建一个 app.js\n```sh\nvar spawn = require('child_process').spawn;\nfree = spawn('hexo', ['server', '-p 4000']);/* 其实就是等于执行hexo server -p 4000*/\n\nfree.stdout.on('data', function (data) {\n    console.log('hexo standard output:\\n' + data);\n});\n\nfree.stderr.on('data', function (data) {\n    console.log('hexo standard error output:\\n' + data);\n});\n\nfree.on('exit', function (code, signal) {\n    console.log('hexo child process eixt ,exit:' + code);\n});\n```\n如此一来在项目根目录下  就能用 ``pm2 start app.js`` 来跑hexo项目了\n\n#### 本地ssh无密码登陆远程服务器，服务器 ssh key 配置\n初次配置的云服务器需要安装这些工具包\n```\n sudo yum install vim openssl build-essential libssl-dev wget curl git\n yum install gcc-c++\n```\n本地配置ssh key\n1. 本地 cd /\n2. cd .ssh  或者 open ~/.ssh  \n3. ls\n    ``id_rsa  id_rsa.pub  known_hosts``\n4. 备份\n   `` mv id_rsa id_rsa_backup``\n   ``mv id_rsa.pub id_rsa_backup.pub``\n5. 生成ssh公钥\n``ssh-keygen -t rsa -b 4096 -C \"931035063@qq.com\" ``\n6. 查看\n``cat id_rsa``\n``cat id_rsa.pub``\n7. key作用生效\n``eval \"$(ssh-agent -s)\"``\n``ssh-add ~/.ssh/id_rsa``\n8. 然后在连上**远程服务器** ``cd ~/.ssh`` ,编辑服务器端授权文件 ``vi authorized_keys``\n9. 在在**客户端** 输入 ``cat id_rsa.pub``将带有邮箱的公钥复制进去，再:wq!退出authorized_keys\n10.  配置生效 ``sudo service sshd restart`` \n11.  然后就可以直接通过 ssh root@xx.xx.xx.xx 来免密码 登陆了\n\n注意点:\n- 因为我连上云服务器后也没创建新用户，直接用root 编辑的，其他人配置是要注意一下 权限问题，我看网上也有不少人因为权限问题而生效失败\n- 如果还是配置没生效，需要看一下  [sshd_config配置详解](https://www.cnblogs.com/jingwu/articles/5598340.html)\nRSAAuthentication yes\nPubkeyAuthentication yes\n这两项不能为no\n- 还有一个地方，每次ssh登陆输ip太过于麻烦，当然你用secureCRT这样的工具当我没说, **在mac下面 可以配置快捷连接云服务器的命令**\n-- 在``sudo vim ~/.bashrc``\n-- 新加 ``alias ssh_baiduyun=\"ssh root@xx.xx.xx.xx\"``\n-- ``source .bashrc`` 以后即可通过 ``ssh_baiduyun`` 连接服务器\n- 再重申一点 本地的 ``id_rsa.pub`` 对应的是 服务器上的 ``authorized_keys``,两个复制错了就尴尬了\n#### 在服务器配置ssh并clone git 项目\n生成服务器端公钥 和本地一样\n``cd ~/.ssh``\n``ssh-keygen -t rsa -b 4096 -C \"931035063@qq.com\"``\n``eval \"$(ssh-agent -s)\"``\n``ssh-add ~/.ssh/id_rsa``\n生效,centos 下``service sshd restart``\n把  ``id_rsa.pub`` 里面的内容 放到git 账户里面ssh 配置里\n![Screenshot 2018-12-02_23-25-37.png](https://upload-images.jianshu.io/upload_images/6114493-9b765e356cd0a732.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**注意！！** 在服务器里你准备clone 项目的文件夹里 先用ssh clone 一遍 ``git@github.com:SHpoi/my-blog.git`` 第一次git clone 会有确认项，不然后面用pm2部署老是会遇到一个拉取项目为空的报错。\n\n#### 在服务器配置nodejs环境\n服务器配置nodejs 用的是nvm，安装nvm\n```\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash\n```\n**nvm 安装以后重新连接云服务器**，不然环境变量不会生效\nnvm安装nodejs，依次执行以下命令\n```\nnvm install v8.9.0\nnvm use v8.9.0\nnvm alias default v8.9.0\nnpm --registry=https://registry.npm.taobao.org install -g npm\n```\n拉取完以后记得先试用``hexo server``着能不能跑起来,进入文件夹先``npm install``再看还差什么其他的全局依赖\n\n#### 在本地使用pm2 一键部署云服务器上的项目\n这一块真的是血泪啊，就2行命令行，报的错查了一下午。\n1. 在本地项目目录下新建一个 ecosystem.json，与app.js平级\n```\n{\n  \"apps\" : [{\n    \"name\": \"myApp\",\n    \"script\": \"app.js\",\n    \"instances\": 1,\n    \"autorestart\": true,\n    \"env\": {\n      \"NODE_ENV\": \"development\"\n    },\n    \"env_production\": {\n      \"NODE_ENV\": \"production\"\n    }\n  }],\n  \"deploy\" : {\n    \"production\" : {\n      \"user\" : \"root\",\n      \"host\" : \"xx.xx.xx.xx\",\n      \"port\" : \"22\",\n      \"ssh_options\": \"StrictHostKeyChecking=no\",\n      \"ref\"  : \"origin/master\",\n      \"repo\" : \"git@github.com:SHpoi/my-blog.git\",\n      \"path\" : \"/root/www/myblog/\",\n      \"env\": {\n        \"NODE_ENV\": \"production\"\n      },\n      \"pre-setup\": \"rm -rf /var/www/myblog/production/source\",\n      \"post-deploy\" : \"npm install && pm2 startOrRestart ecosystem.json --env production\",\n      \"env\"  : {\n        \"NODE_ENV\": \"production\"\n      }\n    }\n  }\n}\n\n```\n然后运行2行命令 第一行在云服务器搭建运行环境，第二行每次重新发布项目需要\n```\npm2 deploy ecosystem.json production setup\n注意有巨坑，第一次ssh clone 会校验，要先在该目录下clone 一遍git ssh 连接，之后才会成功。不然会一直报空链接\npm2 deploy ecosystem.json production --force\nforce一定要加不然git会报冲突不解决\n```\n以后每次发布博客\n``hexo new  '记一次hexo 博客上线 经验总结'`` 生成md文件，写完以后提交到git仓库\n再用命令行在本地项目执行下 ``pm2 deploy ecosystem.json production --force`` 即可\n\n##### pm2 配置注意点\n- ``pm2 deploy ecosystem.json production --force`` force一定要加不然git会报冲突不解决\n-  运行setup命令时 第一次ssh clone 会校验，要先在该目录下clone 一遍git ssh 连接，之后才会成功。不然会一直报空链接。第一次clone完删了即可。\n- 启动前先删了source里面的git 代码，不然pm2 会报冲突不解决而部署失败\n``` \n\"pre-setup\": \"rm -rf /var/www/myblog/production/source\",\n- 部署后运行 命令进行项目依赖包安装 再跑起来hexo项目 \n\"post-deploy\" : \"npm install && pm2 startOrRestart ecosystem.json --env production\",\n```\n-  ``\"script\": \"app.js\"`` 为了让json 找到app.js,所以放平级，这个json文件如果不是私有仓库不建议提交，当然我是提了，不过你们有高手千万别看了我的git项目的配置文件就攻击它，活动买的加上域名服务就12块钱。\n- ``/root/www/myblog/`` 我是为了方便我登进去就能找项目才放root下的。还有这个目录需先创建，不然pm2不知道部署在哪。\n\n- ``pm2 deploy ecosystem.json  production setup `` 有时候还需要再次执行，因为有时候会出现这种错误 ``bash: line 0: cd: /root/www/myblog/source: 没有那个文件或目录``\n\n#### nginx配置\n这一块没啥说的 无非就是端口转发， 80转4000\nnginx 安装\n```\nsudo yum install nginx\n```\n**安装完重连服务器，不然怎么输命令配置都不生效**\n\n```\nupstream myblog{\n server localhost:4000;\n}\n\nserver {\n    listen  80 ;\n    server_name  www.sunqx.top;\n\n    location / {\n          proxy_set_header X-Real-IP $remote_addr;\n          proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;\n          proxy_set_header Host $http_host;\n          proxy_set_header X-Nginx-Proxy true;\n          proxy_pass http://myblog;\n          proxy_redirect off;\n    }\n}\n```\nnginx 配置生效\n```\nsudo nginx -t \nsudo nginx -s reload\n```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"记一次hexo-博客上线-经验总结","published":1,"updated":"2023-08-18T07:53:45.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllgb7w57000i1twbhbt3hbw2","content":"<p>前两天买了一台百度云服务器花了11块钱，花了点时间学了下如何部署hexo博客以及一些服务器方面的配置，没用hexo推荐的方式部署。专门记一个文章。系统用的是centos，先上图和链接</p>\n<h2 id=\"博客地址\"><a href=\"#博客地址\" class=\"headerlink\" title=\"博客地址\"></a>博客地址</h2><p><a href=\"http://www.sunqx.top:4000\" target=\"_blank\" rel=\"noopener\">sunqx的博客</a></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6114493-3d1caea56828ef4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"preview.png\"></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li>先用hexo快捷搭建本地blog，再把项目上传到github </li>\n<li>本地ssh无密码登陆远程服务器，把服务器的防火墙打开并配置指定端口才可以登陆</li>\n<li>远程服务器配置 ssh key 后再把项目从git clone到云服务器</li>\n<li>再用pm2，直接本地快捷部署项目到服务器并重启</li>\n<li>使用nginx 转发端口 </li>\n</ol>\n<h2 id=\"配置要点\"><a href=\"#配置要点\" class=\"headerlink\" title=\"配置要点\"></a>配置要点</h2><h4 id=\"先用hexo快捷搭建本地blog\"><a href=\"#先用hexo快捷搭建本地blog\" class=\"headerlink\" title=\"先用hexo快捷搭建本地blog\"></a>先用hexo快捷搭建本地blog</h4><p>首先解释下<br>hexo 基于nodejs的快速、简洁且高效的博客框架，它是帮人快速搭建个人博客的。<br>PM2是node进程管理工具,可以利用它来简化很多node应用管理的繁琐任务,如性能监控、自动重启、负载均衡等,而且使用非常简单。就是一开始上手感觉好容易报错。</p>\n<p>这里只将一些官网上没有的，如何本地跑起来一个hexo 项目和部署一个主题请看官网 <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo官网</a></p>\n<p><code>hexo server</code>  是项目 的启动命令 ，默认hexo启动端口是4000。但这样启动项目，nodejs是一个单线程项目，万一某一次程序出错，那整个服务就挂了。所以需要pm2 来监控这项线程，万一出错pm2还能自动重启。</p>\n<p>pm2 启动命令一般是<code>pm2 start app.js</code>  那如何用pm2 来管理hexo呢，可以通过在项目目录下新建一个 app.js<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var spawn = require(<span class=\"string\">'child_process'</span>).spawn;</span><br><span class=\"line\">free = spawn(<span class=\"string\">'hexo'</span>, [<span class=\"string\">'server'</span>, <span class=\"string\">'-p 4000'</span>]);/* 其实就是等于执行hexo server -p 4000*/</span><br><span class=\"line\"></span><br><span class=\"line\">free.stdout.on(<span class=\"string\">'data'</span>, <span class=\"keyword\">function</span> (data) &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'hexo standard output:\\n'</span> + data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">free.stderr.on(<span class=\"string\">'data'</span>, <span class=\"keyword\">function</span> (data) &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'hexo standard error output:\\n'</span> + data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">free.on(<span class=\"string\">'exit'</span>, <span class=\"keyword\">function</span> (code, signal) &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'hexo child process eixt ,exit:'</span> + code);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>如此一来在项目根目录下  就能用 <code>pm2 start app.js</code> 来跑hexo项目了</p>\n<h4 id=\"本地ssh无密码登陆远程服务器，服务器-ssh-key-配置\"><a href=\"#本地ssh无密码登陆远程服务器，服务器-ssh-key-配置\" class=\"headerlink\" title=\"本地ssh无密码登陆远程服务器，服务器 ssh key 配置\"></a>本地ssh无密码登陆远程服务器，服务器 ssh key 配置</h4><p>初次配置的云服务器需要安装这些工具包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install vim openssl build-essential libssl-dev wget curl git</span><br><span class=\"line\">yum install gcc-c++</span><br></pre></td></tr></table></figure></p>\n<p>本地配置ssh key</p>\n<ol>\n<li>本地 cd /</li>\n<li>cd .ssh  或者 open ~/.ssh  </li>\n<li>ls<br> <code>id_rsa  id_rsa.pub  known_hosts</code></li>\n<li>备份<br><code>mv id_rsa id_rsa_backup</code><br><code>mv id_rsa.pub id_rsa_backup.pub</code></li>\n<li>生成ssh公钥<br><code>ssh-keygen -t rsa -b 4096 -C &quot;931035063@qq.com&quot;</code></li>\n<li>查看<br><code>cat id_rsa</code><br><code>cat id_rsa.pub</code></li>\n<li>key作用生效<br><code>eval &quot;$(ssh-agent -s)&quot;</code><br><code>ssh-add ~/.ssh/id_rsa</code></li>\n<li>然后在连上<strong>远程服务器</strong> <code>cd ~/.ssh</code> ,编辑服务器端授权文件 <code>vi authorized_keys</code></li>\n<li>在在<strong>客户端</strong> 输入 <code>cat id_rsa.pub</code>将带有邮箱的公钥复制进去，再:wq!退出authorized_keys</li>\n<li>配置生效 <code>sudo service sshd restart</code> </li>\n<li>然后就可以直接通过 ssh root@xx.xx.xx.xx 来免密码 登陆了</li>\n</ol>\n<p>注意点:</p>\n<ul>\n<li>因为我连上云服务器后也没创建新用户，直接用root 编辑的，其他人配置是要注意一下 权限问题，我看网上也有不少人因为权限问题而生效失败</li>\n<li>如果还是配置没生效，需要看一下  <a href=\"https://www.cnblogs.com/jingwu/articles/5598340.html\" target=\"_blank\" rel=\"noopener\">sshd_config配置详解</a><br>RSAAuthentication yes<br>PubkeyAuthentication yes<br>这两项不能为no</li>\n<li>还有一个地方，每次ssh登陆输ip太过于麻烦，当然你用secureCRT这样的工具当我没说, <strong>在mac下面 可以配置快捷连接云服务器的命令</strong><br>– 在<code>sudo vim ~/.bashrc</code><br>– 新加 <code>alias ssh_baiduyun=&quot;ssh root@xx.xx.xx.xx&quot;</code><br>– <code>source .bashrc</code> 以后即可通过 <code>ssh_baiduyun</code> 连接服务器</li>\n<li>再重申一点 本地的 <code>id_rsa.pub</code> 对应的是 服务器上的 <code>authorized_keys</code>,两个复制错了就尴尬了<h4 id=\"在服务器配置ssh并clone-git-项目\"><a href=\"#在服务器配置ssh并clone-git-项目\" class=\"headerlink\" title=\"在服务器配置ssh并clone git 项目\"></a>在服务器配置ssh并clone git 项目</h4>生成服务器端公钥 和本地一样<br><code>cd ~/.ssh</code><br><code>ssh-keygen -t rsa -b 4096 -C &quot;931035063@qq.com&quot;</code><br><code>eval &quot;$(ssh-agent -s)&quot;</code><br><code>ssh-add ~/.ssh/id_rsa</code><br>生效,centos 下<code>service sshd restart</code><br>把  <code>id_rsa.pub</code> 里面的内容 放到git 账户里面ssh 配置里<br><img src=\"https://upload-images.jianshu.io/upload_images/6114493-9b765e356cd0a732.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot 2018-12-02_23-25-37.png\"><br><strong>注意！！</strong> 在服务器里你准备clone 项目的文件夹里 先用ssh clone 一遍 <code>git@github.com:SHpoi/my-blog.git</code> 第一次git clone 会有确认项，不然后面用pm2部署老是会遇到一个拉取项目为空的报错。</li>\n</ul>\n<h4 id=\"在服务器配置nodejs环境\"><a href=\"#在服务器配置nodejs环境\" class=\"headerlink\" title=\"在服务器配置nodejs环境\"></a>在服务器配置nodejs环境</h4><p>服务器配置nodejs 用的是nvm，安装nvm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</span><br></pre></td></tr></table></figure></p>\n<p><strong>nvm 安装以后重新连接云服务器</strong>，不然环境变量不会生效<br>nvm安装nodejs，依次执行以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install v8.9.0</span><br><span class=\"line\">nvm use v8.9.0</span><br><span class=\"line\">nvm alias default v8.9.0</span><br><span class=\"line\">npm --registry=https://registry.npm.taobao.org install -g npm</span><br></pre></td></tr></table></figure></p>\n<p>拉取完以后记得先试用<code>hexo server</code>着能不能跑起来,进入文件夹先<code>npm install</code>再看还差什么其他的全局依赖</p>\n<h4 id=\"在本地使用pm2-一键部署云服务器上的项目\"><a href=\"#在本地使用pm2-一键部署云服务器上的项目\" class=\"headerlink\" title=\"在本地使用pm2 一键部署云服务器上的项目\"></a>在本地使用pm2 一键部署云服务器上的项目</h4><p>这一块真的是血泪啊，就2行命令行，报的错查了一下午。</p>\n<ol>\n<li>在本地项目目录下新建一个 ecosystem.json，与app.js平级<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;apps&quot; : [&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;myApp&quot;,</span><br><span class=\"line\">    &quot;script&quot;: &quot;app.js&quot;,</span><br><span class=\"line\">    &quot;instances&quot;: 1,</span><br><span class=\"line\">    &quot;autorestart&quot;: true,</span><br><span class=\"line\">    &quot;env&quot;: &#123;</span><br><span class=\"line\">      &quot;NODE_ENV&quot;: &quot;development&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;env_production&quot;: &#123;</span><br><span class=\"line\">      &quot;NODE_ENV&quot;: &quot;production&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">  &quot;deploy&quot; : &#123;</span><br><span class=\"line\">    &quot;production&quot; : &#123;</span><br><span class=\"line\">      &quot;user&quot; : &quot;root&quot;,</span><br><span class=\"line\">      &quot;host&quot; : &quot;xx.xx.xx.xx&quot;,</span><br><span class=\"line\">      &quot;port&quot; : &quot;22&quot;,</span><br><span class=\"line\">      &quot;ssh_options&quot;: &quot;StrictHostKeyChecking=no&quot;,</span><br><span class=\"line\">      &quot;ref&quot;  : &quot;origin/master&quot;,</span><br><span class=\"line\">      &quot;repo&quot; : &quot;git@github.com:SHpoi/my-blog.git&quot;,</span><br><span class=\"line\">      &quot;path&quot; : &quot;/root/www/myblog/&quot;,</span><br><span class=\"line\">      &quot;env&quot;: &#123;</span><br><span class=\"line\">        &quot;NODE_ENV&quot;: &quot;production&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;pre-setup&quot;: &quot;rm -rf /var/www/myblog/production/source&quot;,</span><br><span class=\"line\">      &quot;post-deploy&quot; : &quot;npm install &amp;&amp; pm2 startOrRestart ecosystem.json --env production&quot;,</span><br><span class=\"line\">      &quot;env&quot;  : &#123;</span><br><span class=\"line\">        &quot;NODE_ENV&quot;: &quot;production&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后运行2行命令 第一行在云服务器搭建运行环境，第二行每次重新发布项目需要<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 deploy ecosystem.json production setup</span><br><span class=\"line\">注意有巨坑，第一次ssh clone 会校验，要先在该目录下clone 一遍git ssh 连接，之后才会成功。不然会一直报空链接</span><br><span class=\"line\">pm2 deploy ecosystem.json production --force</span><br><span class=\"line\">force一定要加不然git会报冲突不解决</span><br></pre></td></tr></table></figure></p>\n<p>以后每次发布博客<br><code>hexo new  &#39;记一次hexo 博客上线 经验总结&#39;</code> 生成md文件，写完以后提交到git仓库<br>再用命令行在本地项目执行下 <code>pm2 deploy ecosystem.json production --force</code> 即可</p>\n<h5 id=\"pm2-配置注意点\"><a href=\"#pm2-配置注意点\" class=\"headerlink\" title=\"pm2 配置注意点\"></a>pm2 配置注意点</h5><ul>\n<li><code>pm2 deploy ecosystem.json production --force</code> force一定要加不然git会报冲突不解决</li>\n<li>运行setup命令时 第一次ssh clone 会校验，要先在该目录下clone 一遍git ssh 连接，之后才会成功。不然会一直报空链接。第一次clone完删了即可。</li>\n<li><p>启动前先删了source里面的git 代码，不然pm2 会报冲突不解决而部署失败</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;pre-setup&quot;: &quot;rm -rf /var/www/myblog/production/source&quot;,</span><br><span class=\"line\">- 部署后运行 命令进行项目依赖包安装 再跑起来hexo项目 </span><br><span class=\"line\">&quot;post-deploy&quot; : &quot;npm install &amp;&amp; pm2 startOrRestart ecosystem.json --env production&quot;,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>&quot;script&quot;: &quot;app.js&quot;</code> 为了让json 找到app.js,所以放平级，这个json文件如果不是私有仓库不建议提交，当然我是提了，不过你们有高手千万别看了我的git项目的配置文件就攻击它，活动买的加上域名服务就12块钱。</p>\n</li>\n<li><p><code>/root/www/myblog/</code> 我是为了方便我登进去就能找项目才放root下的。还有这个目录需先创建，不然pm2不知道部署在哪。</p>\n</li>\n<li><p><code>pm2 deploy ecosystem.json  production setup</code> 有时候还需要再次执行，因为有时候会出现这种错误 <code>bash: line 0: cd: /root/www/myblog/source: 没有那个文件或目录</code></p>\n</li>\n</ul>\n<h4 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h4><p>这一块没啥说的 无非就是端口转发， 80转4000<br>nginx 安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install nginx</span><br></pre></td></tr></table></figure></p>\n<p><strong>安装完重连服务器，不然怎么输命令配置都不生效</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream myblog&#123;</span><br><span class=\"line\"> server localhost:4000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen  80 ;</span><br><span class=\"line\">    server_name  www.sunqx.top;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">          proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">          proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">          proxy_set_header Host $http_host;</span><br><span class=\"line\">          proxy_set_header X-Nginx-Proxy true;</span><br><span class=\"line\">          proxy_pass http://myblog;</span><br><span class=\"line\">          proxy_redirect off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>nginx 配置生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t </span><br><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前两天买了一台百度云服务器花了11块钱，花了点时间学了下如何部署hexo博客以及一些服务器方面的配置，没用hexo推荐的方式部署。专门记一个文章。系统用的是centos，先上图和链接</p>\n<h2 id=\"博客地址\"><a href=\"#博客地址\" class=\"headerlink\" title=\"博客地址\"></a>博客地址</h2><p><a href=\"http://www.sunqx.top:4000\" target=\"_blank\" rel=\"noopener\">sunqx的博客</a></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6114493-3d1caea56828ef4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"preview.png\"></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li>先用hexo快捷搭建本地blog，再把项目上传到github </li>\n<li>本地ssh无密码登陆远程服务器，把服务器的防火墙打开并配置指定端口才可以登陆</li>\n<li>远程服务器配置 ssh key 后再把项目从git clone到云服务器</li>\n<li>再用pm2，直接本地快捷部署项目到服务器并重启</li>\n<li>使用nginx 转发端口 </li>\n</ol>\n<h2 id=\"配置要点\"><a href=\"#配置要点\" class=\"headerlink\" title=\"配置要点\"></a>配置要点</h2><h4 id=\"先用hexo快捷搭建本地blog\"><a href=\"#先用hexo快捷搭建本地blog\" class=\"headerlink\" title=\"先用hexo快捷搭建本地blog\"></a>先用hexo快捷搭建本地blog</h4><p>首先解释下<br>hexo 基于nodejs的快速、简洁且高效的博客框架，它是帮人快速搭建个人博客的。<br>PM2是node进程管理工具,可以利用它来简化很多node应用管理的繁琐任务,如性能监控、自动重启、负载均衡等,而且使用非常简单。就是一开始上手感觉好容易报错。</p>\n<p>这里只将一些官网上没有的，如何本地跑起来一个hexo 项目和部署一个主题请看官网 <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo官网</a></p>\n<p><code>hexo server</code>  是项目 的启动命令 ，默认hexo启动端口是4000。但这样启动项目，nodejs是一个单线程项目，万一某一次程序出错，那整个服务就挂了。所以需要pm2 来监控这项线程，万一出错pm2还能自动重启。</p>\n<p>pm2 启动命令一般是<code>pm2 start app.js</code>  那如何用pm2 来管理hexo呢，可以通过在项目目录下新建一个 app.js<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var spawn = require(<span class=\"string\">'child_process'</span>).spawn;</span><br><span class=\"line\">free = spawn(<span class=\"string\">'hexo'</span>, [<span class=\"string\">'server'</span>, <span class=\"string\">'-p 4000'</span>]);/* 其实就是等于执行hexo server -p 4000*/</span><br><span class=\"line\"></span><br><span class=\"line\">free.stdout.on(<span class=\"string\">'data'</span>, <span class=\"keyword\">function</span> (data) &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'hexo standard output:\\n'</span> + data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">free.stderr.on(<span class=\"string\">'data'</span>, <span class=\"keyword\">function</span> (data) &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'hexo standard error output:\\n'</span> + data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">free.on(<span class=\"string\">'exit'</span>, <span class=\"keyword\">function</span> (code, signal) &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'hexo child process eixt ,exit:'</span> + code);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>如此一来在项目根目录下  就能用 <code>pm2 start app.js</code> 来跑hexo项目了</p>\n<h4 id=\"本地ssh无密码登陆远程服务器，服务器-ssh-key-配置\"><a href=\"#本地ssh无密码登陆远程服务器，服务器-ssh-key-配置\" class=\"headerlink\" title=\"本地ssh无密码登陆远程服务器，服务器 ssh key 配置\"></a>本地ssh无密码登陆远程服务器，服务器 ssh key 配置</h4><p>初次配置的云服务器需要安装这些工具包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install vim openssl build-essential libssl-dev wget curl git</span><br><span class=\"line\">yum install gcc-c++</span><br></pre></td></tr></table></figure></p>\n<p>本地配置ssh key</p>\n<ol>\n<li>本地 cd /</li>\n<li>cd .ssh  或者 open ~/.ssh  </li>\n<li>ls<br> <code>id_rsa  id_rsa.pub  known_hosts</code></li>\n<li>备份<br><code>mv id_rsa id_rsa_backup</code><br><code>mv id_rsa.pub id_rsa_backup.pub</code></li>\n<li>生成ssh公钥<br><code>ssh-keygen -t rsa -b 4096 -C &quot;931035063@qq.com&quot;</code></li>\n<li>查看<br><code>cat id_rsa</code><br><code>cat id_rsa.pub</code></li>\n<li>key作用生效<br><code>eval &quot;$(ssh-agent -s)&quot;</code><br><code>ssh-add ~/.ssh/id_rsa</code></li>\n<li>然后在连上<strong>远程服务器</strong> <code>cd ~/.ssh</code> ,编辑服务器端授权文件 <code>vi authorized_keys</code></li>\n<li>在在<strong>客户端</strong> 输入 <code>cat id_rsa.pub</code>将带有邮箱的公钥复制进去，再:wq!退出authorized_keys</li>\n<li>配置生效 <code>sudo service sshd restart</code> </li>\n<li>然后就可以直接通过 ssh root@xx.xx.xx.xx 来免密码 登陆了</li>\n</ol>\n<p>注意点:</p>\n<ul>\n<li>因为我连上云服务器后也没创建新用户，直接用root 编辑的，其他人配置是要注意一下 权限问题，我看网上也有不少人因为权限问题而生效失败</li>\n<li>如果还是配置没生效，需要看一下  <a href=\"https://www.cnblogs.com/jingwu/articles/5598340.html\" target=\"_blank\" rel=\"noopener\">sshd_config配置详解</a><br>RSAAuthentication yes<br>PubkeyAuthentication yes<br>这两项不能为no</li>\n<li>还有一个地方，每次ssh登陆输ip太过于麻烦，当然你用secureCRT这样的工具当我没说, <strong>在mac下面 可以配置快捷连接云服务器的命令</strong><br>– 在<code>sudo vim ~/.bashrc</code><br>– 新加 <code>alias ssh_baiduyun=&quot;ssh root@xx.xx.xx.xx&quot;</code><br>– <code>source .bashrc</code> 以后即可通过 <code>ssh_baiduyun</code> 连接服务器</li>\n<li>再重申一点 本地的 <code>id_rsa.pub</code> 对应的是 服务器上的 <code>authorized_keys</code>,两个复制错了就尴尬了<h4 id=\"在服务器配置ssh并clone-git-项目\"><a href=\"#在服务器配置ssh并clone-git-项目\" class=\"headerlink\" title=\"在服务器配置ssh并clone git 项目\"></a>在服务器配置ssh并clone git 项目</h4>生成服务器端公钥 和本地一样<br><code>cd ~/.ssh</code><br><code>ssh-keygen -t rsa -b 4096 -C &quot;931035063@qq.com&quot;</code><br><code>eval &quot;$(ssh-agent -s)&quot;</code><br><code>ssh-add ~/.ssh/id_rsa</code><br>生效,centos 下<code>service sshd restart</code><br>把  <code>id_rsa.pub</code> 里面的内容 放到git 账户里面ssh 配置里<br><img src=\"https://upload-images.jianshu.io/upload_images/6114493-9b765e356cd0a732.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot 2018-12-02_23-25-37.png\"><br><strong>注意！！</strong> 在服务器里你准备clone 项目的文件夹里 先用ssh clone 一遍 <code>git@github.com:SHpoi/my-blog.git</code> 第一次git clone 会有确认项，不然后面用pm2部署老是会遇到一个拉取项目为空的报错。</li>\n</ul>\n<h4 id=\"在服务器配置nodejs环境\"><a href=\"#在服务器配置nodejs环境\" class=\"headerlink\" title=\"在服务器配置nodejs环境\"></a>在服务器配置nodejs环境</h4><p>服务器配置nodejs 用的是nvm，安装nvm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</span><br></pre></td></tr></table></figure></p>\n<p><strong>nvm 安装以后重新连接云服务器</strong>，不然环境变量不会生效<br>nvm安装nodejs，依次执行以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install v8.9.0</span><br><span class=\"line\">nvm use v8.9.0</span><br><span class=\"line\">nvm alias default v8.9.0</span><br><span class=\"line\">npm --registry=https://registry.npm.taobao.org install -g npm</span><br></pre></td></tr></table></figure></p>\n<p>拉取完以后记得先试用<code>hexo server</code>着能不能跑起来,进入文件夹先<code>npm install</code>再看还差什么其他的全局依赖</p>\n<h4 id=\"在本地使用pm2-一键部署云服务器上的项目\"><a href=\"#在本地使用pm2-一键部署云服务器上的项目\" class=\"headerlink\" title=\"在本地使用pm2 一键部署云服务器上的项目\"></a>在本地使用pm2 一键部署云服务器上的项目</h4><p>这一块真的是血泪啊，就2行命令行，报的错查了一下午。</p>\n<ol>\n<li>在本地项目目录下新建一个 ecosystem.json，与app.js平级<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;apps&quot; : [&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;myApp&quot;,</span><br><span class=\"line\">    &quot;script&quot;: &quot;app.js&quot;,</span><br><span class=\"line\">    &quot;instances&quot;: 1,</span><br><span class=\"line\">    &quot;autorestart&quot;: true,</span><br><span class=\"line\">    &quot;env&quot;: &#123;</span><br><span class=\"line\">      &quot;NODE_ENV&quot;: &quot;development&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;env_production&quot;: &#123;</span><br><span class=\"line\">      &quot;NODE_ENV&quot;: &quot;production&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">  &quot;deploy&quot; : &#123;</span><br><span class=\"line\">    &quot;production&quot; : &#123;</span><br><span class=\"line\">      &quot;user&quot; : &quot;root&quot;,</span><br><span class=\"line\">      &quot;host&quot; : &quot;xx.xx.xx.xx&quot;,</span><br><span class=\"line\">      &quot;port&quot; : &quot;22&quot;,</span><br><span class=\"line\">      &quot;ssh_options&quot;: &quot;StrictHostKeyChecking=no&quot;,</span><br><span class=\"line\">      &quot;ref&quot;  : &quot;origin/master&quot;,</span><br><span class=\"line\">      &quot;repo&quot; : &quot;git@github.com:SHpoi/my-blog.git&quot;,</span><br><span class=\"line\">      &quot;path&quot; : &quot;/root/www/myblog/&quot;,</span><br><span class=\"line\">      &quot;env&quot;: &#123;</span><br><span class=\"line\">        &quot;NODE_ENV&quot;: &quot;production&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;pre-setup&quot;: &quot;rm -rf /var/www/myblog/production/source&quot;,</span><br><span class=\"line\">      &quot;post-deploy&quot; : &quot;npm install &amp;&amp; pm2 startOrRestart ecosystem.json --env production&quot;,</span><br><span class=\"line\">      &quot;env&quot;  : &#123;</span><br><span class=\"line\">        &quot;NODE_ENV&quot;: &quot;production&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后运行2行命令 第一行在云服务器搭建运行环境，第二行每次重新发布项目需要<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 deploy ecosystem.json production setup</span><br><span class=\"line\">注意有巨坑，第一次ssh clone 会校验，要先在该目录下clone 一遍git ssh 连接，之后才会成功。不然会一直报空链接</span><br><span class=\"line\">pm2 deploy ecosystem.json production --force</span><br><span class=\"line\">force一定要加不然git会报冲突不解决</span><br></pre></td></tr></table></figure></p>\n<p>以后每次发布博客<br><code>hexo new  &#39;记一次hexo 博客上线 经验总结&#39;</code> 生成md文件，写完以后提交到git仓库<br>再用命令行在本地项目执行下 <code>pm2 deploy ecosystem.json production --force</code> 即可</p>\n<h5 id=\"pm2-配置注意点\"><a href=\"#pm2-配置注意点\" class=\"headerlink\" title=\"pm2 配置注意点\"></a>pm2 配置注意点</h5><ul>\n<li><code>pm2 deploy ecosystem.json production --force</code> force一定要加不然git会报冲突不解决</li>\n<li>运行setup命令时 第一次ssh clone 会校验，要先在该目录下clone 一遍git ssh 连接，之后才会成功。不然会一直报空链接。第一次clone完删了即可。</li>\n<li><p>启动前先删了source里面的git 代码，不然pm2 会报冲突不解决而部署失败</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;pre-setup&quot;: &quot;rm -rf /var/www/myblog/production/source&quot;,</span><br><span class=\"line\">- 部署后运行 命令进行项目依赖包安装 再跑起来hexo项目 </span><br><span class=\"line\">&quot;post-deploy&quot; : &quot;npm install &amp;&amp; pm2 startOrRestart ecosystem.json --env production&quot;,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>&quot;script&quot;: &quot;app.js&quot;</code> 为了让json 找到app.js,所以放平级，这个json文件如果不是私有仓库不建议提交，当然我是提了，不过你们有高手千万别看了我的git项目的配置文件就攻击它，活动买的加上域名服务就12块钱。</p>\n</li>\n<li><p><code>/root/www/myblog/</code> 我是为了方便我登进去就能找项目才放root下的。还有这个目录需先创建，不然pm2不知道部署在哪。</p>\n</li>\n<li><p><code>pm2 deploy ecosystem.json  production setup</code> 有时候还需要再次执行，因为有时候会出现这种错误 <code>bash: line 0: cd: /root/www/myblog/source: 没有那个文件或目录</code></p>\n</li>\n</ul>\n<h4 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h4><p>这一块没啥说的 无非就是端口转发， 80转4000<br>nginx 安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install nginx</span><br></pre></td></tr></table></figure></p>\n<p><strong>安装完重连服务器，不然怎么输命令配置都不生效</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream myblog&#123;</span><br><span class=\"line\"> server localhost:4000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen  80 ;</span><br><span class=\"line\">    server_name  www.sunqx.top;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">          proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">          proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">          proxy_set_header Host $http_host;</span><br><span class=\"line\">          proxy_set_header X-Nginx-Proxy true;</span><br><span class=\"line\">          proxy_pass http://myblog;</span><br><span class=\"line\">          proxy_redirect off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>nginx 配置生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t </span><br><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cllgb7w4w00051twb0k5vnkam","category_id":"cllgb7w4r00021twbl9v0bj4p","_id":"cllgb7w54000c1twbt0rnlsoe"},{"post_id":"cllgb7w4j00001twbbxk39hls","category_id":"cllgb7w4r00021twbl9v0bj4p","_id":"cllgb7w56000g1twb2pig0dyz"},{"post_id":"cllgb7w4o00011twbmdmzu0wy","category_id":"cllgb7w4r00021twbl9v0bj4p","_id":"cllgb7w58000j1twb5spqcual"},{"post_id":"cllgb7w55000f1twbgo4ck1ki","category_id":"cllgb7w4r00021twbl9v0bj4p","_id":"cllgb7w5c000n1twbjx7cmeq1"},{"post_id":"cllgb7w4t00041twbgaq4o8w2","category_id":"cllgb7w54000d1twb98kb4iyd","_id":"cllgb7w5d000q1twbw8p9yerk"},{"post_id":"cllgb7w4y00061twbd7log1tg","category_id":"cllgb7w54000d1twb98kb4iyd","_id":"cllgb7w5e000r1twbmzcirv0c"},{"post_id":"cllgb7w51000a1twb04aoflzp","category_id":"cllgb7w5c000o1twbrjgfkk0l","_id":"cllgb7w5g000w1twbp86fm1zk"},{"post_id":"cllgb7w53000b1twbogi7jwg3","category_id":"cllgb7w54000d1twb98kb4iyd","_id":"cllgb7w5j00101twbok9cf4d9"},{"post_id":"cllgb7w57000i1twbhbt3hbw2","category_id":"cllgb7w5g000v1twbau6d2n6s","_id":"cllgb7w5k00131twbtgdp643g"}],"PostTag":[{"post_id":"cllgb7w4j00001twbbxk39hls","tag_id":"cllgb7w4t00031twb0e34m1sy","_id":"cllgb7w5100091twbiva8i58b"},{"post_id":"cllgb7w4o00011twbmdmzu0wy","tag_id":"cllgb7w4z00081twbl7ti7prl","_id":"cllgb7w56000h1twbnsf0qp4i"},{"post_id":"cllgb7w4t00041twbgaq4o8w2","tag_id":"cllgb7w54000e1twbaw6x5h2g","_id":"cllgb7w5b000m1twbynqq4jxw"},{"post_id":"cllgb7w4w00051twb0k5vnkam","tag_id":"cllgb7w59000l1twb88ghfmqh","_id":"cllgb7w5g000u1twbt45y2ptb"},{"post_id":"cllgb7w4w00051twb0k5vnkam","tag_id":"cllgb7w5d000p1twbe5283wvo","_id":"cllgb7w5h000x1twblp7k9br0"},{"post_id":"cllgb7w4y00061twbd7log1tg","tag_id":"cllgb7w5f000t1twbu1amfjg1","_id":"cllgb7w5i000z1twbyu0iuyf8"},{"post_id":"cllgb7w53000b1twbogi7jwg3","tag_id":"cllgb7w5h000y1twbpe2gj3hf","_id":"cllgb7w5k00121twbfk7y75uw"},{"post_id":"cllgb7w57000i1twbhbt3hbw2","tag_id":"cllgb7w5j00111twbc1bxc1o4","_id":"cllgb7w5n00161twb9plyzpjp"},{"post_id":"cllgb7w57000i1twbhbt3hbw2","tag_id":"cllgb7w5l00141twbajcmnhhi","_id":"cllgb7w5n00171twbi351z22u"},{"post_id":"cllgb7w57000i1twbhbt3hbw2","tag_id":"cllgb7w5m00151twbwkxjhof6","_id":"cllgb7w5o00181twbftbl2ld5"}],"Tag":[{"name":"service","_id":"cllgb7w4t00031twb0e34m1sy"},{"name":"router","_id":"cllgb7w4z00081twbl7ti7prl"},{"name":"webview","_id":"cllgb7w54000e1twbaw6x5h2g"},{"name":"pipe","_id":"cllgb7w59000l1twb88ghfmqh"},{"name":"emit","_id":"cllgb7w5d000p1twbe5283wvo"},{"name":"hot codePush","_id":"cllgb7w5f000t1twbu1amfjg1"},{"name":"部署","_id":"cllgb7w5h000y1twbpe2gj3hf"},{"name":"pm2","_id":"cllgb7w5j00111twbc1bxc1o4"},{"name":"nginx","_id":"cllgb7w5l00141twbajcmnhhi"},{"name":"hexo","_id":"cllgb7w5m00151twbwkxjhof6"}]}}