<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Nginx配置学习</title>
    <link href="/2023/08/19/Nginx%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/08/19/Nginx%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#nginx-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4">nginx 基础命令</a></li><li><a href="#nginx-location-%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%99">nginx location 路由规则</a><ul><li><a href="#demo-%E5%90%8E%E7%BC%80%E5%90%8D%E5%8C%B9%E9%85%8D">demo 后缀名匹配</a></li><li><a href="#demo2%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99">demo2匹配规则</a></li><li><a href="#demo3%E5%8C%B9%E9%85%8D%E9%A1%BA%E5%BA%8F">demo3匹配顺序</a></li><li><a href="#demo4%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%8C%B9%E9%85%8D">demo4无符号匹配</a></li></ul></li><li><a href="#nginx%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85">nginx编译安装</a></li><li><a href="#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8B%E4%B8%80%E6%AC%A1http%E8%AF%B7%E6%B1%82">如何使用命令查看一次http请求</a></li><li><a href="#nginx-%E6%97%A5%E5%BF%97">nginx 日志</a><ul><li><a href="#errorlog">error.log</a></li><li><a href="#accesslog">access.log</a></li><li><a href="#%E6%8C%89%E6%97%A5%E6%9C%9F%E7%94%9F%E6%88%90%E8%AE%BF%E9%97%AE%E6%97%A5%E5%BF%97">按日期生成访问日志</a></li></ul></li><li><a href="#nginx%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE">nginx模块配置</a><ul><li><a href="#%E6%9F%A5%E7%9C%8Bnginx%E5%B7%B2%E5%AE%89%E8%A3%85%E6%A8%A1%E5%9D%97">查看nginx已安装模块</a></li><li><a href="#%E6%9F%A5%E7%9C%8Bnginx%E5%8F%AF%E4%BB%A5%E5%AE%89%E8%A3%85%E7%9A%84%E5%8C%85">查看nginx可以安装的包</a></li></ul></li><li><a href="#%E5%9F%BA%E4%BA%8Enginx%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84">基于nginx的中间件架构</a><ul><li><a href="#%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90web%E6%9C%8D%E5%8A%A1">静态资源web服务</a></li><li><a href="#mimetype-%E8%B5%84%E6%BA%90%E7%9A%84%E5%AA%92%E4%BD%93%E7%B1%BB%E5%9E%8B">mime.type 资源的媒体类型</a></li><li><a href="#sendfile-%E9%85%8D%E7%BD%AE">sendfile 配置</a></li><li><a href="#gzip%E5%8E%8B%E7%BC%A9">gzip压缩</a></li><li><a href="#http%E7%BC%93%E5%AD%98">http缓存</a></li><li><a href="#expireshttp10">expires（http1.0）</a></li><li><a href="#expireshttp11">expires（http1.1）</a></li><li><a href="#nginx-%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE">nginx 跨域访问</a></li><li><a href="#nginx-%E9%98%B2%E7%9B%97%E9%93%BE">nginx 防盗链</a></li></ul></li><li><a href="#nginx-%E4%BB%A3%E7%90%86">nginx 代理</a><ul><li><a href="#%E5%8F%91%E5%90%91%E4%BB%A3%E7%90%86%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86">发向代理&#x2F;正向代理</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E9%85%8D%E7%BD%AE">常用代理的配置</a></li><li><a href="#proxy_params">proxy_params</a></li><li><a href="#nginx-%E8%BD%AE%E8%AF%A2">nginx 轮询</a></li></ul></li><li><a href="#nginx-%E5%8F%98%E9%87%8F%E8%A7%A3%E6%9E%90">nginx 变量解析</a></li><li><a href="#nginx%E7%BC%93%E5%AD%98%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%BC%93%E5%AD%98%E5%87%8F%E5%B0%91%E5%90%8E%E7%AB%AF%E5%8E%8B%E5%8A%9B%E6%8F%90%E9%AB%98%E7%BD%91%E7%AB%99%E5%B9%B6%E5%8F%91%E5%BB%B6%E6%97%B6">nginx缓存（代理服务器端缓存，减少后端压力，提高网站并发延时）</a><ul><li><a href="#%E9%83%A8%E5%88%86%E9%A1%B5%E9%9D%A2%E4%B8%8D%E7%BC%93%E5%AD%98">部分页面不缓存</a></li></ul></li></ul><h4 id="nginx-基础命令"><a href="#nginx-基础命令" class="headerlink" title="nginx 基础命令"></a>nginx 基础命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx -t // 检查配置文件 查看当前nginx 配置路径<br>nginx -s reload // 重载nginx配置文件<br></code></pre></td></tr></table></figure><h3 id="nginx-location-路由规则"><a href="#nginx-location-路由规则" class="headerlink" title="nginx location 路由规则"></a>nginx location 路由规则</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> [=|~|~*|^~|@] pattern &#123; ... &#125;<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx">= : 表示精确匹配后面的<span class="hljs-attribute">url</span><br><span class="hljs-regexp">~ :</span> 表示正则匹配，但是区分大小写<br><span class="hljs-regexp">~* :</span> 正则匹配，不区分大小写<span class="hljs-regexp"></span><br><span class="hljs-regexp">^~</span> : 表示普通字符匹配，如果该选项匹配，只匹配该选项，不匹配别的选项，一般用来匹配目录<br>@ : <span class="hljs-string">&quot;@&quot;</span> 定义一个命名的 location，使用在内部定向时，例如 error_page<br></code></pre></td></tr></table></figure><h4 id="demo-后缀名匹配"><a href="#demo-后缀名匹配" class="headerlink" title="demo 后缀名匹配"></a>demo 后缀名匹配</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> <span class="hljs-regexp">~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css|woff|ttf|map|woff2|json|manifest|svg|eot)$</span>  &#123;   <br>  <span class="hljs-attribute">root</span> /Users/sunqixiong/project/crm-cerm/ecrm-mobile/www;<br>&#125;<br></code></pre></td></tr></table></figure><p>就是正则匹配,其中<code>.*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css|woff|ttf|map|woff2|json|manifest|svg|eot)$</code>就是一串匹配后缀名的正则表达式</p><h4 id="demo2匹配规则"><a href="#demo2匹配规则" class="headerlink" title="demo2匹配规则"></a>demo2匹配规则</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> = /world &#123;<br>  <span class="hljs-attribute">return</span> <span class="hljs-number">600</span>;<br>&#125;<br><br><span class="hljs-section">location</span> = /hello &#123;<br>  <span class="hljs-attribute">return</span> <span class="hljs-number">600</span>;<br>&#125;<br><br><span class="hljs-section">location</span> <span class="hljs-regexp">~ /hellowo</span> &#123;<br>  <span class="hljs-attribute">return</span> <span class="hljs-number">602</span>;<br>&#125;<br><br><span class="hljs-section">location</span><span class="hljs-regexp"> ^~</span> /hello &#123;<br>  <span class="hljs-attribute">return</span> <span class="hljs-number">601</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">- 请求 localhost/world 返回600<br>- 请求 localhost/world2 localhost/test/world 返回其他<br>- 请求 localhost/hello  返回600<br>- 请求 localhost/hello/123 返回601<br>- 请求 localhost/hellow 返回601<br>- 请求 localhost/hellowo 返回601<br>- 请求 localhost/test/hellowo  返回602<br>- 请求 localhost/test/hello 返回其他<br></code></pre></td></tr></table></figure><ul><li>= 是精确完整匹配, 且优秀最高</li><li>匹配时，如果 ~ 和 ^~ 同时匹配规则，则 ^~ 优先</li><li>^~ 这个不会匹配请求url中后面的路径, 如上面的 &#x2F;test&#x2F;hello 没有匹配上</li><li>^~ 不支持正则，和&#x3D;相比，范围更广， hellowo 是可以被^~匹配，但是 &#x3D; 不会匹配</li><li>~ 路径中只要包含就可以匹配，如上面的 &#x2F;test&#x2F;hellowo 返回了602</li></ul><h4 id="demo3匹配顺序"><a href="#demo3匹配顺序" class="headerlink" title="demo3匹配顺序"></a>demo3匹配顺序</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> <span class="hljs-regexp">~ /hello</span> &#123;<br>  <span class="hljs-attribute">return</span> <span class="hljs-number">602</span>;<br>&#125;<br><br><span class="hljs-section">location</span> <span class="hljs-regexp">~ /helloworld</span> &#123;<br>  <span class="hljs-attribute">return</span> <span class="hljs-number">601</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">- 请求 localhost/world/helloworld 返回 602<br>- 请求 localhost/helloworld 返回 602<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> <span class="hljs-regexp">~ /helloworld</span> &#123;<br>  <span class="hljs-attribute">return</span> <span class="hljs-number">601</span>;<br>&#125;<br><br><span class="hljs-section">location</span> <span class="hljs-regexp">~ /hello</span> &#123;<br>  <span class="hljs-attribute">return</span> <span class="hljs-number">602</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">- 请求 localhost/helloworld 返回601<br>- 请求 localhost/world/helloworld 返回601<br>- 请求 localhost/helloWorld 返回602<br></code></pre></td></tr></table></figure><p>所以同时正则匹配时</p><ul><li>放在前面的优先匹配</li><li>注意如果不区分大小写时，使用~*</li><li>尽量将精确匹配的放在前面</li></ul><h4 id="demo4无符号匹配"><a href="#demo4无符号匹配" class="headerlink" title="demo4无符号匹配"></a>demo4无符号匹配</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span><span class="hljs-regexp"> ^~</span> /hello/ &#123;<br>  <span class="hljs-attribute">return</span> <span class="hljs-number">601</span>;<br>&#125;<br><br><span class="hljs-section">location</span> /hello/world &#123;<br>  <span class="hljs-attribute">return</span> <span class="hljs-number">602</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">- http://localhost/hello/wor 返回601<br>- http://localhost/hello/world 返回602<br>- http://localhost/hello/world23 返回602<br>- http://localhost/hello/world/123 返回602<br></code></pre></td></tr></table></figure><ul><li>没有符号时，全匹配是优先于^~的</li></ul><h3 id="nginx编译安装"><a href="#nginx编译安装" class="headerlink" title="nginx编译安装"></a>nginx编译安装</h3><p>首先下载依赖包</p><p>nginx，penSSL、PCRE、zlib</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> openssl-1.1.0g pcre-8.41 zlib-1.2.11 /usr/local/bin<br></code></pre></td></tr></table></figure><p>执行配置命令，几个依赖包的路径对就可以，官方文档提示要写到一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure --with-http_ssl_module  --with-http_stub_status_module --with-http_gzip_static_module  --with-pcre=../pcre-8.00 --with-zlib=../zlib-1.2.11 --with-openssl=../openssl-1.1.0k<br></code></pre></td></tr></table></figure><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make<br></code></pre></td></tr></table></figure><p>之后安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo make install<br></code></pre></td></tr></table></figure><p>配置nginx 环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /usr/local/nginx/sbin/nginx /usr/local/bin/nginx(做软链，添加到环境变量)<br></code></pre></td></tr></table></figure><p>然后就可以执行 <code>nginx -v</code> 看依赖了</p><h3 id="如何使用命令查看一次http请求"><a href="#如何使用命令查看一次http请求" class="headerlink" title="如何使用命令查看一次http请求"></a>如何使用命令查看一次http请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -v http://www.baidu.com &gt;/dev/null<br></code></pre></td></tr></table></figure><h3 id="nginx-日志"><a href="#nginx-日志" class="headerlink" title="nginx 日志"></a>nginx 日志</h3><h4 id="error-log"><a href="#error-log" class="headerlink" title="error.log"></a>error.log</h4><p>错误日志的存放位置 级别，放在最外面</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">error_log</span> /usr/local/etc/nginx/log/<span class="hljs-literal">error</span>.log <span class="hljs-literal">warn</span>;<br></code></pre></td></tr></table></figure><h4 id="access-log"><a href="#access-log" class="headerlink" title="access.log"></a>access.log</h4><p>首先第一条 log_format要放在 http之下，其次后面的main 指的是 log_format对应的名字</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] &quot;<span class="hljs-variable">$request</span>&quot; &#x27;</span><br>                  <span class="hljs-string">&#x27;<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> &quot;<span class="hljs-variable">$http_referer</span>&quot; &#x27;</span><br>                  <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">access_log</span>  /var/log/nginx/access.log  main;<br></code></pre></td></tr></table></figure><h4 id="按日期生成访问日志"><a href="#按日期生成访问日志" class="headerlink" title="按日期生成访问日志"></a>按日期生成访问日志</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#此处是本地开发所需，如是容器，则无需owner</span><br><span class="hljs-attribute">user</span> root owner;<br>http&#123;<br>    <span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] &quot;<span class="hljs-variable">$request</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;zhuang tai m<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> &quot;<span class="hljs-variable">$http_referer</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;<br>    ...<br>    server&#123;<br>       <span class="hljs-attribute">if</span> (<span class="hljs-variable">$time_iso8601</span> <span class="hljs-regexp">~ &quot;^(\d</span>&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)&quot;) &#123;<br>            <span class="hljs-attribute">set</span> <span class="hljs-variable">$year</span> <span class="hljs-variable">$1</span>;<br>            <span class="hljs-attribute">set</span> <span class="hljs-variable">$month</span> <span class="hljs-variable">$2</span>;<br>            <span class="hljs-attribute">set</span> <span class="hljs-variable">$day</span> <span class="hljs-variable">$3</span>;<br>        &#125;<br><br>        <span class="hljs-attribute">access_log</span>  /usr/local/etc/nginx/log/access_<span class="hljs-variable">$year</span>-<span class="hljs-variable">$month</span>-<span class="hljs-variable">$day</span>.log  main;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>有个缺点，访问日志和错误日志生成的代码只能放在server下面</p><p>还有其他的方法如编写定时sh脚本</p><h3 id="nginx模块配置"><a href="#nginx模块配置" class="headerlink" title="nginx模块配置"></a>nginx模块配置</h3><p>nginx编译安装以后想要再加nginx模块只能重新配置再编译安装。</p><h4 id="查看nginx已安装模块"><a href="#查看nginx已安装模块" class="headerlink" title="查看nginx已安装模块"></a>查看nginx已安装模块</h4><p>nginx 大V看模块 小v看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx -V<br></code></pre></td></tr></table></figure><h4 id="查看nginx可以安装的包"><a href="#查看nginx可以安装的包" class="headerlink" title="查看nginx可以安装的包"></a>查看nginx可以安装的包</h4><p>进入nginx 编译安装前的包的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> auto/options | grep YES<br></code></pre></td></tr></table></figure><p>模块介绍</p><ol><li>连接频率限制</li></ol><p><code>ngx_http_limit_conn_module</code></p><p>在nginx配置文件中的(http, server, location) 下配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">http</span> &#123;<br>  <span class="hljs-comment"># ...其它代码省略...</span><br>  <span class="hljs-comment"># 开辟一个10m的连接空间，命名为addr</span><br>  <span class="hljs-attribute">limit_conn_zone</span> <span class="hljs-variable">$binary_remote_addr</span> zone=addr:<span class="hljs-number">10m</span>;<br>  <span class="hljs-section">server</span> &#123;<br>    ...<br>    <span class="hljs-section">location</span> /download/ &#123;<br>      <span class="hljs-comment"># 服务器每次只允许一个IP地址连接</span><br>      <span class="hljs-attribute">limit_conn</span> addr <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>请求频率限制</li></ol><p><code>ngx_http_limit_req_module</code></p><p>在nginx配置文件中的(http, server, location) 下配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">http</span> &#123;<br> <br>  <span class="hljs-comment"># ...其它代码省略...</span><br>   <br>  <span class="hljs-comment"># 开辟一个10m的请求空间，命名为one。同一个IP发送的请求，平均每秒只处理一次</span><br>  <span class="hljs-attribute">limit_req_zone</span> <span class="hljs-variable">$binary_remote_addr</span> zone=one:<span class="hljs-number">10m</span> rate=1r/s;<br>   <br>  <span class="hljs-section">server</span> &#123;<br>      ...<br> <br>    <span class="hljs-section">location</span> /search/ &#123;<br>      <span class="hljs-attribute">limit_req</span> zone=one;<br>      <span class="hljs-comment"># 当客户端请求超过指定次数，最多宽限5次请求，并延迟处理，1秒1个请求</span><br>      <span class="hljs-comment"># limit_req zone=one burst=5;</span><br>      <span class="hljs-comment"># 当客户端请求超过指定次数，最多宽限5次请求，并立即处理。</span><br>      <span class="hljs-comment"># limit_req zone=one burst=5 nodelay;</span><br> <br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>基于IP的访问控制</li></ol><p><code>ngx_http_access_module</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Syntax:    allow address | CIDR | unix: | all;<br>Default:  —<br>Context:  http, server, location, limit_except<br> <br>Syntax:    deny address | CIDR | unix: | all;<br>Default:  —<br>Context:  http, server, location, limit_except<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>  <span class="hljs-comment"># ...其它代码省略...</span><br>  <span class="hljs-section">location</span> <span class="hljs-regexp">~ ^/index_1.html</span> &#123;<br>    <span class="hljs-attribute">root</span>  /usr/share/nginx/html;<br>    <span class="hljs-attribute">deny</span> <span class="hljs-number">151.19.57.60</span>; <span class="hljs-comment"># 拒绝这个IP访问</span><br>    <span class="hljs-attribute">allow</span> all; <span class="hljs-comment"># 允许其他所有IP访问</span><br>  &#125;<br> <br>  <span class="hljs-section">location</span> <span class="hljs-regexp">~ ^/index_2.html</span> &#123;<br>    <span class="hljs-attribute">root</span>  /usr/share/nginx/html;<br>    <span class="hljs-attribute">allow</span> <span class="hljs-number">151.19.57.0</span>/<span class="hljs-number">24</span>; <span class="hljs-comment"># 允许IP 151.19.57.* 访问</span><br>    <span class="hljs-attribute">deny</span> all; <span class="hljs-comment"># 拒绝其他所有IP访问</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ngx_http_access_module 的局限性</p><p>当客户端通过代理访问时，nginx的remote_addr获取的是代理的IP</p><h3 id="基于nginx的中间件架构"><a href="#基于nginx的中间件架构" class="headerlink" title="基于nginx的中间件架构"></a>基于nginx的中间件架构</h3><h4 id="静态资源web服务"><a href="#静态资源web服务" class="headerlink" title="静态资源web服务"></a>静态资源web服务</h4><h4 id="mime-type-资源的媒体类型"><a href="#mime-type-资源的媒体类型" class="headerlink" title="mime.type 资源的媒体类型"></a>mime.type 资源的媒体类型</h4><p>这玩意看起来不显眼，但是如果没了它，文件资源下载了浏览器却没法识别</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">include</span>     /etc/nginx/mime.types;<br></code></pre></td></tr></table></figure><h4 id="sendfile-配置"><a href="#sendfile-配置" class="headerlink" title="sendfile 配置"></a>sendfile 配置</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">语法： sendfile on | off;<br>默认值： sendfile off;<br>上下文： http，server，location，if in location<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">http</span> ｛<br>    <span class="hljs-comment"># other directives</span><br>    sendfile    <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment"># other directives</span><br>｝<br></code></pre></td></tr></table></figure><p>指定是否使用sendfile系统调用来传输文件。</p><p>sendfile系统调用在两个文件描述符之间直接传递数据(完全在内核中操作)，从而避免了数据在内核缓冲区和用户缓冲区之间的拷贝，操作效率很高，被称之为零拷贝。</p><p>所以当 Nginx 是一个静态文件服务器的时候，开启 SENDFILE 配置项能大大提高 Nginx 的性能。 但是当 Nginx 是作为一个反向代理来使用的时候，SENDFILE 则没什么用了</p><h4 id="gzip压缩"><a href="#gzip压缩" class="headerlink" title="gzip压缩"></a>gzip压缩</h4><p>注：开启 gzip_static on 指令需要 http_gzip_static_module 模块</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>; <br>    <span class="hljs-attribute">gzip_static</span> <span class="hljs-literal">on</span>; <span class="hljs-comment"># Nginx的动态压缩是对每个请求先压缩再输出，这样造成虚拟机浪费了很多cpu，解决这个问题可以利用nginx模块Gzip Precompression，这个模块的作用是对于需要压缩的文件，直接读取已经压缩好的文件(文件名为加.gz)，而不是动态压缩，对于不支持gzip的请求则读取原文件</span><br>    <span class="hljs-attribute">gzip_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">16k</span>;<br>    <span class="hljs-attribute">gzip_comp_level</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-attribute">gzip_types</span> text/plain application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="http缓存"><a href="#http缓存" class="headerlink" title="http缓存"></a>http缓存</h4><ol><li>先校验是否过期 Expires[http1.0]、Cache-Control(max-age)[http1.1]</li><li>再校验协议中etag头信息校验</li><li>再校验Last-Modified 头信息校验</li></ol><p>注意：<br>有时候请求到的缓存文件，明明请求头没有加 <code>cache-control</code>，但请求头会有 <code>Cache-Control: max-age=0</code>经测试发现chrome会对html、png等格式自带，而对css、js文件不自带，这个机制很好，这是因为浏览器会自带这个请求头让服务器去检查这个文件的etag或者Last-Modified是否过期</p><h4 id="expires（http1-0）"><a href="#expires（http1-0）" class="headerlink" title="expires（http1.0）"></a>expires（http1.0）</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> <span class="hljs-regexp">~ .*\.(jpg|png)$</span> &#123;<br>    <span class="hljs-attribute">expires</span> <span class="hljs-number">24h</span>;<br>    <span class="hljs-attribute">root</span> /Users/sunqixiong/Pictures;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一次请求就会返回 response</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx">Expires: Thu, 15 <span class="hljs-attribute">Aug</span> <span class="hljs-number">2019</span> <span class="hljs-number">07</span>:<span class="hljs-number">47</span>:<span class="hljs-number">54</span> GMT<br>Cache-Control: max-age=<span class="hljs-number">86400</span><br></code></pre></td></tr></table></figure><p>第二次请求返回304，返回 response 除了一样以外，它的request header 还是带上了 <code>Cache-Control: max-age=0</code>，文件来源还是other，并没有从cache  memory 来，因为它是图片chrome自带Cache-Control:max-age&#x3D;0</p><h4 id="expires（http1-1）"><a href="#expires（http1-1）" class="headerlink" title="expires（http1.1）"></a>expires（http1.1）</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /zjmobile &#123;<br>    <span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_filename</span> <span class="hljs-regexp">~ .*\.(htm|html)$)</span><br>    &#123;<br>        <span class="hljs-attribute">add_header</span> Cache-Control <span class="hljs-literal">no</span>-cache;<br>    &#125;<br>    <span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_filename</span> <span class="hljs-regexp">~ .*\.(js|css|png|jpg|ttf|eot|svg|jpeg|woff)$)</span><br>    &#123;<br>        <span class="hljs-attribute">add_header</span>  Cache-Control  max-age=<span class="hljs-number">86400</span>;<br>    &#125;<br>    <span class="hljs-attribute">alias</span>   /app/app/enrollment;<br>    <span class="hljs-attribute">index</span>  index.html;<br>    <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.html <span class="hljs-literal">last</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="nginx-跨域访问"><a href="#nginx-跨域访问" class="headerlink" title="nginx 跨域访问"></a>nginx 跨域访问</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#设置允许来跨域访问的网站</span><br><span class="hljs-attribute">add_header</span> Access-Control-Allow-Origin *;<br><span class="hljs-comment">#add_header Access-Control-Allow-Origin http://www.jsonc.com;</span><br><span class="hljs-attribute">add_header</span> Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS<br></code></pre></td></tr></table></figure><h4 id="nginx-防盗链"><a href="#nginx-防盗链" class="headerlink" title="nginx 防盗链"></a>nginx 防盗链</h4><p>http_refer 上一级页面的地址</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">valid_referers</span> <span class="hljs-literal">none</span> <span class="hljs-literal">blocked</span> <span class="hljs-number">127.0.0.1</span>;<br>    if($invalid_referer)&#123;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试防盗链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -e <span class="hljs-string">&quot;http://www.baidu.com&quot;</span> -I http://localhost:7676/refer<br>curl -e 127.0.0.1 -I http://localhost:7676/refer<br></code></pre></td></tr></table></figure><h3 id="nginx-代理"><a href="#nginx-代理" class="headerlink" title="nginx 代理"></a>nginx 代理</h3><h4 id="发向代理-正向代理"><a href="#发向代理-正向代理" class="headerlink" title="发向代理&#x2F;正向代理"></a>发向代理&#x2F;正向代理</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#发向代理</span><br><span class="hljs-section">location</span> /zjmobile/service &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://tomcat_pool/zjcm/service<br>&#125;<br><span class="hljs-comment">#正向代理</span><br>location / &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://<span class="hljs-variable">$http_host</span><span class="hljs-variable">$request_uri</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="常用代理的配置"><a href="#常用代理的配置" class="headerlink" title="常用代理的配置"></a>常用代理的配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8080;<br>    <span class="hljs-attribute">include</span> proxy_params;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="proxy-params"><a href="#proxy-params" class="headerlink" title="proxy_params"></a>proxy_params</h4><p>注意:proxy buffer这一块具体数值，看服务器数值决定。虽然可以通用，但如果不熟悉，还是不建议使用。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_redirect</span> default;<br><span class="hljs-attribute">proxy_set_header</span> HOST <span class="hljs-variable">$http_host</span>;<br><span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>; <span class="hljs-comment">#带上用户真实的ip</span><br><br><span class="hljs-attribute">proxy_connect_timeout</span> <span class="hljs-number">30</span>;<br><br><span class="hljs-attribute">proxy_buffering</span> <span class="hljs-literal">on</span>;<span class="hljs-comment">#是否开启对后端response的缓冲</span><br><span class="hljs-attribute">proxy_buffer_size</span> <span class="hljs-number">32k</span>; <span class="hljs-comment">#缓存response的第一部分,通常是header,默认proxy_buffer_size 被设置成 proxy_buffers 里一个buffer 的大小，当然可以设置更小些。</span><br><span class="hljs-attribute">proxy_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">128k</span>;<span class="hljs-comment">#前面一个是num,后面一个是每个buffer的size.Nginx将会尽可能的读取后端服务器的数据到buffer，直到proxy_buffers设置的所有buffer们被写满或者数据被读取完(EOF)，此时Nginx开始向客户端传输数据，会同时传输这一整串buffer们。如果数据很大的话，Nginx会接收并把他们写入到temp_file里去，大小由proxy_max_temp_file_size 控制。</span><br><span class="hljs-attribute">proxy_busy_buffers_size</span> <span class="hljs-number">256k</span>;<span class="hljs-comment">#一旦proxy_buffers设置的buffer被写入，直到buffer里面的数据被完整的传输完（传输到客户端），这个buffer将会一直处 在busy状态，我们不能对这个buffer进行任何别的操作。所有处在busy状态的buffer size加起来不能超过proxy_busy_buffers_size，所以proxy_busy_buffers_size是用来控制同时传输到客户端的buffer数量的。</span><br><span class="hljs-attribute">proxy_max_temp_file_size</span> <span class="hljs-number">128m</span>;<span class="hljs-comment">#默认情况下proxy_max_temp_file_size值为1024MB,也就是说后端服务器的文件不大于1G都可以缓存到nginx代理硬盘中，如果超过1G，那么文件不缓存，而是直接中转发送给客户端.如果proxy_max_temp_file_size设置为0，表示不使用临时缓存。</span><br></code></pre></td></tr></table></figure><h4 id="nginx-轮询"><a href="#nginx-轮询" class="headerlink" title="nginx 轮询"></a>nginx 轮询</h4><ul><li>RR(默认)</li></ul><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> tomcats &#123;<br>     <span class="hljs-attribute">server</span> <span class="hljs-number">10.1.1.107:88</span> max_fails=<span class="hljs-number">3</span> fail_timeout=<span class="hljs-number">3s</span> weight=<span class="hljs-number">9</span>;<br>     <span class="hljs-attribute">server</span> <span class="hljs-number">10.1.1.132:80</span> max_fails=<span class="hljs-number">3</span> fail_timeout=<span class="hljs-number">3s</span> weight=<span class="hljs-number">9</span>;<br>     <span class="hljs-attribute">server</span> <span class="hljs-number">10.1.1.137:82</span>  backup;<br>     <span class="hljs-attribute">Server</span> <span class="hljs-number">10.1.1.136:86</span>  backup;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>ip_hash</li></ul><p>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session(cookie)的问题</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> tomcats &#123;<br>    ip_hash;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">10.1.1.107:88</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">10.1.1.132:80</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>url_hash</li></ul><p>根据请求的$request_uri,一致的话会请求同一台服务器，这个应用场景很少</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> tomcats &#123;<br>    <span class="hljs-attribute">hash</span> <span class="hljs-variable">$request_uri</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">10.1.1.107:88</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">10.1.1.132:80</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="nginx-变量解析"><a href="#nginx-变量解析" class="headerlink" title="nginx 变量解析"></a>nginx 变量解析</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nginx">$<span class="hljs-attribute">http_host</span>  --localhost:<span class="hljs-number">7676</span>(域名加端口)<br><span class="hljs-variable">$host</span>  --localhost（域名）<br><span class="hljs-variable">$request_uri</span>    -- /zjmobile/css/app.956b573.css<br><span class="hljs-variable">$http_content_type</span>  --text/css<br><br><span class="hljs-comment">#一些可恶能会用到的变量</span><br><span class="hljs-variable">$request_method</span> <span class="hljs-comment">#客户端请求的动作，通常为GET或POST。</span><br><span class="hljs-variable">$remote_addr</span> <span class="hljs-comment">#客户端的IP地址。</span><br><span class="hljs-variable">$request_uri</span> <span class="hljs-comment">#包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。不能修改。</span><br><span class="hljs-variable">$server_port</span> <span class="hljs-comment">#请求到达服务器的端口号(这个才是url输的端口)。</span><br><span class="hljs-variable">$remote_port</span> <span class="hljs-comment">#客户端的端口。</span><br><span class="hljs-variable">$query_string</span> <span class="hljs-comment">#与args相同。</span><br><span class="hljs-variable">$args</span> <span class="hljs-comment">#这个变量等于请求行中(GET请求)的参数，如：foo=123&amp;bar=blahblah;</span><br><span class="hljs-variable">$http_user_agent</span> <span class="hljs-comment">#客户端agent信息</span><br><span class="hljs-variable">$server_protocol</span> <span class="hljs-comment">#请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class="hljs-variable">$server_addr</span> <span class="hljs-comment">#服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class="hljs-variable">$server_name</span> <span class="hljs-comment">#服务器名称。</span><br></code></pre></td></tr></table></figure><h3 id="nginx缓存（代理服务器端缓存，减少后端压力，提高网站并发延时）"><a href="#nginx缓存（代理服务器端缓存，减少后端压力，提高网站并发延时）" class="headerlink" title="nginx缓存（代理服务器端缓存，减少后端压力，提高网站并发延时）"></a>nginx缓存（代理服务器端缓存，减少后端压力，提高网站并发延时）</h3><p>配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#vim /usr/local/nginx/conf/nginx.conf </span><br><span class="hljs-section">upstream</span> node &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.9.191.31:8081</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.9.191.31:8082</span>;<br>&#125;<br><span class="hljs-attribute">proxy_cache_path</span> /cache levels=<span class="hljs-number">1</span>:<span class="hljs-number">2</span> keys_zone=xcache:<span class="hljs-number">10m</span> max_size=<span class="hljs-number">10g</span> inactive=<span class="hljs-number">60m</span> use_temp_path=<span class="hljs-literal">off</span>;<br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> www.test.com;<br>    <span class="hljs-attribute">index</span> index.html;<br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://node;<br>        <span class="hljs-attribute">proxy_cache</span> xcache;<br>        <span class="hljs-attribute">proxy_cache_valid</span>   <span class="hljs-number">200</span> <span class="hljs-number">304</span> <span class="hljs-number">12h</span>;<br>        <span class="hljs-attribute">proxy_cache_valid</span>   any <span class="hljs-number">10m</span>;<br>        <span class="hljs-attribute">add_header</span>  Nginx-Cache <span class="hljs-string">&quot;<span class="hljs-variable">$upstream_cache_status</span>&quot;</span>;<br>        <span class="hljs-attribute">proxy_next_upstream</span> <span class="hljs-literal">error</span> timeout invalid_header http_500 http_502 http_503 http_504;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_cache_path</span> /soft/cache levels=<span class="hljs-number">1</span>:<span class="hljs-number">2</span> keys_zone=cache:<span class="hljs-number">10m</span> max_size=<span class="hljs-number">10g</span> inactive=<span class="hljs-number">60m</span> use_temp_path=<span class="hljs-literal">off</span>;<br><span class="hljs-comment">#proxy_cache    //存放缓存临时文件</span><br><span class="hljs-comment">#levels         //按照两层目录分级</span><br><span class="hljs-comment">#keys_zone      //开辟空间名,10m:开辟空间大小,1m可存放8000key</span><br><span class="hljs-comment">#max_size       //控制最大大小,超过后Nginx会启用淘汰规则</span><br><span class="hljs-comment">#inactive       //60分钟没有被访问缓存会被清理</span><br><span class="hljs-comment">#use_temp_path  //临时文件,会影响性能,建议关闭</span><br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_cache</span> cache;<br><span class="hljs-attribute">proxy_cache_valid</span>   <span class="hljs-number">200</span> <span class="hljs-number">304</span> <span class="hljs-number">12h</span>;<br><span class="hljs-attribute">proxy_cache_valid</span>   any <span class="hljs-number">10m</span>;<br><span class="hljs-attribute">add_header</span>  Nginx-Cache <span class="hljs-string">&quot;<span class="hljs-variable">$upstream_cache_status</span>&quot;</span>;<br><span class="hljs-attribute">proxy_next_upstream</span> <span class="hljs-literal">error</span> timeout invalid_header http_500 http_502 http_503 http_504;<br><span class="hljs-comment">#proxy_cache            //开启缓存</span><br><span class="hljs-comment">#proxy_cache_valid      //状态码200|304的过期为12h,其余状态码10分钟过期</span><br><span class="hljs-comment">#proxy_cache_key        //缓存key</span><br><span class="hljs-comment">#add_header             //增加头信息,观察客户端respoce是否命中</span><br><span class="hljs-comment">#proxy_next_upstream    //出现502-504或错误,会跳过此台服务器访问下一台服务器</span><br></code></pre></td></tr></table></figure><p>注意：值得一提的是nginx代理服务器缓存，多是为了缓存服务器的资源文件，如果只是反向代理服务的话就不用配置</p><h4 id="部分页面不缓存"><a href="#部分页面不缓存" class="headerlink" title="部分页面不缓存"></a>部分页面不缓存</h4><p>某些页面如登陆注册，不能使用缓存</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> node &#123;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.9.191.31:8081</span>;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.9.191.31:8082</span>;<br>&#125;<br><span class="hljs-attribute">proxy_cache_path</span> /cache levels=<span class="hljs-number">1</span>:<span class="hljs-number">2</span> keys_zone=cache:<span class="hljs-number">10m</span> max_size=<span class="hljs-number">10g</span> inactive=<span class="hljs-number">60m</span> use_temp_path=<span class="hljs-literal">off</span>;<br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> www.test.com;<br>    <span class="hljs-attribute">index</span> index.html;<br>    <span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_uri</span> <span class="hljs-regexp">~ ^/(static|login|register|password))</span> &#123;<br>            <span class="hljs-attribute">set</span> <span class="hljs-variable">$cookie_nocache</span> <span class="hljs-number">1</span>;<br>            &#125;<br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://node;<br>        <span class="hljs-attribute">proxy_cache</span>     cache;<br>        <span class="hljs-attribute">proxy_cache_valid</span>       <span class="hljs-number">200</span> <span class="hljs-number">304</span> <span class="hljs-number">12h</span>;<br>        <span class="hljs-attribute">proxy_cache_valid</span>       any     <span class="hljs-number">10m</span>;<br>        <span class="hljs-attribute">add_header</span>      Nginx-Cache     <span class="hljs-string">&quot;<span class="hljs-variable">$upstream_cache_status</span>&quot;</span>;<br>        <span class="hljs-attribute">proxy_next_upstream</span>     <span class="hljs-literal">error</span> timeout invalid_header http_500 http_502 http_503 http_504;<br>        <span class="hljs-attribute">proxy_no_cache</span> <span class="hljs-variable">$cookie_nocache</span> <span class="hljs-variable">$arg_nocache</span> <span class="hljs-variable">$arg_comment</span>;<br>        <span class="hljs-attribute">proxy_no_cache</span> <span class="hljs-variable">$http_pargma</span> <span class="hljs-variable">$http_authorization</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次hexo 博客上线 经验总结</title>
    <link href="/2018/12/03/%E8%AE%B0%E4%B8%80%E6%AC%A1hexo-%E5%8D%9A%E5%AE%A2%E4%B8%8A%E7%BA%BF-%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <url>/2018/12/03/%E8%AE%B0%E4%B8%80%E6%AC%A1hexo-%E5%8D%9A%E5%AE%A2%E4%B8%8A%E7%BA%BF-%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>前两天买了一台百度云服务器花了11块钱，花了点时间学了下如何部署hexo博客以及一些服务器方面的配置，没用hexo推荐的方式部署。专门记一个文章。系统用的是centos，先上图和链接</p><h2 id="博客地址"><a href="#博客地址" class="headerlink" title="博客地址"></a>博客地址</h2><p><img src="/img/6114493-3d1caea56828ef4a.webp" alt="preview.png"></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>先用hexo快捷搭建本地blog，再把项目上传到github </li><li>本地ssh无密码登陆远程服务器，把服务器的防火墙打开并配置指定端口才可以登陆</li><li>远程服务器配置 ssh key 后再把项目从git clone到云服务器</li><li>再用pm2，直接本地快捷部署项目到服务器并重启</li><li>使用nginx 转发端口</li></ol><h2 id="配置要点"><a href="#配置要点" class="headerlink" title="配置要点"></a>配置要点</h2><h4 id="先用hexo快捷搭建本地blog"><a href="#先用hexo快捷搭建本地blog" class="headerlink" title="先用hexo快捷搭建本地blog"></a>先用hexo快捷搭建本地blog</h4><p>首先解释下<br>hexo 基于nodejs的快速、简洁且高效的博客框架，它是帮人快速搭建个人博客的。<br>PM2是node进程管理工具,可以利用它来简化很多node应用管理的繁琐任务,如性能监控、自动重启、负载均衡等,而且使用非常简单。就是一开始上手感觉好容易报错。</p><p>这里只将一些官网上没有的，如何本地跑起来一个hexo 项目和部署一个主题请看官网 <a href="https://hexo.io/zh-cn/">hexo官网</a></p><p><code>hexo server</code>  是项目 的启动命令 ，默认hexo启动端口是4000。但这样启动项目，nodejs是一个单线程项目，万一某一次程序出错，那整个服务就挂了。所以需要pm2 来监控这项线程，万一出错pm2还能自动重启。</p><p>pm2 启动命令一般是<code> pm2 start app.js</code>  那如何用pm2 来管理hexo呢，可以通过在项目目录下新建一个 app.js</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">var spawn = require(<span class="hljs-string">&#x27;child_process&#x27;</span>).spawn;<br>free = spawn(<span class="hljs-string">&#x27;hexo&#x27;</span>, [<span class="hljs-string">&#x27;server&#x27;</span>, <span class="hljs-string">&#x27;-p 4000&#x27;</span>]);/* 其实就是等于执行hexo server -p 4000*/<br><br>free.stdout.on(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-keyword">function</span> (data) &#123;<br>    console.log(<span class="hljs-string">&#x27;hexo standard output:\n&#x27;</span> + data);<br>&#125;);<br><br>free.stderr.on(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-keyword">function</span> (data) &#123;<br>    console.log(<span class="hljs-string">&#x27;hexo standard error output:\n&#x27;</span> + data);<br>&#125;);<br><br>free.on(<span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-keyword">function</span> (code, signal) &#123;<br>    console.log(<span class="hljs-string">&#x27;hexo child process eixt ,exit:&#x27;</span> + code);<br>&#125;);<br></code></pre></td></tr></table></figure><p>如此一来在项目根目录下  就能用 <code>pm2 start app.js</code> 来跑hexo项目了</p><h4 id="本地ssh无密码登陆远程服务器，服务器-ssh-key-配置"><a href="#本地ssh无密码登陆远程服务器，服务器-ssh-key-配置" class="headerlink" title="本地ssh无密码登陆远程服务器，服务器 ssh key 配置"></a>本地ssh无密码登陆远程服务器，服务器 ssh key 配置</h4><p>初次配置的云服务器需要安装这些工具包</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo yum <span class="hljs-keyword">install </span>vim openssl <span class="hljs-keyword">build-essential </span>libssl-dev wget curl git<br>yum <span class="hljs-keyword">install </span>gcc-c++<br></code></pre></td></tr></table></figure><p>本地配置ssh key</p><ol><li>本地 cd &#x2F;</li><li>cd .ssh  或者 open ~&#x2F;.ssh  </li><li>ls<br> <code>id_rsa  id_rsa.pub  known_hosts</code></li><li>备份<br><code> mv id_rsa id_rsa_backup</code><br><code>mv id_rsa.pub id_rsa_backup.pub</code></li><li>生成ssh公钥<br><code>ssh-keygen -t rsa -b 4096 -C &quot;931035063@qq.com&quot; </code></li><li>查看<br><code>cat id_rsa</code><br><code>cat id_rsa.pub</code></li><li>key作用生效<br><code>eval &quot;$(ssh-agent -s)&quot;</code><br><code>ssh-add ~/.ssh/id_rsa</code></li><li>然后在连上<strong>远程服务器</strong> <code>cd ~/.ssh</code> ,编辑服务器端授权文件 <code>vi authorized_keys</code></li><li>在在<strong>客户端</strong> 输入 <code>cat id_rsa.pub</code>将带有邮箱的公钥复制进去，再:wq!退出authorized_keys</li><li>配置生效 <code>sudo service sshd restart</code> </li><li>然后就可以直接通过 ssh <a href="mailto:&#114;&#x6f;&#x6f;&#116;&#x40;&#x78;&#x78;&#x2e;&#x78;&#x78;&#46;&#120;&#120;&#x2e;&#120;&#x78;">&#114;&#x6f;&#x6f;&#116;&#x40;&#x78;&#x78;&#x2e;&#x78;&#x78;&#46;&#120;&#120;&#x2e;&#120;&#x78;</a> 来免密码 登陆了</li></ol><p>注意点:</p><ul><li>因为我连上云服务器后也没创建新用户，直接用root 编辑的，其他人配置是要注意一下 权限问题，我看网上也有不少人因为权限问题而生效失败</li><li>如果还是配置没生效，需要看一下  <a href="https://www.cnblogs.com/jingwu/articles/5598340.html">sshd_config配置详解</a><br>RSAAuthentication yes<br>PubkeyAuthentication yes<br>这两项不能为no</li><li>还有一个地方，每次ssh登陆输ip太过于麻烦，当然你用secureCRT这样的工具当我没说, <strong>在mac下面 可以配置快捷连接云服务器的命令</strong><br>– 在<code>sudo vim ~/.bashrc</code><br>– 新加 <code>alias ssh_baiduyun=&quot;ssh root@xx.xx.xx.xx&quot;</code><br>– <code>source .bashrc</code> 以后即可通过 <code>ssh_baiduyun</code> 连接服务器</li><li>再重申一点 本地的 <code>id_rsa.pub</code> 对应的是 服务器上的 <code>authorized_keys</code>,两个复制错了就尴尬了</li></ul><h4 id="在服务器配置ssh并clone-git-项目"><a href="#在服务器配置ssh并clone-git-项目" class="headerlink" title="在服务器配置ssh并clone git 项目"></a>在服务器配置ssh并clone git 项目</h4><p>生成服务器端公钥 和本地一样<br><code>cd ~/.ssh</code><br><code>ssh-keygen -t rsa -b 4096 -C &quot;931035063@qq.com&quot;</code><br><code>eval &quot;$(ssh-agent -s)&quot;</code><br><code>ssh-add ~/.ssh/id_rsa</code><br>生效,centos 下<code>service sshd restart</code><br>把  <code>id_rsa.pub</code> 里面的内容 放到git 账户里面ssh 配置里<br><img src="/img/6114493-9b765e356cd0a732.webp" alt="Screenshot 2018-12-02_23-25-37.png"><br><strong>注意！！</strong> 在服务器里你准备clone 项目的文件夹里 先用ssh clone 一遍 <code>git@github.com:SHpoi/my-blog.git</code> 第一次git clone 会有确认项，不然后面用pm2部署老是会遇到一个拉取项目为空的报错。</p><h4 id="在服务器配置nodejs环境"><a href="#在服务器配置nodejs环境" class="headerlink" title="在服务器配置nodejs环境"></a>在服务器配置nodejs环境</h4><p>服务器配置nodejs 用的是nvm，安装nvm</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -qO- https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/creationix/</span>nvm<span class="hljs-regexp">/v0.33.2/i</span>nstall.sh | bash<br></code></pre></td></tr></table></figure><p><strong>nvm 安装以后重新连接云服务器</strong>，不然环境变量不会生效<br>nvm安装nodejs，依次执行以下命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> install v8.<span class="hljs-number">9</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">nvm</span> use v8.<span class="hljs-number">9</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">nvm</span> alias default v8.<span class="hljs-number">9</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">npm</span> --registry=https://registry.npm.taobao.org install -g npm<br></code></pre></td></tr></table></figure><p>拉取完以后记得先试用<code>hexo server</code>着能不能跑起来,进入文件夹先<code>npm install</code>再看还差什么其他的全局依赖</p><h4 id="在本地使用pm2-一键部署云服务器上的项目"><a href="#在本地使用pm2-一键部署云服务器上的项目" class="headerlink" title="在本地使用pm2 一键部署云服务器上的项目"></a>在本地使用pm2 一键部署云服务器上的项目</h4><p>这一块真的是血泪啊，就2行命令行，报的错查了一下午。</p><ol><li>在本地项目目录下新建一个 ecosystem.json，与app.js平级<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;<br>  <span class="hljs-string">&quot;apps&quot;</span> : [&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;myApp&quot;</span>,<br>    <span class="hljs-string">&quot;script&quot;</span>: <span class="hljs-string">&quot;app.js&quot;</span>,<br>    <span class="hljs-string">&quot;instances&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;autorestart&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;env&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;NODE_ENV&quot;</span>: <span class="hljs-string">&quot;development&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;env_production&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;NODE_ENV&quot;</span>: <span class="hljs-string">&quot;production&quot;</span><br>    &#125;<br>  &#125;],<br>  <span class="hljs-string">&quot;deploy&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;production&quot;</span> : &#123;<br>      <span class="hljs-string">&quot;user&quot;</span> : &quot;<span class="hljs-type">root</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>host<span class="hljs-string">&quot; : &quot;</span>xx.xx.xx.xx<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>port<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">22</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>ssh_options<span class="hljs-string">&quot;: &quot;</span>StrictHostKeyChecking=no<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>ref<span class="hljs-string">&quot;  : &quot;</span>origin/master<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>repo<span class="hljs-string">&quot; : &quot;</span>git@github.com:SHpoi/my-blog.git<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>path<span class="hljs-string">&quot; : &quot;</span>/root/www/myblog/<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>env<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">        &quot;</span>NODE_ENV<span class="hljs-string">&quot;: &quot;</span>production<span class="hljs-string">&quot;</span><br><span class="hljs-string">      &#125;,</span><br><span class="hljs-string">      &quot;</span>pre-setup<span class="hljs-string">&quot;: &quot;</span>rm -rf /var/www/myblog/production/source<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>post-deploy<span class="hljs-string">&quot; : &quot;</span>npm install &amp;&amp; pm2 startOrRestart ecosystem.json <span class="hljs-comment">--env production&quot;,</span><br>      <span class="hljs-string">&quot;env&quot;</span>  : &#123;<br>        <span class="hljs-string">&quot;NODE_ENV&quot;</span>: <span class="hljs-string">&quot;production&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>然后运行2行命令 第一行在云服务器搭建运行环境，第二行每次重新发布项目需要<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">pm2 deploy ecosystem.<span class="hljs-keyword">json </span>production setup<br>注意有巨坑，第一次ssh <span class="hljs-keyword">clone </span>会校验，要先在该目录下<span class="hljs-keyword">clone </span>一遍git ssh 连接，之后才会成功。不然会一直报空链接<br>pm2 deploy ecosystem.<span class="hljs-keyword">json </span>production --force<br>force一定要加不然git会报冲突不解决<br></code></pre></td></tr></table></figure>以后每次发布博客<br><code>hexo new  &#39;记一次hexo 博客上线 经验总结&#39;</code> 生成md文件，写完以后提交到git仓库<br>再用命令行在本地项目执行下 <code>pm2 deploy ecosystem.json production --force</code> 即可</li></ol><h5 id="pm2-配置注意点"><a href="#pm2-配置注意点" class="headerlink" title="pm2 配置注意点"></a>pm2 配置注意点</h5><ul><li><p><code>pm2 deploy ecosystem.json production --force</code> force一定要加不然git会报冲突不解决</p></li><li><p>运行setup命令时 第一次ssh clone 会校验，要先在该目录下clone 一遍git ssh 连接，之后才会成功。不然会一直报空链接。第一次clone完删了即可。</p></li><li><p>启动前先删了source里面的git 代码，不然pm2 会报冲突不解决而部署失败</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-string">&quot;pre-setup&quot;</span>: <span class="hljs-string">&quot;rm -rf /var/www/myblog/production/source&quot;</span>,<br>- 部署后运行 命令进行项目依赖包安装 再跑起来hexo项目 <br><span class="hljs-string">&quot;post-deploy&quot;</span> : &quot;<span class="hljs-type">npm</span> install &amp;&amp; pm2 startOrRestart ecosystem.json <span class="hljs-comment">--env production&quot;,</span><br></code></pre></td></tr></table></figure></li><li><p><code>&quot;script&quot;: &quot;app.js&quot;</code> 为了让json 找到app.js,所以放平级，这个json文件如果不是私有仓库不建议提交，当然我是提了，不过你们有高手千万别看了我的git项目的配置文件就攻击它，活动买的加上域名服务就12块钱。</p></li><li><p><code>/root/www/myblog/</code> 我是为了方便我登进去就能找项目才放root下的。还有这个目录需先创建，不然pm2不知道部署在哪。</p></li><li><p><code>pm2 deploy ecosystem.json  production setup </code> 有时候还需要再次执行，因为有时候会出现这种错误 <code>bash: line 0: cd: /root/www/myblog/source: 没有那个文件或目录</code></p></li></ul><h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><p>这一块没啥说的 无非就是端口转发， 80转4000<br>nginx 安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> nginx<br></code></pre></td></tr></table></figure><p><strong>安装完重连服务器，不然怎么输命令配置都不生效</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> myblog&#123;<br> <span class="hljs-attribute">server</span> localhost:<span class="hljs-number">4000</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>  <span class="hljs-number">80</span> ;<br>    <span class="hljs-attribute">server_name</span>  www.sunqx.top;<br><br>    <span class="hljs-section">location</span> / &#123;<br>          <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>          <span class="hljs-attribute">proxy_set_header</span> X-Forward-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>          <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$http_host</span>;<br>          <span class="hljs-attribute">proxy_set_header</span> X-Nginx-Proxy <span class="hljs-literal">true</span>;<br>          <span class="hljs-attribute">proxy_pass</span> http://myblog;<br>          <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>nginx 配置生效</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo nginx -t </span><br><span class="hljs-attribute">sudo nginx -s reload</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>pm2</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ionic webview in native(android)</title>
    <link href="/2018/11/25/ionic-webview-in-native-android/"/>
    <url>/2018/11/25/ionic-webview-in-native-android/</url>
    
    <content type="html"><![CDATA[<p>其实开发了这么久，webview的优点很多，热更新、跨平台开发、易维护。但是局限性也很大，一些原生的功能还是用原生插件最好。webview webview，功能只是web 用来 view 的。把网页当作native 里的一个模块或插件最好。好久没更新blog了，更新一波让自己记住。<br>把ionic 部署到android原生应用里面</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">MainActivity<br>public <span class="hljs-keyword">class</span> MainActivity extends AppCompatActivity &#123;<br>    <span class="hljs-keyword">private</span>  View cv;<br>    @Override<br>    protected void on<span class="hljs-constructor">Create(Bundle <span class="hljs-params">savedInstanceState</span>)</span> &#123;<br>        super.on<span class="hljs-constructor">Create(<span class="hljs-params">savedInstanceState</span>)</span>;<br>        set<span class="hljs-constructor">ContentView(R.<span class="hljs-params">layout</span>.<span class="hljs-params">activity_main</span>)</span>;<br>        cv = get<span class="hljs-constructor">Window()</span>.get<span class="hljs-constructor">DecorView()</span>;<br>        find<span class="hljs-constructor">ViewById(R.<span class="hljs-params">id</span>.<span class="hljs-params">ionic</span>)</span>.set<span class="hljs-constructor">OnClickListener(<span class="hljs-params">cordovaViewClickListener</span>)</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> View.OnClickListener cordovaViewClickListener=<span class="hljs-keyword">new</span> View.<span class="hljs-constructor">OnClickListener()</span> &#123;<br>        @Override<br>        public void on<span class="hljs-constructor">Click(View <span class="hljs-params">v</span>)</span>&#123;<br>            start<span class="hljs-constructor">CordovaActivity(<span class="hljs-params">cv</span>)</span>;<br>        &#125;<br>    &#125;;<br><br>    public void start<span class="hljs-constructor">CordovaActivity(View <span class="hljs-params">view</span>)</span> &#123;<br>        <span class="hljs-comment">// 项目用的方式</span><br>        <span class="hljs-comment">//Intent intent = new Intent(this, TestCordovaActivity.class);</span><br>        <span class="hljs-comment">//ionic 现在应用的方式</span><br>        Intent intent = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Intent(<span class="hljs-params">this</span>, IonicActivity.<span class="hljs-params">class</span>)</span>;<br>        start<span class="hljs-constructor">Activity(<span class="hljs-params">intent</span>)</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看看ionic 如何嵌套webview的，activity无需xml</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IonicActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CordovaActivity</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    public void onCreate(<span class="hljs-type">Bundle</span> savedInstanceState)<br>    &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br><br>        <span class="hljs-comment">// enable Cordova apps to be started in the background</span><br>        <span class="hljs-type">Bundle</span> extras = getIntent().getExtras();<br>        <span class="hljs-keyword">if</span> (extras != <span class="hljs-literal">null</span> &amp;&amp; extras.getBoolean(<span class="hljs-string">&quot;cdvStartInBackground&quot;</span>, <span class="hljs-literal">false</span>)) &#123;<br>            moveTaskToBack(<span class="hljs-literal">true</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// Set by &lt;content src=&quot;index.html&quot; /&gt; in config.xml</span><br>        loadUrl(<span class="hljs-string">&quot;file:///android_asset/ionic/index.html&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>我们项目组嵌套native的方式，效果上和是一样的</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> TestCordovaActivity extends Activity &#123;<br><br>    SystemWebView webView;<br>    public void on<span class="hljs-constructor">Create(Bundle <span class="hljs-params">savedInstanceState</span>)</span> &#123;<br>        super.on<span class="hljs-constructor">Create(<span class="hljs-params">savedInstanceState</span>)</span>;<br>        set<span class="hljs-constructor">ContentView(R.<span class="hljs-params">layout</span>.<span class="hljs-params">content_frame</span>)</span>;<br>        init<span class="hljs-constructor">CordovaWebView()</span>;<br>    &#125;<br><br>    public CordovaInterfaceImpl cordovaInterface;<br>    <span class="hljs-keyword">private</span> CordovaWebView cordovaWebView;<br>    public final ArrayBlockingQueue&lt;String&gt; onPageFinishedUrl = <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;String&gt;(<span class="hljs-number">5</span>);<br>    public void init<span class="hljs-constructor">CordovaWebView()</span> &#123;<br>        cordovaInterface = <span class="hljs-keyword">new</span> <span class="hljs-constructor">CordovaInterfaceImpl(<span class="hljs-params">this</span>)</span> &#123;<br>            @Override<br>            public Object on<span class="hljs-constructor">Message(String <span class="hljs-params">id</span>, Object <span class="hljs-params">data</span>)</span> &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;onPageFinished&quot;</span>.equals(id)) &#123;<br>                    onPageFinishedUrl.add((String) data);<br>                &#125;<br>                return super.on<span class="hljs-constructor">Message(<span class="hljs-params">id</span>, <span class="hljs-params">data</span>)</span>;<br>            &#125;<br>        &#125;;<br>        ConfigXmlParser parser = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ConfigXmlParser()</span>;<br>        parser.parse(this);<br>        webView = (SystemWebView) find<span class="hljs-constructor">ViewById(R.<span class="hljs-params">id</span>.<span class="hljs-params">aiCordovaWebView</span>)</span>;<br>        SystemWebViewEngine systemWebViewEngine = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SystemWebViewEngine(<span class="hljs-params">webView</span>)</span>;<br>        <span class="hljs-comment">//允许JavaScript执行</span><br>        webView.get<span class="hljs-constructor">Settings()</span>.set<span class="hljs-constructor">JavaScriptEnabled(<span class="hljs-params">true</span>)</span>;<br>        this.cordovaWebView = <span class="hljs-keyword">new</span> <span class="hljs-constructor">CordovaWebViewImpl(<span class="hljs-params">systemWebViewEngine</span>)</span>;<br>        this.cordovaWebView.init(this.cordovaInterface, parser.get<span class="hljs-constructor">PluginEntries()</span>, parser.get<span class="hljs-constructor">Preferences()</span>);<br>        this.cordovaWebView.load<span class="hljs-constructor">Url(<span class="hljs-string">&quot;file:///android_asset/ionic/index.html&quot;</span>)</span>;<br><br>    &#125;<br><br><br>    @Override<br>    public void on<span class="hljs-constructor">ActivityResult(<span class="hljs-params">int</span> <span class="hljs-params">requestCode</span>, <span class="hljs-params">int</span> <span class="hljs-params">resultCode</span>, Intent <span class="hljs-params">intent</span>)</span> &#123;<br>        super.on<span class="hljs-constructor">ActivityResult(<span class="hljs-params">requestCode</span>, <span class="hljs-params">resultCode</span>, <span class="hljs-params">intent</span>)</span>;<br>        this.cordovaInterface.on<span class="hljs-constructor">ActivityResult(<span class="hljs-params">requestCode</span>, <span class="hljs-params">resultCode</span>, <span class="hljs-params">intent</span>)</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>对应的xml</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.cordova</span><span class="hljs-selector-class">.engine</span><span class="hljs-selector-class">.SystemWebView</span><br>        android:id=<span class="hljs-string">&quot;@+id/aiCordovaWebView&quot;</span><br>        android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>        android:layout_height=<span class="hljs-string">&quot;match_parent&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>上面就是主要代码，至于其他的步骤，网上其他blog 都有，现在有一个native的应用，还有一个ionic build 出来的android 项目</p><ol><li>把www文件夹放在android assets 资源目录下，我改名叫ionic 文件夹了</li><li>src&#x2F;main&#x2F;res&#x2F;xml 里面的config.xml 文件要从ionic build的android项目里挪过来，这个文件很重要，里面有各种cordova插件所用的java依赖配置,使用command或者ctrl 点击某一项看能不能跳到java文件，不然找不到项目是会报错的。 </li><li>AndroidManifest.xml 里面还要加各种各样的权限，同理挪过来，其中有几个注意的地方<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!-- android网络请求权限 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="language-xml"> <span class="hljs-comment">&lt;!-- 这个特别重要！！！！！！不然可能相机不能用 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">provider</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.support.v4.content.FileProvider&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">android:authorities</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;applicationId&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">.provider&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;false&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">android:grantUriPermissions</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">android:resource</span>=<span class="hljs-string">&quot;@xml/provider_paths&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">provider</span>&gt;</span></span><br></code></pre></td></tr></table></figure>还有就是 cordova 的sqllite plugin，如果用到了注意把它的2个jar包放进项目依赖里面，sqlite-connector.jar、sqlite-native-driver.jar 别漏了，不然可能会遇到奇怪的报错，当时还是在 stackflow 才知道什么情况</li><li>最后一点别忘记，把cordova的jar包以及cordova插件的jar包或者模块拷过来。</li><li>直接用android studio 跑起来看一下吧</li></ol>]]></content>
    
    
    <categories>
      
      <category>ionic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webview</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ionic篇学习笔记-部署项目编</title>
    <link href="/2018/03/18/ionic%E7%AF%87%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E7%BC%96/"/>
    <url>/2018/03/18/ionic%E7%AF%87%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E7%BC%96/</url>
    
    <content type="html"><![CDATA[<p>##1.启动ionic项目<br>首先是随便都能查到的npm安装命令</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dos">npm install -g ionic cordova<br>ionic <span class="hljs-built_in">start</span> myIonicProject blank<br><span class="hljs-built_in">cd</span> myIonicProject<br>ionic serve<br></code></pre></td></tr></table></figure><p>看一下项目目录，了解一下<br>首先src里存放的ionic的angular代码<br>其次www 里存放的是src里的typescript代码编译后的注入的js代码，当然还有其他的东西，比如说图片，sass编译后注入的css代码，都是用webpack打包编译生成。<br>www很重要，就算ionic打包android安装包也是把www移过去。<br>##2.配置移动开发环境<br>其中ios的开发环境如果是苹果电脑就不用配了，ios只能在苹果上开发。<br>android的环境配置网上一大堆，就是安装sdk配下环境变量。如果想要贪便宜，可以直接下个androidStudio，神器啊，快速帮助新手配置环境。<br>##3.打包android安装包<br>首先先给ionic项目添加支持的平台，在项目目录下运行命令行</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">ionic cordova <span class="hljs-keyword">platform</span><br></code></pre></td></tr></table></figure><p>能看到一大串支持的平台列表(android、ios、browser)和已经安装的平台<br>运行命令安装ionic的android平台</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">ionic cordova <span class="hljs-built_in">platform</span> <span class="hljs-built_in">add</span> android<br></code></pre></td></tr></table></figure><p>添加完以后，可以看到目录下的platforms文件夹下多了个android文件夹，里面就是android项目代码，然后再运行命令build一下android平台的代码。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ionic cordova build android</span><br></code></pre></td></tr></table></figure><p>这行命令行就是为了更新android平台下的代码，其中就有把www替换android项目里的www。</p><p>在mac下build完以后，最好进到上一层目录, sudo chmod -R 777 myIonicProject<br>不然可能androidStudio没权限打开，windows下也应该用管理员权限设置一下。</p><p>值得一提的是，这个build很多人都会出现问题，如果是android环境没配好，确保你的androidStudio能新建一个项目并成功跑起来。然后如果对android开发不太熟，不知道gradle怎么用怎么打包的筒子（作者我～～）,直接用androidStudio打开ionic编译后生成的android项目，就是那个platform下的android文件夹。androidStudio会自动帮你构建项目。</p><p>我在androidStudio编译项目时遇到了一些问题，如果编译失败，除了网速问题（科学上网）以外，还遇到过<br><img src="/img/6114493-80d4abe9ba203c9c.webp" alt="Jietu20171218-134359@2x.png"><br>这种问题，现在ionic build项目我已经没遇见了，前几个月build一次遇见一次。<br>直接去 <a href="https://www.imooc.com/article/21867">https://www.imooc.com/article/21867</a> 看，找到问题6就行了。</p><p>android项目导入androidStudio没问题以后，直接运行，就能看到自己的app跑起来了。</p><p>ionic项目开发起来很方便，但是真正难的就是他的底层环境配置。也不能说他坑，因为他是基于cordova开发的，cordova配置环境本来就很坑。打个cordova的jar包用官方的命令根本打不起来，遇上了好多问题，最后在androidStudio的帮助下才成功。</p>]]></content>
    
    
    <categories>
      
      <category>ionic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ionic3 热更新android篇</title>
    <link href="/2018/03/18/ionic3-%E7%83%AD%E6%9B%B4%E6%96%B0android%E7%AF%87/"/>
    <url>/2018/03/18/ionic3-%E7%83%AD%E6%9B%B4%E6%96%B0android%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>这热更新简直了，其实看网上配来配去就这几步，但自己一配就立马遇上很多问题，主要还是细节方面处理不够到位。索性自己也开一篇，防止自己忘了。</p><ol><li><p>进入自己的ionic项目根目录下 启动 ionic服务  <code>ionic serve</code></p></li><li><p>安装ionic native 热更新插件</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss">ionic cordova plugin add cordova-hot-<span class="hljs-built_in">code</span>-<span class="hljs-keyword">push</span>-plugin<br>ionic cordova plugin add cordova-hot-<span class="hljs-built_in">code</span>-<span class="hljs-keyword">push</span>-<span class="hljs-keyword">local</span>-dev-addon<br>npm install -g cordova-hot-<span class="hljs-built_in">code</span>-<span class="hljs-keyword">push</span>-cli<br></code></pre></td></tr></table></figure><p>当然了还要确保自己已经安装了android平台（没安装可以执行 <code>ionic cordova platform add android</code>）</p></li><li><p>在config.xml配置文件中加入下面节点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">chcp</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">config-file</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;http://192.168.1.76:8121/chcp.json&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">native-interface</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">chcp</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面那个地址是你远程服务器存放www文件夹路径的地址 ，当然我这个地址<a href="http://192.168.1.76:8121是通过http-server">http://192.168.1.76:8121是通过http-server</a> -p 8121 在www目录下开服务拿的地址。是本地的一个服务。</p></li><li><p>热更新服务开启 <code>cordova-hcp server </code>  还有如果运行命令正常www目录下会有 有chcp.json和chcp.manifest文件出现。到这一步你就知道为什么第三步要配这个地址了。</p></li><li><p>在项目根目录下新建模板 cordova-hcp.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;content_url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://192.168.1.76:8121&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;autogenerated&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;update&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;now&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这一步配置完后急的访问下，<br><a href="http://192.168.1.76:8121/">http://192.168.1.76:8121</a> 访问的是ionic项目的首页<br><a href="http://192.168.1.76:8121/chcp.json">http://192.168.1.76:8121/chcp.json</a> 也要能访问到</p></li><li><p>以后发布执行<code>cordova-hcp build</code>命令，就可以把模板内容替换到chcp.json文件内，因为每次更新或者发布app都会使热更新服务重新生成chcp.json文件内容<br>值得注意的是，这条命令一运行，热更新服务的运行窗口也会报相应的日志<br><img src="/img/6114493-0386c299e9515172.webp" alt="Screenshot 2018-02-16_20-10-53.png"></p></li></ol><p>  可见这条命令不仅生成chcp.json内容这么简单。然后再说我发现的一个问题，执行ionic serve 就会chcp.json又改回原来的了，所以打包build的时候要小心一点。</p><ol start="7"><li>build安卓包 <code>ionic cordova build android</code><br>到这一步，编译完android包以后记得再看一下配置，这回要看app里面的。<br><img src="/img/6114493-11068a510e2fbf35.webp" alt="Screenshot 2018-02-16_20-17-13.png"></li></ol><p>  别又是什么ngrok内网穿透的地址，这就不好玩了，不对的话，把www里面的chcp.json内容复制过来替换一下。</p><p>8.最后一步就直接打开安装好的app了，改一下html内容,用<code>ionic serve</code> 编译一下，把app关掉重新开一下，就可以看到热更新改的东西了。<br>注意：我这边测试热更新是用模拟器的，用真的小伙伴注意下你的地址是不是手机可以访问哦！</p>]]></content>
    
    
    <categories>
      
      <category>ionic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hot codePush</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>angular4学习笔记整理（一）</title>
    <link href="/2018/01/12/angular4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2018/01/12/angular4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>好久没写点东西了，毕业刚刚回到上海，就马上出差去了杭州去做app h5的webview开发，用的是ionic3，ionic现在学习还没学完，现在就把自己学到的angular的笔记整理一下。</p><h2 id="angular-的-nodejs安装"><a href="#angular-的-nodejs安装" class="headerlink" title="angular 的 nodejs安装"></a>angular 的 nodejs安装</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g angular<br><span class="hljs-built_in">npm</span> -g install @angular/cli    angular命令行工具安装<br></code></pre></td></tr></table></figure><p>用typescript来写node需要引入一个包</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">npm i @types/<span class="hljs-keyword">node</span> <span class="hljs-title">--save</span><br></code></pre></td></tr></table></figure><h2 id="angular-cli常用的command"><a href="#angular-cli常用的command" class="headerlink" title="angular cli常用的command"></a>angular cli常用的command</h2><p>ng new 项目名称          新建angular项目<br>ng g component xxx  生成组件<br>ng g service xxx  生成服务     </p><h2 id="jquery的使用"><a href="#jquery的使用" class="headerlink" title="jquery的使用"></a>jquery的使用</h2><p>其实angular4里可以使用jquery了，不用像angular1里面使用类似jq的元素选择器，不过其中需要一点配置。</p><ol><li><p>npm安装jq </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span><span class="hljs-keyword">jquery </span>--save<br></code></pre></td></tr></table></figure></li><li><p>在angular-cli.json  里的app 配置文件里面 的styles、scripts里面添加js或者css的相对路径,就放在app的script里面，里面还有一个框的是bootstrap<br><img src="/img/6114493-648480aa2acad151.webp" alt="Screenshot 2018-01-12_19-03-46.png"></p></li><li><p>由于typescript 不认识js的东西，还需要一个 类型描述文件</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install @types/jquery --save<br></code></pre></td></tr></table></figure></li></ol><h2 id="指令的简单运用"><a href="#指令的简单运用" class="headerlink" title="指令的简单运用"></a>指令的简单运用</h2><p>像下面这样一段代码基本即看懂，*ngFor循环数组 ，js的class样式控制用这种[class.xxxx]&#x3D;”xx” 这种方式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript">html<br>&lt;p &gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let star of stars&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-star&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">[<span class="hljs-attr">class.glyphicon-star-empty</span>]=<span class="hljs-string">&quot;star&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>&#123;&#123;rating&#125;&#125;<br>&lt;/p&gt;<br>ts<br><span class="hljs-meta">@Component</span>(&#123;<br><span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-stars&#x27;</span>,<br><span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./stars.component.html&#x27;</span>,<br><span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./stars.component.css&#x27;</span>]<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StarsComponent</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-attr">rating</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-attr">stars</span>: <span class="hljs-built_in">boolean</span>[];<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="父组件向子组件传递数据"><a href="#父组件向子组件传递数据" class="headerlink" title="父组件向子组件传递数据"></a>父组件向子组件传递数据</h2><p>子组件代码就是上面一段代码，它需要父组件输入一个rating属性，父组件调用子组件，只需在html里面调用子组件的html标签，输入属性用[]扩起来</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">app-stars</span> [<span class="hljs-attr">rating</span>]=<span class="hljs-string">&quot;product.rating&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-stars</span>&gt;</span><br></code></pre></td></tr></table></figure><p>输入属性：这种属性绑定  是输入数据的绑定方式</p><p>然后子组件里面的代码也需要改一下，将rating设置为输入属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StarsComponent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> &#123;<br><span class="hljs-meta">@Input</span>()        通过这个input输入标注     声明rating会被父组件输入的属性覆盖<br><span class="hljs-keyword">private</span> <span class="hljs-attr">rating</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;<span class="hljs-comment">//默认</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>angular</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>angular4学习笔记整理（三）angular4的服务</title>
    <link href="/2018/01/12/angular4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%89%EF%BC%89angular4%E7%9A%84%E6%9C%8D%E5%8A%A1/"/>
    <url>/2018/01/12/angular4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%89%EF%BC%89angular4%E7%9A%84%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="依赖注入基本步骤"><a href="#依赖注入基本步骤" class="headerlink" title="依赖注入基本步骤"></a>依赖注入基本步骤</h2><ol><li><p>生成service</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductService</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; &#125;<br><span class="hljs-title function_">getProduct</span>(): <span class="hljs-title class_">Product</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;iphone&#x27;</span>, <span class="hljs-number">5899</span>, <span class="hljs-string">&#x27;hahah&#x27;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>app.module.ts或者 某组件的配置里加上 提供器</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@NgModule</span>(&#123;<br><span class="hljs-attribute">declarations</span>: [<br>AppComponent,<br>Product1Component,<br>Product2Component<br>],<br><span class="hljs-attribute">imports</span>: [<br>BrowserModule<br>],<br><span class="hljs-attribute">providers</span>: [ProductService],<br><span class="hljs-attribute">bootstrap</span>: [AppComponent]<br>&#125;)<br></code></pre></td></tr></table></figure><p>在module里配置的providers会对所有组件生效<br>但如果在组件的ts里面配置，则组件里配置的优先生效如：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Component</span>(&#123;<br><span class="hljs-attribute">selector</span>: <span class="hljs-string">&#x27;app-product2&#x27;</span>,<br><span class="hljs-attribute">templateUrl</span>: <span class="hljs-string">&#x27;./product2.component.html&#x27;</span>,<br><span class="hljs-attribute">styleUrls</span>: [<span class="hljs-string">&#x27;./product2.component.css&#x27;</span>],<br><span class="hljs-attribute">providers</span>: [&#123;<span class="hljs-attribute">provide</span>: ProductService , <span class="hljs-attribute">useClass</span>: AnotherProductService&#125;]<br>&#125;)<br></code></pre></td></tr></table></figure><p>并且可以根据</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">providers:</span> [&#123;<span class="hljs-attr">provide:</span> <span class="hljs-string">ProductService</span> , <span class="hljs-attr">useClass:</span> <span class="hljs-string">AnotherProductService</span>&#125;]<br></code></pre></td></tr></table></figure><p>来指定不同的服务，虽然不同class，但在组件生成的东西还是一样的</p></li><li><p>在组件里面注入服务如</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">constructor</span><span class="hljs-params">(<span class="hljs-keyword">private</span> productService: ProductService)</span> <span class="hljs-comment">&#123; &#125;</span></span><br></code></pre></td></tr></table></figure></li></ol><p>另外<br>服务之间也能相互注入靠@Injectable()<br>服务之间也可以注入，步骤一样，注册提供</p><p>还有这个<br>工厂和值申明提供器,高级玩法，我就学过没用过，提醒一下自己</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade">providers: [<br><span class="hljs-comment">// ProductService,</span><br>&#123;<br><span class="hljs-attr">provide</span>: ProductService ,<br><span class="hljs-attr">useFactory</span>: <span class="hljs-function">(<span class="hljs-params">logger: LoggerService, isDev</span>) =&gt;</span> &#123;   <span class="hljs-comment">//依赖注入服务工厂方法，实例化不同的productService</span><br><span class="hljs-comment">// let logger = new LoggerService();</span><br><span class="hljs-keyword">if</span> (isDev) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ProductService(logger);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AnotherProductService(logger);<br>&#125;<br>&#125;,<br><span class="hljs-attr">deps</span>: [ LoggerService , <span class="hljs-string">&quot;IS_DEV_ENV&quot;</span>]     <span class="hljs-comment">//工厂方法也可以注入服务或者值，前一个是login服务 ，后一个是 变量注入（可以使对象）</span><br>&#125;,<br>&#123;<span class="hljs-attr">provide</span> : <span class="hljs-string">&quot;IS_DEV_ENV&quot;</span> , <span class="hljs-attr">useValue</span> : <span class="hljs-literal">false</span> &#125;,  <span class="hljs-comment">//声明的值服务</span><br>LoggerService<br>],<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>angular</category>
      
    </categories>
    
    
    <tags>
      
      <tag>service</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>angular4学习笔记整理（二）angular4的路由使用</title>
    <link href="/2018/01/12/angular4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89angular4%E7%9A%84%E8%B7%AF%E7%94%B1%E4%BD%BF%E7%94%A8/"/>
    <url>/2018/01/12/angular4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89angular4%E7%9A%84%E8%B7%AF%E7%94%B1%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>这章说一下angular的路由，我也就紧急学了下，实际上在ionic里都没用到这方面的知识，ionic把路由都封好了<br>先说angular路由怎么引入，一开始new出来的angular项目它路由帮你配好了，但看要看app.module.ts里面</p><ol><li>首先最上面要引入路由模块<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123;RouterModule, Routes&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/router&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li>然后在ngModule里面加点东西<br><img src="/img/6114493-aeb2f9d6fdf7cc80.webp" alt="Screenshot 2018-01-12_19-41-32.png"></li><li>这个routeConfig需要自己定义，类型Routes，里面就是angular路由配置</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">const routeConfig: Routes = [<br>&#123;path: <span class="hljs-string">&#x27;&#x27;</span> , component : HomeComponent&#125;,<br>]<br></code></pre></td></tr></table></figure><p>当然路由配置也是可以抽出来的</p><h4 id="路由配置简单介绍"><a href="#路由配置简单介绍" class="headerlink" title="路由配置简单介绍"></a>路由配置简单介绍</h4><ol><li>常用跳转</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">const routeConfig: Routes = [<br>&#123;path: <span class="hljs-string">&#x27;&#x27;</span> , component : HomeComponent&#125;, <span class="hljs-regexp">//</span>path为<span class="hljs-string">&#x27;&#x27;</span>首页即是<br>&#123;path: <span class="hljs-string">&#x27;chat&#x27;</span>,component: ChatComponent,&#125;,<span class="hljs-regexp">//</span>访问首页地址+/chat    即能访问到chat组件<br>&#123;path: <span class="hljs-string">&#x27;au/:id&#x27;</span>,component: AuComponent&#125;,<span class="hljs-regexp">//</span>路由param传参<br>&#123;path: <span class="hljs-string">&#x27;**&#x27;</span>,component: Code404Component&#125; <span class="hljs-regexp">//</span>不能匹配的路由由 ** 匹配<br>]<br></code></pre></td></tr></table></figure><p>其中第三个路由传参的接收方组件想要拿到参数就需要多加点<br>a. 首先引入 </p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123;ActivatedRoute, Params&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/router&#x27;</span>;<br></code></pre></td></tr></table></figure><p>b. 并在constructor里注入这个路由服务</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">constructor</span><span class="hljs-params">(<span class="hljs-keyword">private</span> routeInfo: ActivatedRoute)</span> <span class="hljs-comment">&#123; &#125;</span></span><br></code></pre></td></tr></table></figure><p>c. 获取param参数<br>其中有2种方式获取param<br>第一种是snapshot 参数快照</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">ngOnInit</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">//constructor创建时会只创建一次ngOnInit，所以this.routeInfo.snapshot.params[&#x27;id&#x27;]的值会不变</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">productId</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">routeInfo</span>.<span class="hljs-property">snapshot</span>.<span class="hljs-property">params</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>但有一个问题<br>如果已经请求 localhost:4200&#x2F;au&#x2F;6  后，再请求 localhost:4200&#x2F;au&#x2F;8 ，相当于同路由跳转只是参数不同，那么第二次拿到的param数字还是第一次的6<br>原因</p><blockquote><p>constructor创建时会只创建一次ngOnInit，所以this.routeInfo.snapshot.params[‘id’]的值会不变</p></blockquote><p>所以更多的获取参数更推荐第二种参数订阅的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">ngOnInit</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">routeInfo</span>.<span class="hljs-property">params</span>.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">(<span class="hljs-params">params: Params</span>) =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">productId</span> = params.<span class="hljs-property">id</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>怎么跳参数都是对的用第二种</p><h4 id="子路由"><a href="#子路由" class="headerlink" title="子路由"></a>子路由</h4><p>只是一层路由明显满足不了开发需求，可以再配置子路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;<br><span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;product&#x27;</span>,<br><span class="hljs-attr">component:</span> <span class="hljs-string">ProductComponent</span>,<br><span class="hljs-attr">children:</span> [<br>&#123;<br><span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;childA&#x27;</span>, <span class="hljs-attr">component:</span> <span class="hljs-string">ChildAComponent</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;childB&#x27;</span>, <span class="hljs-attr">component:</span> <span class="hljs-string">ChildBComponent</span><br>&#125;<br>]<br>&#125;<br></code></pre></td></tr></table></figure><p>但是子路由光这样还是不行·<br>在父组件html里加跳到子路由的按钮时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> [<span class="hljs-attr">routerLink</span>]=<span class="hljs-string">&quot;[&#x27;./childA&#x27;]&quot;</span> &gt;</span>销售员A<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> [<span class="hljs-attr">routerLink</span>]=<span class="hljs-string">&quot;[&#x27;./childB&#x27;]&quot;</span> &gt;</span>销售员B<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意这里不能加&#x2F; 因为斜杠指向根路径，  .&#x2F;才指向相对路径</strong></p><h4 id="重定向路由"><a href="#重定向路由" class="headerlink" title="重定向路由"></a>重定向路由</h4><p>使用 redirectTo</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">const routes: Routes = [&#123;<br>path: <span class="hljs-string">&#x27;&#x27;</span>,<br>redirectTo: <span class="hljs-string">&#x27;home/6&#x27;</span>,<br>pathMatch: <span class="hljs-string">&#x27;full&#x27;</span> <br>&#125;]<br></code></pre></td></tr></table></figure><h4 id="辅助路由"><a href="#辅助路由" class="headerlink" title="辅助路由"></a>辅助路由</h4><p>就是一个插座,辅助路由通过不同的outlet配置，让页面的router-outlet标签，显示不同内容<br>路由配置</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">const</span> routes: Routes = [&#123;<span class="hljs-comment">//辅助路由指向ChatComponent组件，插座名称aux</span><br>path: <span class="hljs-string">&#x27;chat&#x27;</span>,<br>component: ChatComponent,<br>outlet: <span class="hljs-string">&#x27;aux&#x27;</span><br>&#125;]<br></code></pre></td></tr></table></figure><p>引用插座的html代码</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> [<span class="hljs-attr">routerLink</span>]=<span class="hljs-string">&quot;[</span></span></span><span class="hljs-template-variable">&#123;outlets:&#123;primary:&#x27;home/2&#x27;,aux:&#x27;chat&#x27;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&#125;]&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> [<span class="hljs-attr">routerLink</span>]=<span class="hljs-string">&quot;[</span></span></span><span class="hljs-template-variable">&#123;outlets:&#123;aux:null&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&#125;]&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-comment">&lt;!--不引用辅助路由--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-outlet</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-outlet</span>&gt;</span> <span class="hljs-comment">&lt;!--插件内容显示的地方--&gt;</span></span><br></code></pre></td></tr></table></figure><p>应该会有人问第一行的primary干嘛的<br><strong>辅助路由的改变只会改变插座的内容，不影响主路由</strong><br>比如原本路径是<br><a href="http://localhost:4200/home/0">http://localhost:4200/home/0</a><br>现在如果[routerLink]&#x3D;”[{outlets:{aux:’chat’}}]”的a标签被点击，改变的只是辅助路由，路径会变为<br><a href="http://localhost:4200/home/0(aux:chat)">http://localhost:4200/home/0(aux:chat)</a><br>只有加上primary:’home&#x2F;2’，主路由才会一起变，变成<a href="http://localhost:4200/home/2(aux:chat)">http://localhost:4200/home/2(aux:chat)</a><br>同主路由间跳来跳去想把辅助路由干掉，用第二行即可<br>####路由守卫<br>只有用户已经登陆或者拥有某些权限才可进入的路由<br><strong>canActive</strong></p><ol><li>写一个守卫类，继承 CanActivate 接口</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">CanActivate</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/router&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginGuard</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CanActivate</span> &#123;<br><span class="hljs-title function_">canActivate</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">loginedIn</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &lt; <span class="hljs-number">0.5</span>;<br><span class="hljs-keyword">if</span> (!loginedIn) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用户未登陆&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> loginedIn;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是CanDeactivate 与canActivate不同的是它要离开某个组件就需要保护那个组件，建立也要注入那个组件</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">export <span class="hljs-keyword">class</span> <span class="hljs-symbol">UnsaveGuard</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">CanDeactivate</span>&lt;<span class="hljs-symbol">ProductComponent</span>&gt;&#123;<br>canDeactivate (component: ProductComponent) &#123;<br><span class="hljs-keyword">return</span> window.confirm(<span class="hljs-string">&#x27;是否离开&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这两个返回都应该是boolean型<br>2. 在路由配置里加配置<br><strong>canActivate 在路由配置时可以配置一个数组，angular会一次调用数组中的项，一旦某个返回false，则会终止登陆操作</strong></p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ldif">&#123;<br><span class="hljs-attribute">path</span>: &#x27;product&#x27;,<br><span class="hljs-attribute">component</span>: ProductComponent,<br><span class="hljs-attribute">canActivate</span>: [loginGuard],<br><span class="hljs-attribute">canDeactivate</span>: [UnsaveGuard]<br>&#125;<br></code></pre></td></tr></table></figure><p>服务里加上该服务</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@NgModule</span>(&#123;<br><span class="hljs-attribute">imports</span>: [RouterModule.<span class="hljs-built_in">forRoot</span>(routes)],<br><span class="hljs-attribute">providers</span>: [LoginGuard, UnsaveGuard],<br><span class="hljs-attribute">exports</span>: [RouterModule]<br>&#125;)<br></code></pre></td></tr></table></figure><p>路由守卫 非常重要 。再给个我网上找的参考文章<br><a href="http://blog.csdn.net/qq451354/article/details/54017466">http://blog.csdn.net/qq451354/article/details/54017466</a></p>]]></content>
    
    
    <categories>
      
      <category>angular</category>
      
    </categories>
    
    
    <tags>
      
      <tag>router</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>angular4学习笔记整理（四）组件间通讯、管道</title>
    <link href="/2018/01/12/angular4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E8%AE%AF%E3%80%81%E7%AE%A1%E9%81%93/"/>
    <url>/2018/01/12/angular4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E8%AE%AF%E3%80%81%E7%AE%A1%E9%81%93/</url>
    
    <content type="html"><![CDATA[<p>####组件间通讯<br>1.组件间通讯 。<br>父组件向子组件输入属性用</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">app</span>-<span class="hljs-keyword">order</span> [stockCode]=<span class="hljs-string">&quot;stock&quot;</span> [amount]=<span class="hljs-string">&quot;100&quot;</span>&gt;&lt;/<span class="hljs-keyword">app</span>-<span class="hljs-keyword">order</span>&gt;<br></code></pre></td></tr></table></figure><p>子组件声明接收父组件的属性@input()注解</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Input</span>()<br><span class="hljs-attribute">amount</span>: number;<br></code></pre></td></tr></table></figure><p>2.组件输出属性</p><p>1.在发射的组件内部定义发射的EventEmitter对象</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Output</span>()<br><span class="hljs-attribute">lastPrice</span>: EventEmitter&lt;PriceQuote&gt; = new <span class="hljs-built_in">EventEmitter</span>();<br></code></pre></td></tr></table></figure><p>2.在发射组件里 将要发射的变量发射出去 ，注意类型必须和定义里的泛型一致</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> pq = <span class="hljs-keyword">new</span> <span class="hljs-constructor">PriceQuote(<span class="hljs-params">this</span>.<span class="hljs-params">stockCode</span>, Math.<span class="hljs-params">random</span>()</span><span class="hljs-operator"> * </span><span class="hljs-number">100</span>);<br>this.lastPrice.emit(pq);<br></code></pre></td></tr></table></figure><p>3.在发射组件标签声明的地方加上监听该emitEvent对象传过来的事件</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;app-price-<span class="hljs-literal">quote</span> (lastPrice)=<span class="hljs-string">&quot;priceQuoteHandler($event)&quot;</span>&gt;&lt;/app-price-<span class="hljs-literal">quote</span>&gt;<br></code></pre></td></tr></table></figure><p>然后父组件里就可以写，事件就是发射过来的值</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-title function_">priceQuoteHandler</span>(<span class="hljs-params">priceQuote</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">priceQuote</span> <span class="hljs-operator">=</span> <span class="hljs-variable">priceQuote</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意想监听事件的名字即不是lastPrice 只要在output里改即可</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Output(<span class="hljs-string">&#x27;priceChange&#x27;</span>)</span><br></code></pre></td></tr></table></figure><p>但是这样有感觉很麻烦，能不能用<strong>双向绑定</strong></p><p>还有注意 如果一个属性想用双向绑定 那么如果输入属性为rating ，并且想在标签上<code>[(rating)]</code>，获取输出值那么在组件内的输出属性 名称必须为<code>ratingChange</code>  ，加个Change</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Output()</span><br><span class="hljs-keyword">private</span> ratingChange: EventEmitter&lt;number&gt; = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventEmitter</span>();<br></code></pre></td></tr></table></figure><p>####管道<br>普通应用，这个使用可以去查官网</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">birthday</span> | date : <span class="hljs-string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">pi</span> | number: <span class="hljs-string">&#x27;2.2-4&#x27;</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>自定义管道需命令行生成 <code>ng g pipe name</code><br>管道和组件一样需申明在NgModule里</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">declarations:</span> [<br>FilterPipe<br>],<br></code></pre></td></tr></table></figure><p>自定义管道</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Pipe</span>, <span class="hljs-title class_">PipeTransform</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-meta">@Pipe</span>(&#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;filter&#x27;</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterPipe</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PipeTransform</span> &#123;<br><span class="hljs-title function_">transform</span>(<span class="hljs-attr">list</span>: <span class="hljs-built_in">any</span>[], <span class="hljs-attr">filterField</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">keyword</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">any</span> &#123;<br><span class="hljs-keyword">if</span> (!filterField || !keyword) &#123;<br><span class="hljs-keyword">return</span> list;<br>&#125;<br><span class="hljs-keyword">return</span> list.<span class="hljs-title function_">filter</span>( <span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> fieldVaule = item[filterField];<br><span class="hljs-keyword">return</span> fieldVaule.<span class="hljs-title function_">indexOf</span>(keyword) &gt;= <span class="hljs-number">0</span>;<br>&#125;);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>####如何在父组件中调用子组件的方法<br>子组件就一个gretting的方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">父组件html代码<br><span class="hljs-tag">&lt;<span class="hljs-name">app-children</span> #<span class="hljs-attr">child1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-children</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">app-children</span> #<span class="hljs-attr">child2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-children</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;child2.gretting(&#x27;jsex&#x27;)&quot;</span>&gt;</span>hahah1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父组件ts代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> &#123; Component, OnInit, ViewChild&#125; from <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;ChildrenComponent&#125; from <span class="hljs-string">&#x27;./children/children.component&#x27;</span>;<br><br><span class="hljs-meta">@Component(&#123;</span><br><span class="hljs-meta">selector: <span class="hljs-string">&#x27;app-root&#x27;</span>,</span><br><span class="hljs-meta">templateUrl: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="hljs-meta">styleUrls: [<span class="hljs-string">&#x27;./app.component.css&#x27;</span>]</span><br><span class="hljs-meta">&#125;)</span><br>export <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> <span class="hljs-title">implements</span> <span class="hljs-title">OnInit</span>,<span class="hljs-type"></span>&#123;<br><span class="hljs-meta">@ViewChild(<span class="hljs-string">&#x27;child1&#x27;</span>)</span><br>child1: ChildrenComponent;<br>greeting: string = <span class="hljs-string">&#x27;heelo&#x27;</span>;<br>ngOnInit(): void &#123;<br><span class="hljs-keyword">this</span>.child1.gretting(<span class="hljs-keyword">this</span>.greeting);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.在ts中调用子组件方法<br>html里</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;app-children #child1&gt;</span><span class="hljs-section">&lt;/app-children&gt;</span><br></code></pre></td></tr></table></figure><p>ts里</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@ViewChild</span>(<span class="hljs-string">&#x27;child1&#x27;</span>)<br><span class="hljs-attribute">child1</span>: ChildrenComponent;<br></code></pre></td></tr></table></figure><p>父组件ts任意地方就可以</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.child1.gretting(<span class="hljs-keyword">this</span>.greeting);<br></code></pre></td></tr></table></figure><p>2.在html里调用子组件api</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">app-children</span> #<span class="hljs-attr">child2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-children</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;child2.gretting(&#x27;jsex&#x27;)&quot;</span>&gt;</span>hahah<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>angular</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pipe</tag>
      
      <tag>emit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有用的css知识收集</title>
    <link href="/2017/12/07/%E6%9C%89%E7%94%A8%E7%9A%84css%E7%9F%A5%E8%AF%86%E6%94%B6%E9%9B%86/"/>
    <url>/2017/12/07/%E6%9C%89%E7%94%A8%E7%9A%84css%E7%9F%A5%E8%AF%86%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p><strong>currentColor</strong><br>表示“当前的标签所继承的文字颜色”。</p><p><strong>实战1：背景色镂空技术</strong>去年介绍过“<a href="http://www.zhangxinxu.com/wordpress/?p=3545">CSS背景色镂空技术</a>”，可以方便控制图标的颜色，很赞的想法。此文章对应demo可以<a href="http://www.zhangxinxu.com/study/201307/background-color-insert-background-image.html">轻戳这里</a>访问。<br>这种设计的目的就是鼠标hover时候，图标可以跟着文字一起变色。如果不考虑兼容性问题，我们可以稍稍改造下，使其实现更加简单：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">.icon &#123; <br>display: inline-block; width: 16px;<br>height: 20px; <br>background-image: url(../201307/sprite_icons.png); <br>background-color: currentColor; /* 该颜色控制图标的颜色 */<br>&#125;<br></code></pre></td></tr></table></figure><p>于是，我们想要鼠标hover文字链接，其图标颜色要跟着一起变化，只要改变文字颜色就可以了.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">.<span class="hljs-built_in">link</span>:hover &#123; color: <span class="hljs-comment">#333; &#125;/* 虽然改变的是文字颜色，但是图标颜色也一起变化了 */</span><br></code></pre></td></tr></table></figure><p>HTML结构如下：<br><code>&lt;a href=&quot;##&quot; class=&quot;link&quot;&gt;&lt;i class=&quot;icon icon1&quot;&gt;&lt;/i&gt;返回&lt;/a&gt;</code><br>于是鼠标hover就是<code>#333</code><br>因为<code>currentColor</code>继承文本颜色这个属性,<code>color</code>的改变会随之改变<code>background-color</code></p><h2 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h2><hr><p><code> &lt;meta http-equiv=&quot;x-ua-comatible&quot; content=&quot;ie=edge&quot;&gt;</code></p><ol><li>它代表ie文档的兼容性，告诉文档在<strong>ie</strong>下的兼容模式，</li><li>它是为了兼容一些在ie8下显示不正常，但在老版本浏览器下显示正常的模式</li><li>通过content  可以告诉 ie浏览器 你可以模拟 ie7的形式或者ie8或者ie9、ie11的形式显示网页</li><li>比如<code>content=&quot;IE=EmulateIE8&quot;</code>以ie8的模式渲染页面</li><li>ie&#x3D;edge是为了强制ie浏览器以最新的模式渲染页面，能多新，有多新，<strong>（但如果浏览器最高ie8，那也只能用ie8的模式渲染）</strong>。</li></ol><h2 id="移动端meta必备"><a href="#移动端meta必备" class="headerlink" title="移动端meta必备"></a>移动端meta必备</h2><p><code>&lt;meta name=&quot;view-port&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</code></p><h2 id="对于ie低版本兼容"><a href="#对于ie低版本兼容" class="headerlink" title="对于ie低版本兼容"></a>对于ie低版本兼容</h2><ul><li>css里 \0  大家都懂</li><li>html里<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">&lt;!--[<span class="hljs-keyword">if</span> lte IE8]&gt;<br>&lt;p&gt;如果浏览器小于等于ie8，那么我提示你该升级了&lt;/p&gt;<br>&lt;![endif]--&gt;<br></code></pre></td></tr></table></figure></li><li>格式不多说  gt 大于、lt小于、gte大于等于、lte小于等于</li></ul><h2 id="px-em-rem"><a href="#px-em-rem" class="headerlink" title="px em rem"></a>px em rem</h2><ol><li>px像素</li><li>em 相对父元素 ，如果没设会一直往上找，很强大但会导致混乱</li><li>rem 相对html，但rem ie678不支持</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">html &#123;<br>font-size: 62.5%;<br>color: <span class="hljs-comment">#222;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如此一个rem会是10px </p><h2 id="取消选中"><a href="#取消选中" class="headerlink" title="取消选中"></a>取消选中</h2><p>css3属性  顺序不能乱，不然谷歌没有，火狐有</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">::-moz-selection&#123;<br>background-color: <span class="hljs-comment">#b3d4fc;</span><br>text-shadow: none;<br>&#125;<br>::selection&#123;<br>background-color: <span class="hljs-comment">#b3d4fc;</span><br>text-shadow: none;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="隐藏文字"><a href="#隐藏文字" class="headerlink" title="隐藏文字"></a>隐藏文字</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">.text-hide&#123;<br>font:0/0 a;<br>color: transparent;<br>text-shadow: none;<br>background-color: transparent;<br>border: 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意其中的text-hide 是为了隐藏文字，方便seo识别图片</p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">.clearfix:after,.clearfix:before&#123;<br>content:<span class="hljs-string">&#x27; &#x27;</span>;<br>display: table;<br>&#125;<br>.clearfix:after&#123;<br>clear:both;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方法可以防止margin的叠加</p><h2 id="before-利用"><a href="#before-利用" class="headerlink" title="before 利用"></a>before 利用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">.notice a:first-child:before&#123;<br>content: <span class="hljs-string">&#x27;最新公告：\00a0\00a0&#x27;</span>;<br>color: <span class="hljs-comment">#aaa;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>\00a0\00a0</code>是不换行的空白字符,因为content没法用<code>&amp;nbsp</code>添加空格</p><h2 id="文字不换行-多出省略"><a href="#文字不换行-多出省略" class="headerlink" title="文字不换行,多出省略"></a>文字不换行,多出省略</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">.notice a:first-child&#123;<br>text-overflow: ellipsis;<br>overflow: hidden;<br>white-space: nowrap;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="设备信息"><a href="#设备信息" class="headerlink" title="设备信息"></a>设备信息</h2><p>用户代理字符串在控制台输入<code>navigator.userAgent</code>获得相关设备信息</p><h2 id="文字超出隐藏"><a href="#文字超出隐藏" class="headerlink" title="文字超出隐藏"></a>文字超出隐藏</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">&#123;<br>overflow: hidden;<br>white-space: nowrap;<br>text-overflow: ellipsis;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="图标随文字变色设计"><a href="#图标随文字变色设计" class="headerlink" title="图标随文字变色设计"></a>图标随文字变色设计</h2><p><strong>背景色镂空技术</strong> 利用<br><strong>currentColor</strong>表示“当前的标签所继承的文字颜色”。<br>这种设计的目的就是鼠标hover时候，图标可以跟着文字一起变色。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">.icon &#123;<br>display: inline-block;<br>width: 16px; height: 20px;<br>background-image: url(../201307/sprite_icons.png);<br>background-color: currentColor; /* 该颜色控制图标的颜色 */<br>&#125;<br></code></pre></td></tr></table></figure><p>于是，我们想要鼠标hover文字链接，其图标颜色要跟着一起变化，只要改变文字颜色就可以了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">.<span class="hljs-built_in">link</span>:hover &#123; <br>color: <span class="hljs-comment">#333; </span><br>&#125;<br></code></pre></td></tr></table></figure><p>因为<code>currentColor</code>继承文本颜色这个属性,<code>color</code>的改变会随之改变<code>background-color</code></p><h2 id="margin-top溢出问题："><a href="#margin-top溢出问题：" class="headerlink" title="margin-top溢出问题："></a>margin-top溢出问题：</h2><p>给元素盒子一个垂直外边距margin-top，父元素盒子也会往下走margin-top的值。<br>有以下几点解决方案<br>1.修改父元素高度，增加padding-top                     好用，但间距变成margin+padding<br>2.为父元素添加overflow：hidden                            特别好用，相当于子元素向下移，但范围和子元素大小要注意<br>3.为父元素或者子元素申明浮动（float：left）            可以用，但会改变父子的定位，会浮起来<br>4.为父元素添加border                                            好用，但会改变边框</p><h2 id="毛玻璃特效"><a href="#毛玻璃特效" class="headerlink" title="毛玻璃特效"></a>毛玻璃特效</h2><p>css代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh">.blur &#123;    <br>-webkit-filter: blur(20px); /* Chrome, Opera */<br>-moz-filter: blur(20px);<br>-ms-filter: blur(20px);    <br>filter: blur(20px);    <br>&#125;<br>/**--图片上的div--**/<br>.top-bg&#123;<br>position: absolute;<br>top: 0;<br>left: 0;<br>width: 100%;<br>height: 100%;<br>z-index: -1;<br>overflow: hidden;<br>&#125;<br>.top-bg img&#123;<br>transform: scale(4.0);<br>&#125;<br></code></pre></td></tr></table></figure><p>html代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">&lt;div&gt;  &lt;!--父层--&gt;<br>&lt;div class=<span class="hljs-string">&quot;top-bg blur&quot;</span>&gt; &lt;!--背景层--&gt;<br>![](./img/37403260_p0.png)  &lt;!-- 图片层--&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
